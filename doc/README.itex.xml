<!DOCTYPE book [
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">

<!ENTITY % dbcent 
	 PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN"
	 "/usr/share/xml/docbook/schema/dtd/4.5/dbcentx.mod">
%dbcent;

<!ENTITY % xhtml-lat1
         PUBLIC "-//W3C//ENTITIES Latin 1 for XHTML//EN"
         "http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent" >
%xhtml-lat1;

<!ENTITY % ent-mmlalias
      PUBLIC "-//W3C//ENTITIES Aiases for MathML 2.0//EN"
             "/usr/share/xml/schema/w3c/mathml/dtd/mmlalias.ent" >
%ent-mmlalias;
]>
<article xmlns="http://docbook.org/ns/docbook" version="5.0" 
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
	 xml:lang="en">
  <info><title><application>BAli-Phy</application> User's Guide v2.1.1</title>
    
    <author><personname><firstname>Benjamin</firstname><surname>Redelings</surname></personname></author>
  </info>

  <section xml:id="intro"><info><title>Introduction</title></info>
    <para><application>BAli-Phy</application> is a Unix command
      line program that is developed primarily on
      Linux.  <application>BAli-Phy</application> also runs on
      Windows and Mac OS X, but it is not a GUI program and so you
      must run it in a terminal.  Therefore, you might want to keep a
      <link xmlns:xlink="http://www.w3.org/1999/xlink"
	    xlink:href="http://www.ee.surrey.ac.uk/Teaching/Unix">Unix
      tutorial</link> or <link xmlns:xlink="http://www.w3.org/1999/xlink"
	    xlink:href="http://www.rain.org/~mkummel/unix.html">Unix
      cheat sheet</link> handy while you work.
    </para>
  </section>

  <section xml:id="installation"><info><title>Installation</title></info>

  <section xml:id="pre-requisites"><info><title>Hardware requirements</title></info>
    
    <para>We recommend running BAli-Phy on a computing cluster for long runs.
    A computing cluster can speed up the analysis by allowing
    you to run several identical MCMC chains simultaneously and then
    pool the resulting samples.  You also don't need to worry that
    logging out or turning off the computer will terminate the run
    early.  Result files can be copied back to a laptop or desktop for
    viewing.</para> 

    <para>
      We typically run <application>BAli-Phy</application> on Core2
      processors with 8Gb of RAM.  You may need a 64-bit executable and a 64-bit
      version of your operating system to be able to analyze large data sets that
      consume more that 2Gb of RAM.
    </para>

    <para>
    </para>
  </section>

    <section><info><title>MS Windows requirements</title></info>
      <para>Before you can use <application>BAli-Phy</application> on
      MS Windows, you must first install <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.cygwin.com/install.html">Cygwin</link>.
      Cygwin is a Unix/Linux command-line environment for Windows.
While running the Cygwin installer
	<filename>setup.exe</filename>, you will be given an
	opportunity to select additional packages.
	<itemizedlist>
	  <listitem><para>From <guilabel>Interpreters</guilabel>, select <guilabel>perl</guilabel>.</para></listitem>
	  <listitem><para>From <guilabel>Web</guilabel>, select <guilabel>wget</guilabel>.</para></listitem>
	  <listitem><para>From <guilabel>Editors</guilabel>, select <guilabel>nano</guilabel>.</para></listitem>
	</itemizedlist>
      </para>

      <para>You may then access the Unix command line environment by running the
      <application>Cygwin Terminal</application> application (not the
      normal windows command line).</para> 

      <para>You might wish to save the installer on your
      desktop in case you want to run it again, since you can use it
      to install additional packages later.</para>

      <para>In order to access your Windows files from inside cygwin, note
      that <filename>C:/</filename> is accessed as
      <filename>/cygdrive/c/</filename>.  Thus, for example, you can
      access downloaded files at <filename>/cygdrive/c/Documents\ and\
      Settings/<replaceable>username</replaceable>/Downloads/</filename>.
      </para>
    </section>

    <section><info><title>Mac OS X requirements</title></info>
      <para>We recommend Mac OS X version 10.4 (or higher).</para>
    </section>

    <section><info><title>Linux requirements</title></info>
      <para>No extra requirements.</para>
    </section>

    <section><info><title>Installing BAli-Phy executables</title></info>

    <orderedlist>

      <listitem><para>Start by opening a Unix terminal window.  (On Apple, this is the <application>Terminal</application>
    application; on Windows it will be the <application>Cygwin Terminal</application>, not the
    Windows command prompt.)</para></listitem>
    
    <listitem><para>Make a directory called <filename>local</filename> in your
    home directory to contain the executable files:
<screen><prompt>%</prompt> <userinput>mkdir ~/local</userinput></screen>
    <note>
    Note that <userinput>~</userinput> is a synonym for
    <userinput>&#36;HOME</userinput>, your home directory.  You can
    find out what your home directory is by typing
<screen><prompt>%</prompt> <userinput>echo &#36;HOME</userinput></screen>
or
<screen><prompt>%</prompt> <userinput>echo ~</userinput></screen></note>
</para></listitem>

    <listitem><para><link xmlns:xlink="http://www.w3.org/1999/xlink"
    xlink:href="http://www.bali-phy.org/download.php">Download</link> 
BAli-Phy executables for your operating system from the web site using your browser.  If you're not sure, choose the 32-bit executables.  Save them to the <filename>~/local/</filename> directory that you just created on the command line. Then check to see that the file is there:
<screen><prompt>%</prompt> <userinput>ls ~/local</userinput>
bali-phy-<replaceable>version</replaceable>.tgz
</screen>
</para>
<para>Alternatively, you can download the file directly from the command line using <userinput>wget</userinput> if you know the URL:
<screen><prompt>%</prompt> <userinput>cd ~/local</userinput>
<prompt>%</prompt> <userinput>wget <replaceable>URL</replaceable></userinput>
<prompt>%</prompt> <userinput>ls</userinput>
bali-phy-<replaceable>version</replaceable>.tgz
</screen>
</para>
</listitem>

    <listitem><para>Extract the compressed archive on the Unix (or
    Cygwin) command line using the <command>tar</command> command:
<screen><prompt>%</prompt> <userinput>cd ~/local</userinput>
<prompt>%</prompt> <userinput>tar -zxf bali-phy-<replaceable>version</replaceable>.tgz</userinput>
<prompt>%</prompt> <userinput>ls</userinput>
bali-phy-<replaceable>version</replaceable>.tgz  bin  share
</screen>
    </para></listitem>

    <listitem><para>Finally, test that the program can be run.
<screen><prompt>%</prompt> <userinput>~/local/bin/bali-phy -v</userinput>
VERSION: 2.1.1  [master commit 8ea33010]  (Jan 28 2011 20:27:15)
BUILD: Feb  1 2011 16:14:05
ARCH: x86_64-unknown-linux-gnu
COMPILER: GCC 4.5.2
FLAGS: -isystem &#36;(top_srcdir)/boost/include -ffast-math -DNDEBUG
-DNDEBUG_DP -funroll-loops -fweb  -march=native  -pipe -O3
</screen>
</para></listitem>
    </orderedlist>
    </section>      

    <section><info><title>Adding BAli-Phy to your <envar>PATH</envar></title></info>

      <section><title>I have a path?</title>
      <para>
	If you installed <application>BAli-Phy</application> to the directory
	<filename>~/local</filename>, then you can run
	bali-phy by typing <command>~/local/bin/bali-phy</command>.
	However, it would be much nicer to simply type
	<command>bali-phy</command> and let the computer find the
	executable for you.  This can be achieved by putting the directory
	that contains the <application>BAli-Phy</application> executables into
	your "path".  	The "path" is a colon-separated list of directories that is
	searched to find program names that you type.  It is stored in an
	environment variable called <envar>PATH</envar>.
	</para>
      <para>
	Setting your <envar>PATH</envar> is also a pre-requisite for running
	the <command>bp-analyze.pl</command> script to summarize your
	MCMC runs.
      </para>
      </section>

      <section><title>Examining your <envar>PATH</envar></title>
      <para>
	You can examine the current value of
	this environment variable by typing:
	<screen><prompt>%</prompt> <userinput>echo &#36;PATH</userinput></screen>
	We will assume that you extracted the bali-phy archive in
	<filename>~/local</filename> and so you want to add
	<filename>&#36;HOME/local/bin</filename> to your <envar>PATH</envar>.  (If you
	installed to another directory,
	replace <filename>&#36;HOME/local/</filename> with that directory.)
      </para>
      </section>

      <section><title>Adding BAli-Phy to your <envar>PATH</envar></title>
      <para>The commands
	for doing this depend on what "shell" you are using.  Type
	<command>echo &#36;SHELL</command> to find out. If your
	shell is <command>sh</command> or 
	<command>bash</command> then the command looks like this: 
	<screen><prompt>%</prompt> <userinput>PATH=&#36;HOME/local/bin:&#36;PATH</userinput></screen>
	If your shell is <command>csh</command> or
	<command>tcsh</command>, then the command looks like this:
	<screen><prompt>%</prompt> <userinput>setenv PATH &#36;HOME/local/bin:&#36;PATH</userinput></screen>
	Note that these commands will only affect the window you are typing
	in, and will vanish when you reboot.   
      </para>
      </section>

      <section><title>Making the change stick</title>
	<para>
	  To make this change survives when you logout or reboot, open
	  your shell configuration file in a text editor, and add the
	  command on a line by itself.  This will ensure that it is
	  run every time you log in.
	</para>

	<para>To find the right configuration file, look in your &#36;HOME directory
	  for <filename>.profile</filename> (for the Bourne shell <command>sh</command>), 
	  <filename>.bash_profile</filename> (for BASH), or
	  <filename>.login</filename> (for tcsh).  You may have to
	  create the file if it is not present.  On Cygwin, you should
	  put the change in the file <filename>.bashrc</filename>.
	</para>

	<para>If you do not know which directory is your home
	directory, you can find its full name by typing:
	<screen><prompt>%</prompt> <userinput>echo &#36;HOME</userinput></screen>
	</para>
      </section>
    </section>

    <section xml:id="software_req"><info><title>Additional required software</title></info>

    <para>The following software is important to install:
    <itemizedlist>
      
      <listitem><para>The graphical MCMC diagnostic program
      <link xmlns:xlink="http://www.w3.org/1999/xlink"
	    xlink:href="http://tree.bio.ed.ac.uk/software/tracer/">Tracer</link>.
      </para></listitem> 

    </itemizedlist>
    </para>

    <para>The following software is recommended to install:

    <itemizedlist>

      <listitem><para>The plotting program gnuplot.</para></listitem> 
      
      <listitem><para>The phylogeny-viewer <link
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xlink:href="http://tree.bio.ed.ac.uk/software/figtree/">FigTree</link>.</para></listitem>
      
      <listitem><para>The alignment-viewer <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://pbil.univ-lyon1.fr/software/seaview.html">Seaview</link>.</para></listitem>

    </itemizedlist>
    GNUplot can be installed using the Cygwin installer on Windows
    systems.  It can also be installed using <link
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xlink:href="http://www.macports.org">macports</link> or
    <link xmlns:xlink="http://www.w3.org/1999/xlink"
	  xlink:href="http://http://mxcl.github.com/homebrew/">homebrew</link>
    on Macintosh systems, but installing these package managers
    requires first installing Xcode Developer Tools, which requires an Apple Developer
    ID, and is not trivial.
    </para>

    <para>
      For those who wish to install macports, a <application>bali-phy</application> package is available.
    </para>
      
    </section>

    <section xml:id="tests"><info><title>Testing the installed software</title></info>
    <para>In order to determine that the software has been correctly installed, and the <envar>PATH</envar> has been correctly set, run the following commands:
<screen><prompt>%</prompt> <userinput>bali-phy ~/local/share/bali-phy/examples/5S-rRNA/5d.fasta --iter=50</userinput>
<prompt>%</prompt> <userinput>bp-analyze.pl 5d-1/</userinput></screen>
    </para>
    <para>Furthermore, the directory <filename>5d-1</filename> should contain a file called <filename>C1.p</filename>.  You should be able to load this file in Tracer, although the chain will not really have converged yet.</para>
    </section>

  </section>

  <section xml:id="compilation"><info><title>Compiling <application>BAli-Phy</application></title></info>
    

    <para>Most users will not need to compile <application>BAli-Phy</application>
      and can skip this section, because they can use the precompiled 
      executables from the official website for Linux, Mac, and
      Windows.  However, compiling <application>BAli-Phy</application>
      is intended to be a relatively painless process.
    </para>

    <para>If you are compiling "live" source
      code that you checked out using GIT (and you probably
      aren't) then you need to follow the directions in <xref linkend="gitsource"/> before you start compiling.
    </para>

    <section><info><title>Software requirements</title></info>
      

      <para>The following software packages are required for
	compiling BAli-Phy.
	
	<itemizedlist>
	  <listitem><para> The GNU C++ Compiler (<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://gcc.gnu.org">GCC</link>)
	      version 3.4 (or higher).
	    </para> 
	    
	    <note><info><title>Mac OS X issues:</title></info>
	      
	      
	      <para>Apple's XCode software works, but only if you
		use OS X 10.4 (Tiger) or higher, and install XCode
		2.2 or higher.
	      </para>
	    </note>
	  </listitem>

	  <!--listitem><para>
	      <ulink url="http://www.gnu.org/software/make">
		GNU make</ulink> version 3.80 (or higher).
	  </para></listitem-->
	  <listitem><para> The GNU Scientific Library (<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.gnu.org/software/gsl/">GSL</link>) version 1.8 (or higher).</para></listitem>
	  <listitem><para> The Cairo graphics library
	      (<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.cairographics.org/">Cairo</link>)
	      version 1.6 (or higher).  (Cairo is not strictly
	    necessary, but is a requirement for building the
	    tool <application>draw-tree</application> that is used to
	    draw consensus trees.)</para></listitem>
	  
	  <!-- listitem><para> The BOOST C++ Library (<ulink
							 url="http://www.boost.org">BOOST</ulink>) version 1.32 (or higher).</para></listitem -->
	</itemizedlist>
	See also <xref linkend="software_req"/>.
      </para>
      

    </section>

    <section><info><title>Quick Start</title></info>
      
      <para>In order to compile the program on UNIX, first
	extract the source code archive, using a graphical archive
	manager, or the command-line tool <command>tar</command>:
	
	<screen><prompt>%</prompt> <userinput>tar -zxf bali-phy-2.1.1.tgz</userinput></screen>
	Then create a <emphasis>separate</emphasis> build directory, enter it, and run the
	configure command:

	<screen><prompt>%</prompt> <userinput>mkdir build</userinput>
<prompt>%</prompt> <userinput>cd build</userinput>
<prompt>%</prompt> <userinput>../bali-phy-2.1.1/configure --prefix=&#36;HOME/local</userinput></screen>
	
	If this command succeeds, then you can simply type

	<screen><prompt>%</prompt> <userinput>make</userinput>
<prompt>%</prompt> <command>make install</command></screen>

	to build and install <command>bali-phy</command> and its
	associated tools and install it in <filename>~/local/</filename>.
	To customize the compilation and installation process, read the
	following sections on supplying arguments to the
	<command>configure</command> script.
      </para>
    </section>

    <section><info><title>Options to <command>configure</command></title></info>
      

      <section xml:id="install-prefix"><info><title>Installing to a location besides <filename>~/local/</filename></title></info>
	
	<para>The configure script chooses to install
	  <command>bali-phy</command> in the directory
	  <filename>/usr/local/</filename> by default. You can install
	  executables to another directory <replaceable>dir</replaceable>
	  by passing
	  <userinput>--prefix=<replaceable>dir</replaceable></userinput>.
	  For example, in order to install
	  <application>BAli-Phy</application> under
	  <filename>~/local</filename>, you can enter:

	  <screen><prompt>%</prompt> <userinput>../bali-phy-2.1.1/configure --prefix=&#36;HOME/local</userinput></screen>
          This is recommended.
	</para>

      </section>

      <section><info><title>Specifying where to find libraries and header files (e.g. GSL)</title></info>
	
	<para>You can instruct the compiler to look for include files
	  in directory <replaceable>dir</replaceable> by passing
	  <parameter>--with-extra-includes=<replaceable>dir</replaceable></parameter> to the <command>configure</command> script.
	</para>

	<para>You can instruct the compiler to look for libraries
	  files in directory
	  <filename><replaceable>dir</replaceable></filename> by
	  passing
	  <parameter>--with-extra-libs=<replaceable>dir</replaceable></parameter> to the <command>configure</command> script.  
	</para> 

	<para>For example, if your system has GSL installed in <filename>/usr/local/</filename>, then you might need to add "<userinput>--with-extra-includes=/usr/local/include --with-extra-libs=/usr/local/lib</userinput>" to the configure script arguments so that the compiler can find the GSL include files and libraries.</para>
      </section>

      <section><info><title>Selecting a non-default C++ compiler</title></info>
	
	
	<para>The default C++ compiler is <command>g++</command>.  On
	  some systems, <command>g++</command> invokes GCC version 3.3,
	  and the correct compiler is called something else, such as
	  <command>g++-4.5</command>.  To use
	  <command>g++-4.5</command> as the C++ compiler when compiling
	  <application>BAli-Phy</application>, you would set the CXX
	  environment variable as follows:
	  <screen><prompt>%</prompt> <userinput>../bali-phy-2.1.1/configure CXX=g++-4.5</userinput></screen>
	</para>
      </section>

      <section><info><title>Optimizing for a specific architecture</title></info>
	
	<para>You can specify optimizing for a specific brand of CPU,
	  by specifying the <userinput>CHIP</userinput> variable to
	  <command>configure</command>, as follows:
	  <screen><prompt>%</prompt> <userinput>../bali-phy-2.1.1/configure CHIP=<replaceable>cpu</replaceable></userinput></screen>
	  You can set CHIP to any of <userinput>pentium3</userinput>,
	  <userinput>pentium4</userinput>,
	  <userinput>nocona</userinput>, <userinput>core2</userinput>,
	  <userinput>G3</userinput>,
	  <userinput>G4</userinput>, or <userinput>G5</userinput>.
	  (On recent versions of GCC, you can
	  set <userinput>CHIP=native</userinput> to auto-detect the
	  type of CPU you have.)  This may produce faster executables,
	  but at the cost of producing executables that may not run on
	  a different kind of chip.
	</para>
      </section>

      <section><info><title>Statically linked executables</title></info>
	
	<para>Call <command>configure</command> with the flag
	  <userinput>--enable-static</userinput> to build static
	  executables.  Static executables will be able to run on other
	  computers with the with the same type of CPU but slightly
	  different versions of the operating system. 
	</para> 
      </section>
      
      <section><info><title>Example</title></info>
	
	<para>
          All these options to <command>configure</command> can be
	  combined, as follows:
	  <screen><prompt>%</prompt> <userinput>../bali-phy-2.1.1/configure --prefix=&#36;HOME/local --enable-static CXX=g++-4.5 CHIP=pentium4</userinput></screen>
          This example uses <command>g++-4.5</command> to build a
	  pentium4-optimized version of <command>bali-phy</command> with
	  static linkage.
	</para>
      </section>
    </section>
    <section xml:id="gitsource"><info><title>Generating the <command>configure</command> script
	and Makefiles (<application>git</application> only)</title></info>
       
      <para>Skip this step unless you are compiling a
	snapshot of the source code that you checked out using
	GIT. If you downloaded an official tar.gz archive of the
	source from the website, then it already includes these files.
      </para>

      <para>To generate these files, you need automake 1.8 (or higher)
	and autoconf 2.59 (or higher).  Run these commands in the top level
	directory of the repository that you checked out.<screen><prompt>%</prompt><userinput> autoheader</userinput>
<prompt>%</prompt> <userinput>aclocal -I m4</userinput>
<prompt>%</prompt> <userinput>automake -a</userinput>
<prompt>%</prompt> <userinput>autoconf</userinput></screen>
        If your system has multiple versions of automake, then you may
	have to type e.g. <userinput>automake-1.11 -a</userinput> and
	<userinput>aclocal-1.11</userinput> instead in order to specify which
	version to use.
      </para>
    </section>



    <section><info><title>Installing when compiling from source</title></info>
      
      <para>
	After compiling <application>BAli-Phy</application>, you can
	simply type <command>make install</command>.  This will copy the
	compiled executables to the installation directory (See <xref linkend="install-prefix"/>).
      </para>
    </section>

  </section>

  <section xml:id="running"><info><title>Running the program</title></info>
    

    <para>Here are some examples and explanations of how to run <command>bali-phy</command>.  You can get an overview of command line options (see <xref linkend="command_line_options"/>) by running <command> bali-phy --help</command>.</para>
<para>We recommend running multiple chains in parallel for each command, because 
<orderedlist>
  <listitem>You can combine the samples, leading to faster run times.</listitem>
  <listitem>You can compare the runs to determine if the chains have converged.</listitem>
</orderedlist>
</para>

    <section><info><title>Quick Start</title></info>
      
      <para>The simplest way to run <command>BAli-Phy</command> is
	to type all the arguments on the command line:

	<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file</replaceable></userinput></screen>

	Here <replaceable>sequence-file</replaceable> is a FastA or PHYLIP
	file containing the sequences you wish to analyze.  The filename should end
	in <userinput>.fasta</userinput> or <userinput>.phy</userinput> to
	indicate which format it is using.</para>

      <para>In this simple example, <command>bali-phy</command> automatically detects whether <replaceable>sequence-file</replaceable> contains DNA, RNA, or Amino-Acids and uses default values for several command line options.  Thus, if <replaceable>sequence-file</replaceable> contains DNA, then this is equivalent to the more verbose command line
	<screen><prompt>%</prompt> bali-phy <replaceable>sequence-file</replaceable> --alphabet DNA --smodel TN --imodel RS07 --iterations=100000</screen>  Here the substitution model is Tamura-Nei, the insertion/deletion model is RS07, and the number of iterations is 100,000.  If <replaceable>sequence-file</replaceable> contains amino acids, then the defaults will be:<screen><prompt>%</prompt> bali-phy <replaceable>sequence-file</replaceable> --alphabet Amino-Acids --smodel LG --imodel RS07 --iterations=100000</screen> 
      </para>
    </section>

    <section><info><title>Command line options</title></info>
      

      <para>You can specify a more complex substitution model as follows (See <xref linkend="subst_basic"/>):

	<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file</replaceable> --smodel WAG+gamma+INV</userinput></screen> </para>
      <para>You may specify an indel model of <userinput>none</userinput>
	to fix the alignment to its initial value, and ignore information in shared insertions or deletions.
  	<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file</replaceable> --imodel none</userinput></screen></para>
      <para>If you desire to use a codon model, you must specify the alphabet:
	<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file</replaceable> --smodel M0 --alphabet Codons</userinput></screen>
      </para>
    </section>

    <section><info><title>Multiple genes or data partitions</title></info>
      
      <para>You may analyze multiple genes by putting each one it its own data partition:
	<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable></userinput></screen>
	You should put the data from the first gene in <replaceable>sequence-file1</replaceable> and the second gene
	in <replaceable>sequence-file2</replaceable>.  In this scenario, both genes share the same tree, but their alignments vary independently.  Furthermore, the branch lengths for each gene are scaled by an independent factor.  By default, each partition will have its own default alphabet, substitution model, insertion/deletion model, and tree length.    
      </para>

      <para>By default, each partition will recieve an independent copy of the model, and will not share parameter values:
<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable> --smodel TN --imodel RS07</userinput></screen>
However, you can select partition-specific values for 5 options: <userinput>--smodel</userinput>, <userinput>--imodel</userinput>, <userinput>--alphabet</userinput>, <userinput>--same-scale</userinput>, and <userinput>--align-constraint</userinput>.  For example, to specify different substitution models but the same alphabet:
<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable> --smodel 1:TN --smodel 2:GTR --alphabet 1,2:DNA</userinput></screen>
You can fix the alignment and ignore insertion/deletion information in one partition, while allowing the alignment to vary and using insertion/deletion information in another partition:
<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable> --imodel 1:RS07 --imodel 2:none</userinput></screen>
You can also specify that two partitions share a single copy of a single substitution model or indel model.  This reduces the number of parameters and also pools information between the partitions:
<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable> --smodel 1,2:TN --imodel 1,2:RS07</userinput></screen>
By default each partition has a separate scale, but you can force groups of partitions to share a scale. The name of the groups for the scale are not currently used, but may be used in later versions of the software:
<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable> --smodel 1:TN --smodel 2:GTR --same-scale 1,2:groupname</userinput></screen>
Finally, you may specify the option <userinput>--traditional</userinput>, or its short form <userinput>-t</userinput>.  This is the same as <userinput>--imodel none</userinput> and affects all partitions:
<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable> --smodel 1:TN --smodel 2:GTR -t</userinput></screen>
      </para>
    </section>

    <section><info><title>Option files (Scripts)</title></info>
      
      <para>
	In addition to using the command line, you may also specify
	options in a file. Using an option file can be more convenient
	if you are going to run the same analysis many times, or if
	the number of options is large. Furthermore, the option file
	may contain comments and blank lines.  Option files are a good
	to record what options you used in an analysis, and why.
      </para>

	<para>
	  An option file is specified with the command line option <userinput>--config
	    <replaceable>file</replaceable></userinput> or <userinput>-c<replaceable>file</replaceable></userinput>. If values
	    for an option are given both on the command line and
	    in an option file, then the command line value overrides
	    the value in the option file. 
	</para>
      <section><info><title>Syntax</title></info>
	

	<para>Option files use the same option names as the command
	line.  However, the syntax is different:  each option is given
	  on its own line using the syntax "<userinput>option =
	    value</userinput>" instead of the syntax "<userinput>--option
	    value</userinput>".  If the option has no value then it is
	  given using the syntax  "<userinput>option =
	    option</userinput>".  
	</para>
      </section>

      <section><info><title>Example</title></info>
	
	<para>
	  For example, consider the following
	  option file:
	  <programlisting>#select a data set to analyze
align = examples/EF-Tu/5d.fasta

#select an substitution model
smodel = log-normal+INV

#fix the alignment and do not model indels
traditional = traditional
	  </programlisting>
          The first option, <userinput>align</userinput>, is the name of
	  the sequence file, which has no name on the command line.
	  Lines that begin with # are comments, and blank lines are
	  ignored.  The option <userinput>--traditional</userinput> uses
	  the option name as the value, because it does not take a
	  value.  Thus, this configuration file corresponds to the
	  command line
	  <screen><prompt>%</prompt> <userinput>bali-phy ~/local/share/bali-phy/examples/EF-Tu/5d.fasta --smodel log-normal+INV --traditional</userinput></screen>
	</para>
      </section>

      <section><info><title>The configuration file</title></info>
	
	<para>
	  The file <filename>~/.bali-phy</filename> is a special
	  option file called the <emphasis>configuration
	    file.</emphasis>  If it exists, it is always loaded.
	  Options given on the command line or an option file 
	  override values given in <filename>~/.bali-phy</filename>. 
	</para>
      </section>
    </section>

  <section xml:id="examples"><info><title>Examples</title></info>
    
    <para>Here are some examples which demonstrate how to run
      <application>BAli-Phy</application>.  In order to run these
      examples, you must find the <filename>examples/</filename>
      directory which contains the example files.  Typically, the
      <filename>examples/</filename> directory will be found at
      <filename><replaceable>prefix</replaceable>/share/bali-phy/examples/</filename>
      if you installed <application>bali-phy</application> in directory
      <replaceable>prefix</replaceable>.
    </para>

    <para>Also note that <command>bali-phy</command>
      does <emphasis>not</emphasis> run until it
      is "finished", but continues to gather samples until the user
      determines that enough samples have been gathered, and stops it.
      Thus, it is useful to continually examine the output files while
      the program is running. 
    </para>

    <example><info><title>No frills</title></info>
      
      <para>Here we analyze the EF-Tu 5-taxon data set provided with
	the software.</para>
      <screen> <prompt>%</prompt> <userinput>bali-phy ~/local/share/bali-phy/examples/EF-Tu/5d.fasta</userinput></screen>
    </example>

    <example><info><title>Multiple-Rate Substitution Model</title></info>
      
      <para>We now modify the previous example by changing the
	substitution model to allow log-normal-distributed rate variation and
	invariant sites.  The amount of rate variation and the fraction of
	invariant sites are estimated</para>
      
      <screen> <prompt>%</prompt> <userinput>bali-phy ~/local/share/bali-phy/examples/EF-Tu/5d.fasta --smodel log-normal+INV --randomize-alignment</userinput></screen></example>

    <example><info><title>Fixed alignment</title></info>
      
      <para>Here we use the 5S rRNA 5-taxon data set provided with
	the software.  The alignment is fixed and the traditional
	likelihood model is used, making indels non-informative.  In
	addition, the transition kernel which samples nucleotide frequencies
	is disabled, thus fixing the nucleotide frequencies to empirical values
	estimated from the input sequences.
      </para> 

      <screen> <prompt>%</prompt> <userinput>bali-phy ~/local/share/bali-phy/examples/5S-rRNA/5d.fasta --smodel F=constant --traditional</userinput></screen>

    </example>
  </section>

  <section xml:id="command_line_options"><info><title>Command-line options: An overview</title></info>
    

    <para>You can get an up-to-date overview of these command line options by running <command> bali-phy --help</command>.</para>
    <section><info><title>General options</title></info>
      
      
      <variablelist>

	<varlistentry>
	  <term><option>-h, --help</option></term>
	  <listitem><para>Show help message.</para></listitem>
	</varlistentry>


	<varlistentry>
	  <term><option>-v, --version</option></term>
	  <listitem><para>Show version information.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>-c <replaceable>file</replaceable>, --config <replaceable>file</replaceable></option></term>
	  <listitem><para>Option file to read.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--show-only</option></term>
	  <listitem><para>Analyze initial values and exit.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--seed <replaceable>seed</replaceable></option></term>
	  <listitem><para>Use the specified seed to initialize the
	      random number generator.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--name <replaceable>string</replaceable></option></term>
	  <listitem><para>Specify the name for the analysis directory.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>-t, --traditional</option></term>
	  <listitem><para>Fix the alignment and don't model indels.</para></listitem>
	</varlistentry>

      </variablelist>
    </section>

    <section><info><title>MCMC options</title></info>
      

      <variablelist>
	<varlistentry>
	  <term><option>-i, --iterations <replaceable>number=100000</replaceable></option></term>
	  <listitem><para>Specify the number of iterations to run.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--pre-burnin <replaceable>iterations=3</replaceable></option></term>
	  <listitem><para>Iterations to refine initial tree.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--subsample <replaceable>factor=1</replaceable></option></term>
	  <listitem><para>Specify a factor by which to subsample.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--enable <replaceable>move</replaceable></option></term>
	  <listitem>
	    <para>Enable a comma-separated list of transition kernels.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--disable <replaceable>move</replaceable></option></term>
	  <listitem>
	    <para>Disable a comma-separated list of transition kernels.</para>
	</listitem></varlistentry>

      </variablelist>
    </section>


    <section><info><title>Parameter options</title></info>
      
      <variablelist>
	<varlistentry>
	  <term><option>--randomize-alignment</option></term>
	  <listitem><para>Randomly re-align sequences before use.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--tree <replaceable>file</replaceable></option></term>
	  <listitem><para>Specify file with initial tree.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--set <replaceable>parameter=value</replaceable></option></term>
	  <listitem><para>Specify initial value of <replaceable>parameter</replaceable>.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--fix <replaceable>parameter[=value]</replaceable></option></term>
	  <listitem><para>Mark <replaceable>parameter</replaceable> fixed, and optionally specify a value.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--unfix <replaceable>parameter[=value]</replaceable></option></term>
	  <listitem><para>Mark <replaceable>parameter</replaceable> not fixed, and optionally specify an initial value.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--frequencies <replaceable>frequencies</replaceable></option></term>
	  <listitem><para>Specify initial frequencies: 'uniform','nucleotides', or a comma-separated list of frequencies.</para></listitem>
	</varlistentry>

      </variablelist>

    </section>

    <section><info><title>Model options</title></info>
      

      <variablelist>
	<varlistentry>
	  <term><option>--alphabet <replaceable>name</replaceable></option></term>
	  <listitem><para>Specify the alphabet: DNA, RNA, Amino-Acids, Amino-Acids+stop, Triplets, Codons, or Codons + stop.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--smodel <replaceable>name</replaceable></option></term>
	  <listitem><para>Specify the substitution model.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--imodel <replaceable>name</replaceable></option></term>
	  <listitem><para>Specify the indel model.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--branch-prior <replaceable>name</replaceable></option></term>
	  <listitem><para>Exponential or Gamma.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--same-scale <replaceable>specification</replaceable></option></term>
	  <listitem><para>Which partitions have the same scale?</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term><option>--align-constraint <replaceable>filename</replaceable></option></term>
	  <listitem><para>File with alignment constraints.</para></listitem>
	</varlistentry>

      </variablelist>

    </section>

    </section>
  </section>

  <section xml:id="input"><info><title>Input</title></info>
    

    <section><info><title>Sequence formats</title></info>
      
      <para><application>BAli-Phy</application> can read in sequences
	and alignments in both FastA and PHYLIP formats.  Filenames for
	FastA files should end in <userinput>.fasta</userinput>,
	<userinput>.mpfa</userinput>, <userinput>.fna</userinput>,
	<userinput>.fas</userinput>, <userinput>.fsa</userinput>, or
	<userinput>.fa</userinput>.  Filenames for PHYLIP files should
	end in <userinput>.phy</userinput>.  If one of these extensions
	is not used, then <application>BAli-Phy</application> will
	attempt to guess which format is being used.
      </para>

    </section>

    <section><info><title>Is my data set too large?</title></info>
      

      <para>Large data sets run more slowly than small data
	sets. We recommend a conservative starting point with few taxa
	and short sequence lengths.  You can then increase the size of
	your data set until a balance between speed and size is
	reached.</para> 

      <para>The number of samples that you need depends on whether you
	are primarily interested in obtaining a point estimate or in
	obtaining detailed measures of confidence and uncertainty.  For
	detailed measures of confidence and uncertainty you should
	obtain a minimum of 10,000 samples after the Markov chain
	converges.  For an estimate, you don't need very many samples
	after convergence.  (But you may need many samples to be sure
	that you've converged!)
      </para>

      <note><info><title>Computing clusters can speed up
      MCMC analysis</title></info>
      <para>
	Running <command>bali-phy</command> on a computing cluster is
	not necessary, but can speed up the analysis dramatically.
	This is because a cluster allows you to run several
	<emphasis>independent</emphasis> MCMC chains in parallel and pool the resulting
      samples.</para> 

	<para>This approach to parallel
	computation is sometimes more efficient than MCMCMC-based
	parallelism involving heated chains.  It is equivalent to
	running MCMCMC with no temperature difference between
	chains, with the exception that it allows results from
	<emphasis>all</emphasis> chains to be used, instead of just
	results from the single "cold" chain.  Thus, if you run 10
	independent chains in parallel, then you may gather
	samples 10 times faster that a single chain.
      </para>
      </note>

      <section><info><title>Too many taxa?</title></info>
	

	<para><application>BAli-Phy</application> is quite CPU
	  intensive, and so we recommend using 50 or fewer taxa in order
	  to limit the time required to accumulate enough MCMC
	  samples. (Despite this recommendation, data sets with more 
	  than 100 taxa have occasionally been known to converge.)
	  We recommend initially pruning as many taxa as possible
	  from your data set, then adding some back if the MCMC is not
	  too slow.</para> 

      </section>

      <section><info><title>Sequences too long?</title></info>
	

	<para>Aligning just a pair of sequences takes $O(L^2)$ time
	  and memory, where $L$ represents the sequence length.  Therefore
	  sequences longer than (say) 1000 letters become increasingly
	  impractical.  However, you might try to see how long you can make your
	  sequences before you run out of memory, or the program
	  becomes too slow.</para>

	<para>For multi-gene analyses, two separate data partitions
	  (i.e. genes) of 500 letters will be twice as fast
	  to align as one data partition of 1000 letters. So, it may be possible
	  to analyze several genes as long as each gene individually
	  is not too long.</para> 

	<para>You can speed up alignment for long genes by specifying
	  alignment constraints (See <xref linkend="align-constraint1"/>).
	  Ideally, 10 evenly spaced constraints should reduce the cost of
	  re-aligning a sequence by a factor of 10.
	</para>

	<para>Also, note that you can sometimes speed up the analysis
	  of protein sequences by coding them as amino acids or codons, rather 
	  than nucleotides. This is because it decreases the sequence
	  length.
	</para> 
      </section>

    </section>

  </section>

  <section xml:id="output"><info><title>Output</title></info>
    

    <section><info><title>Output directory</title></info>
      
      <para><application>BAli-Phy</application> creates a new
	directory to store its output files each time it is run.  By default, the
	directory name is the name of the sequence file, with a number
	added on the end to make it unique. <application>BAli-Phy</application>
	first checks  if there is already a directory called
	<filename><replaceable>file</replaceable>-1/</filename>, and then moves on to
	<filename><replaceable>file</replaceable>-2/</filename>, etc. until it finds an
	unused directory name.</para> 
      
      <para>You can specify a different name to use instead of the
	sequence-file name by using the <userinput>--name</userinput> option.</para>
    </section>

    <section><info><title>Output files</title></info>
      
      <para><application>BAli-Phy</application> writes the following output
	files inside the directory that it creates:</para>
      
      <variablelist>
	<varlistentry>
	  <term>C1.out</term>
	  <listitem>
	    <para>Iteration numbers, probabilities, success probabilities for transition kernels, etc..</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>C1.P<replaceable>p</replaceable>.fastas</term>
	  <listitem>
	    <para>Sampled alignments for partition <replaceable>p</replaceable></para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>C1.err</term>
	  <listitem>
	    <para>Log file for hopefully irrelevant error messages.</para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>C1.MAP</term>
	  <listitem>
	    <para>Successive estimates of the MAP point.</para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>C1.p</term>
	  <listitem>
	    <para>Scalar parameters: indel and substitution parameters, etc.</para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>C1.trees</term>
	  <listitem>
	    <para>Tree samples: one sample per line, in Newick format.</para>
	  </listitem>
	</varlistentry>
	
      </variablelist>
      
      <para>For the last two files, each line in these files corresponds to one iteration.</para>

      <section><title>Field names in <filename>C1.p</filename></title>

      <para>This section explains the meaning of the various field names in the file <filename>C1.p</filename>.</para>

      <section><title>Computed parameter names</title>
      <variablelist>
	<varlistentry>
	  <term>prior</term>
	  <listitem>
	    <para>The log prior probability.  This includes the probability of the alignment, since the alignment is not observed.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>prior_A<replaceable>n</replaceable></term>
	  <listitem>
	    <para>The log of the probability $\Pr(A_n|\tau,T,\Lambda)$ of the alignment $A_n$ of the $n$th partition, given the topology $\tau$, the branch lengths $T$, and insertion-deletion process parameters $\Lambda$.  This log probability is the probabilistic equivalent of a gap penalty on the alignment $A_n$ given the scoring parameters $\Lambda$.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>likelihood</term>
	  <listitem>
	    <para>The log of the likelihood.  Conditional on the alignment, this is determined entirely by the substitution model, and ignores insertions and deletions.  This is the probabilistic equivalent of the mismatch penalty.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>logp</term>
	  <listitem>
	    <para>The log of the probability.  The probability is the product of the prior and the likelihood.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>|A|</term>
	  <listitem>
	    <para>The total number of alignment columns across all partitions.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>#indels<replaceable>n</replaceable></term>
	  <listitem>
	    <para>The number of indel events in partition <replaceable>n</replaceable>, if we group adjacent indels that occur on the same branch.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>#indels</term>
	  <listitem>
	    <para>The total number of indel events across all partitions, if we group adjacent indels that occur on the same branch.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>|indels<replaceable>n</replaceable>|</term>
	  <listitem>
	    <para>The length of indel events in partition <replaceable>n</replaceable>, if we group adjacent indels that occur on the same branch.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>|indels|</term>
	  <listitem>
	    <para>The total length of indel events across all partitions, if we group adjacent indels that occur on the same branch.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>#substs<replaceable>n</replaceable></term>
	  <listitem>
	    <para>The unweighted parsimony score for substitutions in partition <replaceable>n</replaceable>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>#substs</term>
	  <listitem>
	    <para>The total unweighted parsimony score for substitutions across all partitions.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>|T|</term>
	  <listitem>
	    <para>For a single-partition analysis, the sum of branch lengths.  For a multi-partition analysis, a weighted average of this sum across partitions.</para>
	  </listitem>
	</varlistentry>

      </variablelist>
      </section>

      <section><title>Model parameter names</title>

      <para>The prefixes "S<replaceable>n</replaceable>::" and "I<replaceable>n</replaceable>::" will be dropped if not necessary to disambiguate parameters with the same name in different sub-models.</para>

      <variablelist>
	<varlistentry>
	  <term>mu<replaceable>n</replaceable></term>
	  <listitem>
	    <para>The average number of substitutions per branch.  The <replaceable>n</replaceable>th scale parameter ordinarily applies to the <replaceable>n</replaceable>th partition, unless multiple partitions are forced to have the same branch lengths using <userinput>--same-scale</userinput>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>S<replaceable>n</replaceable>::<replaceable>name</replaceable></term>
	  <listitem>
	    <para>Parameter <replaceable>name</replaceable> in the <replaceable>n</replaceable>th substitution model.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>I<replaceable>n</replaceable>::<replaceable>name</replaceable></term>
	  <listitem>
	    <para>Parameter <replaceable>name</replaceable> in the <replaceable>n</replaceable>th insertion/deletion model.</para>
	  </listitem>
	</varlistentry>

      </variablelist>
      </section>
      </section>
    </section>

    <section><info><title>Summarizing the output</title></info>
      

      <para>This section is primarily oriented to extracting estimates from output files.  See <xref linkend="mixing_and_convergence"/> for methods of determine effective sample sizes, and for checking mixing and convergence.</para>

      <section><info><title>Finding the consensus tree (<filename>C1.trees</filename>)</title></info>
	
	<para>
To compute the majority consensus tree, do the following.  (The
program <link xmlns:xlink="http://www.w3.org/1999/xlink"
xlink:href="http://tree.bio.ed.ac.uk/software/figtree/">FigTree</link>
allows you to view the resulting tree file graphically.)
<screen><prompt>%</prompt> trees-consensus C1.trees &gt; <filename>c50.PP.tree</filename></screen>
You can (and should) pool results from different MCMC runs by adding
multiple tree sample files on the command line.  The different MCMC
runs should have the same input files and parameters.
<screen><prompt>%</prompt> trees-consensus <replaceable>dir1</replaceable>/C1.trees <replaceable>dir2</replaceable>/C1.trees &gt; <filename>c50.PP.tree</filename></screen>
By default, the first 10% of tree samples are skipped as burn-in.  You
can specify the number of samples (e.g. 1000) to skip by adding the
options <userinput>-s1000</userinput> or
<userinput>--skip=1000</userinput>.  You may also specify a percentage
of all samples:
<screen><prompt>%</prompt> trees-consensus -s20% C1.trees &gt; <filename>c50.PP.tree</filename></screen>
To discard some samples, keeping (say) every 10th sample, you may add
the options <userinput>-x10</userinput> or
<userinput>--sub-sample=10</userinput>.  This can make the program a
lot faster, at the possible expense of some loss in accuracy.
<screen><prompt>%</prompt> trees-consensus -s20% -x10 C1.trees &gt; <filename>c50.PP.tree</filename></screen>
By default, splits are included in the consensus tree if they have a
PP greater than 0.5.  You can specify a more stringent level
(e.g. 0.66) by adding the option
<userinput>--consensus-PP=0.66</userinput> as follows:
<screen><prompt>%</prompt> trees-consensus -s20% -x10 --consensus-PP=0.66 C1.trees &gt; <filename>c66.PP.tree</filename></screen>
You may also make the program write directly to the output file
(e.g. <filename>c66.PP.tree</filename>) by using the more general form
<userinput>--consensus-PP=0.66:c66.PP.tree</userinput>.  Leaving off 
the "<userinput>:c66.PP.tree</userinput>" part (as we did above) or specifying
"<userinput>:-</userinput>" sends the output to the standard output
(e.g. the terminal, if not redirected). 
<screen><prompt>%</prompt> trees-consensus -s20% -x10 C1.trees --consensus-PP=0.66:<filename>c66.PP.tree</filename></screen>
You can supply multiple levels and filenames separated by commas.
This is faster than running the program multiple times with different
consensus levels.
<screen><prompt>%</prompt> trees-consensus -s20% -x10 C1.trees --consensus-PP=0.5:<filename>c50.PP.tree</filename>,0.66:<filename>c66.PP.tree</filename></screen>
Finally, you may use the option <userinput>--consensus=</userinput>
instead of the option <userinput>--consensus-PP=</userinput> if you do
not wish the resulting tree to contain embedded posterior
probabilities on branches, as well as branch lengths.
<screen><prompt>%</prompt> trees-consensus -s20% -x10 C1.trees --consensus=0.5:<filename>c50.PP.tree</filename>,0.66:<filename>c66.PP.tree</filename></screen>
Both the <userinput>--consensus=</userinput> and 
<userinput>--consensus-PP=</userinput> options may be given simultaneously.
</para>

<para>
  See <userinput>trees-consensus --help</userinput> for a complete list of options.
</para>
      </section>

      <section><info><title>Finding the M.A.P. topology (<filename>C1.trees</filename>)</title></info>
	
	<para>
To compute the <emphasis>maximum a posteriori</emphasis> tree topology do:
<screen><prompt>%</prompt> trees-consensus --skip=<replaceable>burnin</replaceable> C1.trees --map-tree=<filename>MAP.tree</filename></screen>	
The MAP topology may be used instead of a consensus tree when a fully resolved (e.g. bifurcating) tree is required.  However, when the topology has many tips, each topology may be sampled only once, leading to low quality estimates of the MAP topology.
</para>
<para>The program <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://tree.bio.ed.ac.uk/software/figtree/">FigTree</link> allows you to view the consensus tree graphically.
</para>
      </section>

      <section><info><title>Checking topology convergence (<filename>C1.trees</filename>)</title></info>
	
<para>
<screen><prompt>%</prompt> trees-bootstrap <replaceable>dir1</replaceable>/C1.trees <replaceable>dir2</replaceable>/C1.trees</screen>	
This command computes the effective sample size for the posterior probability of each split.  It also computes the Average Standard Deviation of Split Frequencies (ASDSF) between two or more independent runs.</para>

<para>See <xref linkend="mixing_and_convergence"/> for more information.
</para>  
      </section>

      <section><info><title>Summarizing numerical parameters (<filename>C1.p</filename>)</title></info>
	
<para>
This command gives a median and confidence interval, ESS, and a stabilization time:
<screen><prompt>%</prompt> statreport C1.p &gt; Report </screen>	
This command compares multiple runs to give PSRF and joint ESS values as well:
<screen><prompt>%</prompt> statreport C1.p C2.p &gt; Report </screen>	
The program <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://tree.bio.ed.ac.uk/software/tracer/">Tracer</link> allows you to view the same summaries graphically.</para>

<para>See <xref linkend="mixing_and_convergence"/> for more information.
</para>
      </section>

      <section><info><title>Computing an alignment using Posterior Decoding (<filename>C1.P<replaceable>p</replaceable>.fastas</filename>)</title></info>
	
<para>
<screen><prompt>%</prompt> cut-range --skip=<replaceable>burn-in</replaceable> &lt; C1.P<replaceable>p</replaceable>.fastas | alignment-max &gt; P<replaceable>p</replaceable>-max.fasta</screen>
You can use the program <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://pbil.univ-lyon1.fr/software/seaview.html">seaview</link> to view the alignment graphically.
</para>
      </section>      

      <section><info><title>Find the alignment from the maximum a posterior (MAP) point (<filename>C1.MAP</filename>)</title></info>
	
<screen><prompt>%</prompt> alignment-find &lt; C1.MAP &gt; P1-MAP.fasta</screen>

      </section>      

      <section><info><title>Create an Au (Alignment Uncertainty) plot (<filename>C1.P<replaceable>p</replaceable>.fastas</filename>)</title></info>
	
<para>To annotate a specific alignment <replaceable>alignment</replaceable>.fasta, choose a fully resolved tree estimate <replaceable>tree</replaceable>:
<screen><prompt>%</prompt> cut-range --skip=<replaceable>burn-in</replaceable> &lt; C1.P<replaceable>p</replaceable>.fastas | alignment-gild <replaceable>alignment</replaceable>.fasta <replaceable>tree</replaceable>  &gt; <replaceable>alignment</replaceable>-AU.prob
<prompt>%</prompt> alignment-draw <replaceable>alignment</replaceable>.fasta --AU <replaceable>alignment</replaceable>-AU.prob &gt; <replaceable>alignment</replaceable>-AU.html</screen>
The majority consensus tree is usually not fully resolved, so we recommend using the MAP topology instead.
</para>
      </section>


    </section>


  <section xml:id="analysis"><info><title>Summarizing the output - scripted</title></info>
    
    
    <para>
      Instead of manually running each of the steps to analyze the
      output files, you may instead run the PERL script
      <command>bp-analyze.pl</command> to execute these commands.  You
      may run it inside the output directory, like this:
<screen><prompt>%</prompt> bp-analyze.pl --burnin=<replaceable>iterations</replaceable></screen>
      The script will create an HTML
      page <filename>Results/index.html</filename> that summarizes the
      posterior distribution.
    </para>
    <para>
      You may also run it with one or more output directories as
      arguments, like this:
<screen><prompt>%</prompt> bp-analyze.pl --burnin=<replaceable>iterations</replaceable> <replaceable>directory</replaceable>-1/ <replaceable>directory</replaceable>-2/</screen>
      In this case, output from multiple runs will be used to assess convergence and mixing, as well as to increase the precision of the estimates.
    </para>

    <section><info><title>Meaning of generated files</title></info>
      
    <para>The <filename>Results/</filename> directory will contain
    the following useful files:</para>

      <variablelist>

	<varlistentry><term>Report</term><listitem>
	    <para>A summary of numerical parameters: credible
	    intervals and mixing.</para>
	</listitem></varlistentry>

	<varlistentry><term>consensus</term><listitem>
	    <para>A summary of supported splits (clades). </para>
	</listitem></varlistentry>

	<varlistentry><term>c-levels.plot</term><listitem>
	    <para>The number of splits (clades) supported at each LOD level.</para>
	</listitem></varlistentry>

	<varlistentry><term>c50.tree</term><listitem>	<para>The majority consensus topology + branch lengths (Newick format)</para> 
	</listitem></varlistentry>

	<varlistentry><term>c50.PP.tree</term><listitem>
	<para>The majority consensus topology + branch lengths +
	Posterior Probabilities (Newick format)</para> 
	</listitem></varlistentry>

	<varlistentry><term>MAP.tree</term><listitem>
	    <para>An estimate of the MAP topology + branch lengths (Newick format)</para>
	</listitem></varlistentry>

      </variablelist>
      <para> 
	The following files will be generated to summarize alignment uncertainty, unless the analysis uses a fixed alignment.

      </para>

      <variablelist>
	<varlistentry><term>MAP.fasta</term><listitem>
	    <para>An estimate of the MAP alignment.
	</para></listitem></varlistentry>

	<varlistentry><term>P<replaceable>p</replaceable>-max.fasta</term><listitem>
	    <para>An estimate of the alignment for partition
	    <replaceable>p</replaceable> using maximum posterior decoding.</para>
	</listitem></varlistentry>

	<varlistentry><term>MAP-AU.html</term><listitem><para>An AU plot of the MAP alignment (AA/DNA color-cheme).
	</para></listitem></varlistentry>
	
	<varlistentry><term>P<replaceable>p</replaceable>-max-AU.html</term><listitem>
	    <para>An AU plot of the maximum posterior decoding alignment for partition
	    <replaceable>p</replaceable>  (AA/DNA color-cheme).</para>
	</listitem></varlistentry>

	<!-- varlistentry><term>consensus.fasta</term><listitem>
	    <para>A consensus alignment, representing information shared by most alignment samples.
	</para></listitem></varlistentry>

	<varlistentry><term>consensus-AU.html</term><listitem><para>An AU plot of the consensus alignment (rainbow color-scheme).
	</para></listitem></varlistentry>

	<varlistentry><term>consensus-AU2.html</term><listitem><para>An AU plot of the MAP alignment (AA/DNA color-scheme).
	</para></listitem></varlistentry>

	<varlistentry><term>consensus-AU.prob</term><listitem><para>The probabilities for each letter in the consensus alignment AU plot.
	</para></listitem></varlistentry -->
	
      </variablelist>


      <para>The following files describe convergence and mixing:</para>


      <variablelist>

	<varlistentry><term>partitions.bs</term><listitem>
	    <para>Confidence intervals on the support for partitions, generated
	      using a block bootstrap.</para>
	</listitem></varlistentry>

	<varlistentry><term>partitions.SRQ</term><listitem><para>A collection of
	      SRQ plots for the supported partitions.
	</para></listitem></varlistentry>

	<varlistentry><term>c50.SRQ</term><listitem><para>An
	      SRQ plot for the majority consensus tree.
	</para></listitem></varlistentry>


      </variablelist>

      <para>The SRQ plots can be viewed by typing "<userinput>plot
	  '<replaceable>file</replaceable>' with lines</userinput>" in
	<application>gnuplot</application>.</para>

    </section>
      <section><info><title><filename>Mixing/partitions.bs</filename>: partition mixing</title></info>
	
	<para>
	  This file reports the quality of estimates of support for each
	  partition in terms of the posterior probability (PP) and
	  log-10 odds (LOD).  It also reports the auto-correlation time (ACT),
	  the effective sample size (Ne), the number of samples
	  that support (1) or do not support (0) the partition, and
	  the number of regenerations. 

	  Only partitions with PP &gt; 0.1 are shown by default.
	</para>
      </section>



  </section>
  </section>
  <section xml:id="models"><info><title>Models</title></info>
    

    <section xml:id="subst_basic"><info><title>Substitution models</title></info>
      

       <para>Substitution models in
       <application>BAli-Phy</application> are specified using a
       stack, as follows: <userinput>Model[arg]+Model[arg]+...+Model[arg]</userinput>
        where each model uses the previous models as input.  For
	example, <userinput>WAG+gamma[4]+INV</userinput>. Arguments
	are optional.</para>

	<note>
	  <para>
	    If you are using the C-shell command line shell (<command>csh</command> or <command>tcsh</command>), then it will try to interpret each argument as an array reference, giving the error message "bali-phy: Not found."  To avoid this you may need to insert backslashes before the left square brackes, like this: <userinput>Model&#92;[arg]+Model&#92;[arg]+...+Model&#92;[arg]</userinput>.
	  </para>
	</note>

      <section><info><title>Default substitution models</title></info>
	
	<para>If the substitution model is not specified, then the
	  default model for the alphabet is used.  For DNA or RNA, the
	  default model is TN.  For Triplets, the default is TNx3. For
          Codons, the default model is M0.  For Amino-Acids, the
	  default model is LG. 
	</para>
      </section>


      <section><info><title>Basic CTMC models</title></info>
	
	<para>The basic substitution models in
	  <application>BAli-Phy</application> are continuous-time Markov
	  chains (CTMC). 
	  CTMC models can be characterized 
	  by transition rates $Q_{ij}$ from letter $i$ to letter $j$.
	  After a given time $t$ the probability for transition from state
	  $i$ to state $j$ is given by \[P(t)_{ij}=e^{Q_{ij} \times t}\]
	  using a matrix exponential.  Becase the CTMC models used in
	  <application>BAli-Phy</application> are all reversible, the rate
	  matrix for these reversible models can be decomposed into a
	  symmetric matrix $S$ and equilibrium frequencies $\pi$ as
	  follows:  \[Q_{ij} = S_{ij}\times\pi_j\]
	  The matrix $S$ is called the exchangability matrix, and
	  represents how exchangeable letters $i$ and $j$ are,
	  independent of their frequencies.
	</para>
	
	<para>The basic CTMC models are EQU, HKY, TN, GTR, HKYx3,
	TNx3, GTRx3,  JTT, WAG, LG, and M0.  Each of these models is a
	way of specifying the exchangeability matrix $S_{ij}$.</para>

	<table frame="none" rowsep="1"><info><title>Substitution Models</title></info>
	  
	  <tgroup cols="4">
	    <colspec colnum="1" colname="col1" colwidth="1*"/>
	    <colspec colnum="2" colname="col2" colwidth="1*"/>
	    <colspec colnum="3" colname="col3" colwidth="1*"/>
	    <colspec colnum="4" colname="col4" colwidth="1*"/>
	    <thead><row>
		<entry>Model</entry>
		<entry>Alphabet</entry>
		<entry>Parameters</entry>
		<entry>Description</entry>
	    </row></thead>

	    <tbody>
	      <row>
		<entry><userinput>EQU</userinput></entry>
		<entry>any</entry>
		<entry>none</entry>
		<entry>$S_{ij} = 1$ for every $i$ and $j$.</entry>
	      </row>

	      <row>
		<entry>
		  <para><userinput>HKY</userinput></para>
		  <para>Hasegawa, Kishino, Yano (1985)</para>
		</entry>
		<entry>DNA or RNA</entry>
		<entry>$\kappa$: the ts/tv ratio.</entry>
		<entry>
		  <para>$S_{ij} = 1$ for transversions.</para>
		  <para>$S_{ij} = \kappa$ for transitions.</para>
		</entry>
	      </row>

	      <row>
		<entry><para><userinput>TN</userinput></para><para>Tamura, Nei (1993)</para></entry>
		<entry>DNA or RNA</entry>
		<entry>
		  <para>$\kappa_1$: the purine ts/tv ratio.</para>
		  <para>$\kappa_2$: the pyrimidine ts/tv ratio.</para>
		</entry>
		<entry>
		  <para>$S_{ij} = 1$ for transversions.</para>
		  <para>$S_{ij} = \kappa_1$ for purine transitions.</para>
		  <para>$S_{ij} = \kappa_2$ for pyrimidine transitions.</para>
		</entry>
	      </row>

	      <row>
		<entry><para><userinput>GTR</userinput></para><para>General Time-Reversible</para><para>Tavare (1986)</para></entry>
		<entry>DNA or RNA</entry>
		<entry>
		  <para>$S_{i \ne j}$</para>
		</entry>
		<entry>
		  <para>$\sum_{i \ne j}S_{ij}=1$.</para><para>(5 degrees of freedom).</para>

		</entry>
	      </row>

	      <row>
		<entry>
		  <para><userinput>JTT</userinput></para>
		  <para>Jones, Taylor, Thornton (1992)</para>
		</entry>
		<entry>Amino-Acids</entry>
		<entry>
		  <para>none.</para>
		</entry>
		<entry/>
	      </row>

	      <row>
		<entry>
		  <para><userinput>WAG</userinput></para>
		  <para>Whelan and Goldman (2001)</para>
		</entry>
		<entry>Amino-Acids</entry>
		<entry>
		  <para>none.</para>
		</entry>
		<entry/>
	      </row>

	      <row>
		<entry>
		  <para><userinput>LG</userinput></para>
		  <para>Le and Gascuel (2008)</para>
		</entry>
		<entry>Amino-Acids</entry>
		<entry>
		  <para>none.</para>
		</entry>
		<entry/>
	      </row>

	      <row>
		<entry>
		  <para><userinput>Empirical[<replaceable>file</replaceable>]</userinput></para>
		</entry>
		<entry>Amino-Acids</entry>
		<entry>
		  <para>none.</para>
		</entry>
		<entry>
		  <para>A user-specified empirical exchangeability matrix may be used.</para>
		  <para>The lower-triangular part of the symmetric
		  matrix is given, followed by the estimated
		  equilibrium frequencies.</para>
		</entry>
	      </row>

	      <row>
		<entry>
		  <para><userinput>HKYx3</userinput></para>
		  <para><userinput>TNx3</userinput></para>
		  <para><userinput>GTRx3</userinput></para>
		</entry>
		<entry>Triplets</entry>
		<entry>
		  <para><replaceable>nuc-model</replaceable> parameters.</para>
		</entry>
		<entry>
		  <para>If the nuc-model has transition matrix
		    $S^\prime_{ij}$ on nucleotides, then:</para>

		  <para>$S_{\alpha\beta} = 0$ for changes of more than one nucleotide.</para>
		  <para>$S_{\alpha\beta} = S^\prime_{ij}$ for single nucleotide  changes $i \to j$.</para>
		</entry> 
	      </row>

	      <row>
		<entry>
		  <para><userinput>M0</userinput></para>
		  <para>Nielsen and Yang (1998)</para>
		</entry>
		<entry>Codons</entry>
		<entry>
		  <para>$\kappa$: the ts/tv ratio.</para>
		  <para>$\omega$: the dN/dS ratio.</para>
		</entry>
		<entry>
		  <para>$S_{\alpha\beta} = 0$ for changes of more than one nucleotide.</para>
		  <para>$S_{\alpha\beta} = 1$ for synonymous transversions.</para>
		  <para>$S_{\alpha\beta} = \omega$ for non-synonymous transversions.</para>

		  <para>$S_{\alpha\beta} = \kappa$ for synonymous transitions.</para>
		  <para>$S_{\alpha\beta} = \omega\kappa$ for non-synonymous transitions.</para>
		</entry> 
	      </row>

	      <row>
		<entry>
		  <para><userinput>M0[<replaceable>nuc-model=HKY</replaceable>]</userinput></para>
		  <para>Nielsen and Yang (1998)</para>
		</entry>
		<entry>Codons</entry>
		<entry>
		  <para><replaceable>nuc-model</replaceable> parameters.</para>
		  <para>$\omega$: the dn/ds ratio</para>
		</entry>
		<entry>
		  <para>If the nuc-model has transition matrix
		    $S^\prime_{ij}$ on nucleotides, then:</para>

		  <para>$S_{\alpha\beta} = 0$ for changes of more than one nucleotide.</para>
		  <para>$S_{\alpha\beta} = S^\prime_{ij}$ for synonymous changes.</para>
		  <para>$S_{\alpha\beta} = \omega S^\prime_{ij}$ for non-synonymous changes.</para>
		</entry> 
	      </row>
	    </tbody>
	  </tgroup>
	</table>

      </section>

    <section xml:id="subst_freq"><info><title>Substitution Frequency models</title></info>
      
      <para>The rate matrix $Q_{ij}$ can be more generally expressed as
	\[Q_{ij} = S_{ij}\times\frac{\pi_j^f}{\pi_i^{1-f}},\]
        where $f$ ranges from $0$ to $1$.
	Here the parameter $f$ specifies the relative importance of
	unequal conservation ($f=0$) and unequal replacement ($f=1$) in
	maintaining the equilibrium frequencies $\pi$.  
      </para>
      <para>
	In fact, this can be generalized even further to \[ Q_{ij} =
	S_{ij}\times R(\pi)_{ij} \] where \[ \pi_i \times R_{ij} =
	\pi_j \times R_{ji}. \]
      </para>
      <para>These models can therefore be expressed as a combination
	of an "exchange model" (for $S$) and a "frequency model" (for
	$R$).
      </para>

      <table frame="none" rowsep="1"><info><title>Frequency Models</title></info>
	
	<tgroup cols="4">
	  <colspec colnum="1" colname="col1" colwidth="1*"/>
	  <colspec colnum="2" colname="col2" colwidth="1*"/>
	  <colspec colnum="3" colname="col3" colwidth="1*"/>
	  <colspec colnum="4" colname="col4" colwidth="1*"/>
	  <thead><row>
	      <entry>Model</entry>
	      <entry>Alphabet</entry>
	      <entry>Parameters</entry>
	      <entry>Description</entry>
	  </row></thead>

	  <tbody>
	    <row>
	      <entry>
		<para><userinput>F</userinput></para>
		<para>Simple frequency model</para>
	      </entry>
	      <entry>any</entry>
	      <entry>
		<para>$f$ (1)</para>
		<para>$\pi$ ($|\alpha|$) </para>
	      </entry>
	      <entry>$R_{ij} = \frac{\pi_j^f}{\pi_i^{1-f}}$.</entry>
	    </row>
	    <row>
	      <entry>
		<para><userinput>F=nucleotides</userinput></para>
		<para>Independent nucleotide frequency model</para>
	      </entry>
	      <entry>Triplets</entry>
	      <entry>
		<para>$f$ (1)</para>
		<para>$\pi_N$ (4) </para>
	      </entry>
	      <entry>
		<para>$\pi_\alpha = \pi_i \pi_j \pi_k$</para>
		<para>$R_{\alpha\beta} = \frac{\pi_\beta^f}{\pi_\alpha^{1-f}}$.</para>
	      </entry>
	    </row>
	    <!-- row>
	    <entry><userinput>pi=triplets</userinput></entry>
	    <entry>Triplets</entry>
	    <entry>
	      <para>$f$ (1)</para>
	      <para>$g$ (1)</para>
	      <para>$\pi$ (4) </para>
	      <para>$\nu$ ($|\alpha|$) </para>
	    </entry>
	    <entry>$R_{\alpha\beta} = \frac{{(\pi_i \pi_j
	      \pi_l)}^f}{{(\pi_i \pi_j \pi_k)}^{1-f}} \times \frac{\nu_\beta}{\nu_\alpha}$.</entry>
	    </row -->
	    <row>
	      <entry>
		<para><userinput>F=amino-acids</userinput></para>
		<para>Amino-acid based codon frequencies. (no codon bias)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<para>$f$ (1)</para>
		<para>$\pi_{AA}$ (20)</para>
	      </entry>
	      <entry>$R_{ij} = \frac{\pi_j^f}{\pi_i^{1-f}}$.</entry>
	    </row>
	    <!-- row>
	    <entry><userinput>pi=codons</userinput></entry>
	    <entry>Codons</entry>
	    <entry>$f$</entry>
	    <entry>$R_{ij} = \frac{\pi_j^f}{\pi_i^{1-f}}$.</entry>
	    </row -->
	  </tbody>
	</tgroup>
      </table>
    </section>


    <section xml:id="subst_mixture"><info><title>Substitution Mixture Models</title></info>
    
    <para>
      Complex substitution models in <application>BAli-Phy</application>
      are constructed as mixtures of reversible CTMC models (see <xref linkend="subst_basic"/>) that run at different rates (e.g. $\Gamma_4+INV$)
      or have different parameters (e.g. an M2 codon model).
    </para>

      <para>Model modifiers are gamma, log-normal, INV, M2, M3, and M7.</para>


      <table frame="none" rowsep="1"><info><title>CTMC Mixture Models</title></info>
	
	<tgroup cols="4">
	  <thead><row>
	      <entry>Model</entry>
	      <entry>Alphabet</entry>
	      <entry>Parameters</entry>
	      <entry>Description</entry>
	  </row></thead>
	  <tbody>
	    <row>
	      <entry>
		<para><userinput><replaceable>sm</replaceable> + INV</userinput></para>
	      </entry>
	      <entry><replaceable>sm</replaceable> alphabet</entry>
	      <entry>
		<para>$p$: invariant fraction.</para>
	      </entry>
	      <entry>
		<para>A fraction $p$ of sites do not allow substitutions.</para>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput><replaceable>sm</replaceable> + gamma[$n$]</userinput></para>
		<para>Yang (1994)</para>
	      </entry>
	      <entry><replaceable>sm</replaceable> alphabet</entry>
	      <entry>
		<para>$\sigma/\mu$: noise to signal ratio for $\Gamma$.</para>
	      </entry>
	      <entry>
		<para>rate $\sim \Gamma(\mu=1,\sigma)$.</para>
		<para>A discrete approximation to the $\Gamma$ with $n$
     	          bins is used.</para>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput><replaceable>sm</replaceable> + log-normal[$n$]</userinput></para>
	      </entry>
	      <entry><replaceable>sm</replaceable> alphabet</entry>
	      <entry>
		<para>$\sigma/\mu$: noise to signal ratio for $\log Normal$.</para>
	      </entry>
	      <entry>
		<para>rate $\sim \log Normal(\mu=1,\sigma)$.</para>
		<para>A discrete approximation to the $log Normal$ with $n$
     	          bins is used.</para>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>M2</userinput></para>
		<para><userinput><replaceable>sm</replaceable> + M2</userinput></para>
		<para>Yang, et. al. (2000)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<para>$\kappa$: the ts/tv ratio</para>
		<para>$p_1, p_2, p_3$: bin frequencies.</para>
		<para>$\omega_3$: value of $\omega$ in bin 2.</para>
	      </entry>
	      <entry>
		<para>$\Omega=\omega_i$ with probability $p_i$.</para>
		<para>$\omega_1 = 0$, $\omega_2 = 1$.</para>
		<para>The default for <replaceable>sm</replaceable> is M0.</para>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>M3[$n$]</userinput></para>
		<para><userinput><replaceable>sm</replaceable> + M3[$n$]</userinput></para>
		<para>Yang, et. al. (2000)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<para>$\kappa$: the ts/tv ratio</para>
		<para>$p_1, \ldots, p_n$: bin frequencies.</para>
		<para>$\omega_1, \ldots, \omega_n$: values of $\omega$.</para>
	      </entry>
	      <entry>
		<para>$\Omega=\omega_i$ with probability $p_i$.</para>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>M7[$n$]</userinput></para>
		<para><userinput><replaceable>sm</replaceable> + M7[$n$]</userinput></para>
		<para>Yang, et. al. (2000)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<para>$\mu$: mean of the Beta distribution.</para>
		<para>$\sigma/\mu$: noise to signal ratio for Beta.</para>
	      </entry>
	      <entry>
		<para>$\Omega \sim Beta(\mu,\sigma)$.</para>
		<para>A discrete approximation to the Beta with $n$
     	          bins is used.</para>
	      </entry>
	    </row>

	  </tbody>

	</tgroup>
      </table>
    </section>

    <section><info><title>Substitution model examples</title></info>
      
      <para>Example: --smodel WAG+F+log-normal+INV</para>
      <para>Example: --smodel WAG+log-normal+INV (same as above)</para>
      <para>Example: --smodel EQU --alphabet Triplets</para>
      <para>Example: --smodel HKY</para>
      <para>Example: --smodel TN+F=constant</para>
      <para>Example: --smodel M0 --alphabet Codons</para>
      <para>Example: --smodel M0+F=nucleotides --alphabet Codons</para>
      <para>Example: --smodel M2 --alphabet Codons</para>
      <para>Example: --smodel M0[HKY]+M2 --alphabet Codons (same as above)</para>
      <para>Example: --smodel M0[TN]+M2 --alphabet Codons</para>
    </section>
  </section>

    <section><info><title>Insertion/deletion models</title></info>
      
      <para>The current models are RS05, RS07, and <userinput>none</userinput>.  The default is RS07.  Each of these models is a probability distribution on pairwise alignments.  The probability distribution on multiple sequence alignments $\Pr(A|T,\tau,\Lambda)$ is constructed by factoring the multiple sequence alignment into pairwise alignments along each branch of the tree, as described in Redelings and Suchard (2005).</para>

<table frame="none" rowsep="1"><info><title>Substitution Models</title></info>
	  
	  <tgroup cols="3">
	    <colspec colnum="1" colname="col1" colwidth="1*"/>
	    <colspec colnum="2" colname="col2" colwidth="1*"/>
	    <colspec colnum="3" colname="col3" colwidth="1*"/>
	    <thead><row>
		<entry>Model</entry>
		<entry>Parameters</entry>
		<entry>Description</entry>
	    </row></thead>
	    <tbody>	    
	      <row>
		<entry>
		  <para><userinput>RS05</userinput></para>
		  <para>Redelings and Suchard (2005)</para>
		</entry>
		<entry>
		  <para>$\delta$: the gap-opening probability</para>
		  <para>$\epsilon$: the gap-extension probability</para>
		</entry>
		<entry>
		  <para>Gap lengths are geometrically distributed with extension probability $\epsilon$.</para>
		  <para>This indel model is independent of the branch length connecting the ancestor and descent sequences.</para>
		</entry>
	      </row>
	      
	      <row>
		<entry>
		  <para><userinput>RS07</userinput></para>
		  <para>Redelings and Suchard (2007)</para>
		</entry>
		<entry>
		  <para>$\lambda$: the insertion and deletion rate</para>
		  <para>$\epsilon$: the gap-extension probability</para>
		</entry>
		<entry>
		  <para>Gap lengths are geometrically distributed with extension probability $\epsilon$.</para>
		  <para>This probability of an indel event depends on the branch length in this model.</para>
		</entry>
	      </row>
	      
	      <row>
		<entry>
		  <para><userinput>none</userinput></para>
		</entry>
		<entry/>
		<entry>	Indicates the lack of a model.</entry>
	      </row>
	      
	    </tbody>
	  </tgroup>
	</table>
	    

      <para>Specifying an indel model of <userinput>none</userinput> for a given partition results in fixing the alignment for that partition to its initial value, and ignoring information in shared insertions or deletions.</para>
    </section>

    <section xml:id="genetic-codes"><info><title>Genetic Codes</title></info>
      
      <para>When using a codon-based substitution model like <userinput>M0</userinput>, you may select the genetic code by specifying <userinput>--alphabet Codons[<replaceable>genetic-code</replaceable>]</userinput>.  Available genetic codes are <userinput>standard</userinput>, <userinput>mt-vert</userinput>, <userinput>mt-invert</userinput>, <userinput>mt-yeast</userinput>, <userinput>mt-protozoan</userinput>.</para>
<para>If the genetic code is not specified, then the standard code is used:
	<screen><prompt>%</prompt> bali-phy <replaceable>sequence-file</replaceable> --smodel M0 --alphabet Codons</screen>
	This example specifies the vertebrate mitochondrial code:
	<screen><prompt>%</prompt> bali-phy <replaceable>sequence-file</replaceable> --smodel M0 --alphabet Codons[mt-vert]</screen>
</para>
    </section>

    <section xml:id="align-constraint1"><info><title>Alignment constraints</title></info>
      
      <para>To fix specific columns of the alignment, you may specify alignment
	constraints in a file as follows: </para>

      <orderedlist inheritnum="ignore" continuation="restarts">
	<listitem><para>Use the argument
	    <userinput>--align-constraint <replaceable>filename</replaceable></userinput></para></listitem> 

	<listitem><para>The filename refers to a file in which each
	    line represents a constraint.</para></listitem> 

      </orderedlist>

      <section><info><title>Syntax</title></info>
	
	<para>The first line of the file is a header consisting of an
	  ordered list of sequence names separated by spaces. Each subsequent line
	  consists of a space-separated list of sequence positions, with the first position
	  corresponding to the first leaf sequence, the second position
	  corresponding to the second leaf sequence, etc. Thus, if there are
	  <replaceable>n</replaceable> leaf taxa, then each line corresponds to a
	  space-separated list of <replaceable>n</replaceable> integers.</para>
      </section>
      <section><info><title>Examples</title></info>
	
	<para>For example, the file</para>

	<programlisting>A B C
1 2 2</programlisting>

	<para>implies that position 1 of leaf sequence A is aligned to
	  position 2 of leaf sequences B and C. Note that the first
	  position in a sequence is position 0.</para> 

	<para>Optionally, one may use a '-' instead of an integer, which
	  denotes a lack of constraint for that sequence. This can be
	  useful as follows:</para> 

	<programlisting>A B C D
2 2 - - 
- - 2 2
	</programlisting>

	<para>The above constraints force alignment between position 2
	  of sequences A and B, and between position 2 of sequence C and
	  D.</para>
      </section>

      <section><info><title>Computing the constraints</title></info>
	
	<para>
	  The program <command>alignment-indices</command> may be used
	  to aid in computing a constraint file from an input
	  alignment.  See <xref linkend="generating_constraint_files"/>.
	</para>
      </section>
    </section>

  </section>

  <section xml:id="mixing_and_convergence"><info><title>Convergence and Mixing: Is it done yet?</title></info>
    

    <para>
      When using Markov chain Monte Carlo (MCMC) programs like
      <application>MrBayes</application>, <application>BEAST</application> or
      <application>BAli-Phy</application>, it is hard to determine in
      advance how many iterations are required to give a good
      estimate. The number depends on the specific data set that is
      being examined. As a result, <application>BAli-Phy</application>
      relies on the user to analyze the data in a running chain
      periodically in order to determine when enough samples have been
      obtained.  This section describes a number of techniques to
      diagnose when more samples must be taken.
    </para>

    <para>Some of the better diagnostics for lack of convergence rely on running at least 4 independent copies of the Markov chain (preferably 10) from different random starting points to see if the sampled posterior distributions for each chain are the same.  Unfortunately, when the distributions all seem to be this same, this doesn't <emphasis>prove</emphasis> that they have all converged to the equilibrium distribution.  However, if the distributions are different then you can reject either convergence or good mixing.</para>

    <section><info><title>Definition of Convergence</title></info>
      

      <para>Convergence refers to the the tendency of a Markov chain to
	to "forget" its starting value and become typical of its
	equilibrium distribution. Note that convergence is a property
	of the Markov chain itself, not of individual runs of the
	Markov chain.  Ideally a number of individual runs should be
	examined in order to determine how many initial iterations to
	discard as "burnin".
      </para>
    </section>
    
    <section><info><title>Definition of Mixing</title></info>
      
      <para>
	In MCMC, each sample is not fully independent of previous
	samples.  In fact, even after a Markov chain has converged,
	it can get "stuck" in one part of the parameter space for a
	long time, before jumping to an equally important part.  When
	this happens, each new sample contributes very little new
	information, and we need to obtain many more samples to get
	good precision on our parameter estimates.  In such a case, we say 
	that the chain isn't "mixing" well. 
      </para>
    </section>

    <section><info><title>Diagnostics and multiple independent chains</title></info>
      
    <para>
      Many of the following diagnostic measures require that you run the MCMC a number of
      different times.  In the text that follows, we refer to the
      different parameter files
      as <filename>C1.p</filename>, <filename>C2.p</filename>, 
      ..., <filename>C<replaceable>n</replaceable>.p</filename> and the
      different tree samples as <filename>C1.trees</filename>, <filename>C2.trees</filename>,
      ..., <filename>C<replaceable>n</replaceable>.trees</filename>.
      Substitute the actual names of the files.
    </para>
    </section>

    
    <section><info><title>Diagnostics: Variation in split frequencies across runs</title></info>
      
      <section><info><title>ASDSF and MSDSF</title></info>
	
<para>
To calculate the ASDSF and MSDSF run:
<screen><prompt>%</prompt> trees-bootstrap C1.trees C2.trees ... C<replaceable>n</replaceable>.trees &gt; partitions.bs</screen>	
For each split, the SDSF value is just the standard deviation across
runs of the Posterior Probabilities for that split.  By averaging the
resulting SDSF values across splits, we may obtain the ASDSF value
(Huelsenbeck and Ronquist 2001).  This is commonly considered
acceptable if it is &lt; 0.01.
</para>

<para>However, it is also useful to consider the maximum of the SDSF
  values (MSDSF).  This represents the range of variation in PP across
  the runs for the split with the most variation.
</para>
      </section>
      <section><info><title>Split-frequency comparison plot</title></info>
	
	<para>To generate the split-frequency comparison plot, you must have R installed.  Locate the script <filename>compare-runs.R</filename>.  Then run:
<screen><prompt>%</prompt> trees-bootstrap C1.trees C2.trees ... C<replaceable>n</replaceable>.trees --LOD-table=LOD-table &gt; partitions.bs 
<prompt>%</prompt> R --slave --vanilla --args LOD-table compare-SF.pdf &lt; compare-runs.R</screen>
	  Following <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://dx.doi.org/10.1080/10635150600812544">Beiko et al (2006)</link>, this displays the variation in
	  estimates of split frequencies across runs.  Splits are
	  arranged on the x-axis in increasing order of 
	  Posterior Probability (PP), which is obtained by averaging over
	  runs.  We then plot a vertical bar from the minimum PP to the
	  maximum PP.
	</para>
	</section>
    </section>


    <section><info><title>Diagnostics: Potential Scale Reduction Factors (PSRF)</title></info>
      
<para>
Potential Scale Redution Factors check that different runs have
similar posterior distributions.  Only numerical variables may have a
PSRF. To calculate the PSRF for each
numerical parameter, you may run: 

<screen><prompt>%</prompt> statreport C1.p C2.p ... C<replaceable>n</replaceable>.p &gt; Report </screen>
The PSRF is a ratio of the width of the pooled distribution to the
average width of each distribution, and should ideally be 1.  The PSRF
is customarily considered to be small enough if it is less than 1.01.
</para>

<para>
We compare the PSRF based on the length of 80% credible intervals
(Brooks and Gelman 1998) and report the result as PSRF-80%CI.  For
integer-valued parameters, we avoid excessively large PSRF values by
subtracting 1 from the width of the pooled CI.
</para>

<para>
We also report a new PSRF that is more sensitive for integer
distributions.  For each individual distribution, we find the 80%
credible interval.  We divide the probability of that interval (which
may be more than 80%) by the probability of the same interval under the
pooled distribution.  The average of this measure over all
distributions gives us a PSRF that we report as PSRF-RCF.
</para>

<para>This convergence diagnostic gives a criterion for
detecting when a parameter value has stabilized at different
values in several independent runs, indicating a lack of
convergence. This situation might occur if different runs of
the Markov chain were trapped in different modes and failed to
adequately mix between modes.</para>
    </section>

    <section><info><title>Diagnostics: Effective sample sizes (ESS)</title></info>
      
      <section><info><title>ESS for numerical values</title></info>
	
      <para>To calculate the split ESS values, run:
<screen><prompt>%</prompt> statreport C1.p C2.p ... C<replaceable>n</replaceable>.p &gt; Report </screen>
      We calculate effective sample sizes based on integrated
      autocorrelation times.  This method has the nice property that
      simply duplicating every sample does not increase the ESS.
      </para>

      <para>The
      program <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://evolve.zoo.ox.ac.uk/software/tracer/">Tracer</link>
      also computes ESS values.</para>
      </section>

      <section><info><title>ESS for split frequencies</title></info>
	
      <para>To calculate the split ESS values, run:
<screen><prompt>%</prompt> trees-bootstrap C1.trees C2.trees ... C<replaceable>n</replaceable>.trees &gt; partitions.bs</screen>
      To compute the ESS for a split, we consider the presence or absence
      of a split in each iteration as a series of binary values.  We
      compute the integrated autocorrelation time for this binary
      sequence, which leads to an ESS.  This approach is similar to
      dividing the iterations into blocks and computing the ESS on the
      PP estimates in the blocks.  It is also similar to estimating
      the variance reduction under a block bootstrap.
      </para>
    </section>
</section>

    <section><info><title>Diagnostics: Stabilization</title></info>
      
      <section><info><title>Stabilization of numerical values</title></info>
	
<para>To obtain estimates of the stabilization time for each
numerical  parameter, you may run:
<screen><prompt>%</prompt> statreport C1.p &gt; Report </screen>
Each series of values is counted as having stabilized after
the series crosses its upper and then lower 95% confidence bounds
twice (if the initial value is below the median) or crosses its lower
and then upper confidence bounds twice (if the initial value is above
the median). The confidence bounds are those based on its
equilibrium distribution as calculated from the last third of the
values in the sequence.</para>
      </section>

      <section><info><title>Stabilization of tree topologies and tree distances</title></info>
	
	<para>In addition to examining convergence diagnostics for continuous
	parameters, it is important to examine convergence diagnostics
	for the topology as well
	(<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://dx.doi.org/10.1080/10635150600812544">Beiko
	et al 2006</link>).  In theory, we recommend the web tool <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://ceb.csit.fsu.edu/awty/">Are We There Yet (AWTY)</link> (Wilgenbush et al, 2004).  However, AWTY gives incorrect results if you upload plain NEWICK tree samples -- which is what BAli-Phy outputs.  Therefore, if you wish to use AWTY, you must convert the tree samples files to NEXUS before you upload them to AWTY in order to get correct results.</para>

<para>It is also be possible to assess stabilization of tree topologies using tools distributed with <application>bali-phy</application> by using commands like the following.  Here, sub-sampling and burnin does not apply to the equilibrium tree files. Also, note that you need to manually construct the equilibrium samples, which we recommend to contain at least 500 trees; you might do this by sub-sampling using the <application>BAli-Phy</application> tool <command>sub-sample</command>.</para>

<orderedlist inheritnum="ignore" continuation="restarts">
<listitem><para>To report the average distances within and between two tree samples:
<screen><prompt>%</prompt> trees-distances --skip=<replaceable>burnin</replaceable> --sub-sample=<replaceable>factor</replaceable> compare <filename>C1.trees</filename> <filename>C2.trees</filename></screen>
</para></listitem>

<listitem><para>To compute the distance from each tree in C1.trees to all trees equilibrium.trees, as a time series:
<screen><prompt>%</prompt> trees-distances --skip=<replaceable>burnin</replaceable> --sub-sample=<replaceable>factor</replaceable> convergence <filename>C1.trees</filename> <filename>equilibrium.trees</filename></screen>
</para></listitem>

<listitem><para>To assess when the above time series stabilizes:
<screen><prompt>%</prompt> trees-distances --skip=<replaceable>burnin</replaceable> --sub-sample=<replaceable>factor</replaceable> converged <filename>C1.trees</filename> <filename>equilibrium.trees</filename></screen>
The stabilization criterion is the same one described above for numerical values.
</para></listitem>
</orderedlist>

<para>Note that the running time is the product of the number of trees in the two files.  Therefore, comparing two complete tree samples without sub-sampling will take too long.</para>

   </section>
	
    </section>

    <!-- sect2>
      <title>Diagnostics: Visual Inspection</title>
      <sect3>
	<title>Numerical Parameters</title>
	<para>
	  To inspect the Markov chain generated by
	  <application>BAli-Phy</application>, we recommend the program
	  <ulink url="http://evolve.zoo.ox.ac.uk/software/tracer/">Tracer</ulink>. 
	  You can open the file <filename>C1.p</filename> in Tracer to view
	  traceplots and to estimate the effective sample size.
	</para>
      </sect3>
      <sect3>
	<title>Topologies</title>
      <para>
	<screen><prompt>%</prompt> trees-view2 C1.trees C2.trees</screen>
      </para>
    </sect3>
  </sect2 -->
  </section>

  <section xml:id="tuning_the_markov_chain"><info><title>Tuning the Markov Chain</title></info>
    

    <para>The Markov chain should be largely self-tuning, since all
    numerical parameters are now sampled using self-tuning slice samplers.  However,
    the following parameters still affect the size of Metropolis-Hastings
    proposals.  You can modify them using the command line syntax "<userinput>--set <replaceable>parameter</replaceable>=<replaceable>value</replaceable></userinput>".</para>

    <section><info><title>Parameters</title></info>
      
      <para>

	<table frame="none" rowsep="1"><info><title>Tunable Parameters</title></info>
	  
	  <tgroup cols="4">
	    <colspec colnum="1" colname="col1" colwidth="1*"/>
	    <colspec colnum="2" colname="col2" colwidth="1*"/>
	    <colspec colnum="3" colname="col3" colwidth="1*"/>
	    <colspec colnum="4" colname="col4" colwidth="1*"/>
	    <thead><row>
		<entry>Name</entry>
		<entry>Variable</entry>
		<entry>Default</entry>
		<entry>Meaning</entry>
	    </row></thead>

	    <tbody>
	      <row>
		<entry>log_branch_sigma</entry>
		<entry>branch lengths</entry>
		<entry>0.6</entry>
		<entry>Scale of log-proposal.</entry>
	      </row>

	      <row>
		<entry>branch_sigma</entry>
		<entry>branch lengths</entry>
		<entry>0.6</entry>
		<entry>Scale of non-log-proposal.</entry>
	      </row>

	      <row>
		<entry>mu_scale_sigma</entry>
		<entry>mu</entry>
		<entry>0.6</entry>
		<entry>Width of proposal on log scale.</entry>
	      </row>

	      <row>
		<entry>kappa_scale_sigma</entry>
		<entry>HKY::kappa, TN::kappa(pur), TN::kappa(pyr)</entry>
		<entry>0.3</entry>
		<entry>Width of proposal on log scale.</entry>
	      </row>

	      <row>
		<entry>omega_scale_sigma</entry>
		<entry>M0::omega, M2::omega</entry>
		<entry>0.3</entry>
		<entry>Width of proposal on log scale.</entry>
	      </row>

	      <row>
		<entry>beta::mu_scale_sigma</entry>
		<entry>beta::mu</entry>
		<entry>0.2</entry>
		<entry>Width of proposal.</entry>
	      </row>

	      <row>
		<entry>INV::p_shift_sigma</entry>
		<entry>INV::p</entry>
		<entry>0.03</entry>
		<entry>Width of proposal.</entry>
	      </row>

	      <row>
		<entry>gamma::sigma_scale_sigma</entry>
		<entry>gamma::sigma/mu</entry>
		<entry>0.25</entry>
		<entry>Width of proposal of log scale.</entry>
	      </row>

	      <row>
		<entry>pi_dirichlet_N</entry>
		<entry>pi*</entry>
		<entry>1.0</entry>
		<entry>Tightness of dirichlet proposal for frequencies.</entry>
	      </row>

	      <row>
		<entry>lambda_shift_sigma</entry>
		<entry>delta, lambda</entry>
		<entry>0.35</entry>
		<entry>Width of proposal.</entry>
	      </row>

	      <row>
		<entry>epsilon_shift_sigma</entry>
		<entry>epsilon</entry>
		<entry>0.15</entry>
		<entry>Width of proposal.</entry>
	      </row>

	    </tbody>
	  </tgroup>
	</table>
      </para>
    </section>
  </section>


  <section xml:id="auxiliary_tools"><info><title>Auxiliary tools</title></info>
    

    <para>Most of these tools will describe their options if given the "<userinput>--help</userinput>" argument on the command line.</para>

    <section><info><title>alignment-find</title></info>
      
      <para>Usage: alignment-find [OPTIONS] &lt; <replaceable>alignments-file</replaceable></para>
      <para>Find the last (or first) FastA alignment in a file.</para>
    </section>

    <section><info><title>alignment-draw</title></info>
      

      <para>alignment-draw <replaceable>alignment-file</replaceable> [<replaceable>AU-file</replaceable>] [OPTIONS]</para>
      <para>Draw an alignment to HTML, optionally coloring residues by AU.</para>
    </section>

    <section><info><title>alignment-thin</title></info>
      
      <para>alignment-thin <replaceable>alignment-file</replaceable> <replaceable>tree-file</replaceable> [OPTIONS]</para>
      <para>Remove taxa from an alignment to preserve the most
	sequence diversity, as measured by the  total length of the tree
	for the remaining taxa.</para> 
    </section>

    <section><info><title>alignment-chop-internal</title></info>
      
      <para>alignment-chop-internal <replaceable>alignment-file</replaceable> [OPTIONS]</para>
      <para>Remove ancestral sequences from an alignment.  (This
	probably only works for alignments output by bali-phy.) </para>
    </section>

    <section><info><title>alignment-info</title></info>
      
      <para>alignment-info <replaceable>alignment-file</replaceable> <replaceable>tree-file</replaceable> [OPTIONS]</para>
      <para>Display basic information about the alignment, including
	its length, the number of sequences, columns that are constant
	or informative, letter frequencies, etc.</para>
      <para>If a tree is supplied, then the unweighted parsimony score
	is given as well.</para>
    </section>
    
    <section><info><title>alignment-indices</title></info>
      
      <para>alignment-indices <replaceable>alignment-file</replaceable> [OPTIONS]</para>
      <para>Show the alignment in terms of the index of each character
	in its sequence.  Each line in this file corresponds to one
	alignment column.  This can be useful in producing alignment
	constraint files.</para>
      <para>Also, you can specify which columns to keep using the
	--columns option.
      </para>
    </section>
    
    <section><info><title>alignment-cat</title></info>
      
      <para>alignment-cat <replaceable>file1</replaceable>
	[<replaceable>file2</replaceable> ...]</para>
      <para>Concatenate several alignments (with the same sequence
	names) end-to-end.</para>
    </section>
    
    <section><info><title>trees-consensus</title></info>
      
      <para>Usage: trees-consensus <replaceable>file</replaceable>
	[OPTIONS] </para>
      <para>This program analyzes the tree sample contained in
	<replaceable>file</replaceable>.  It reports the MAP topology, the
	supported taxa partitions (including partial partitions), and the
	majority consensus topology.
      </para> 
    </section>

    <section><info><title>trees-bootstrap</title></info>
      
      <para>Usage: trees-bootstrap <replaceable>file1</replaceable>
	[<replaceable>file2</replaceable> ... ] --predicates
	<replaceable>predicate-file</replaceable> [OPTIONS] </para>
      <para>This program analyzes the tree samples contained in
	<replaceable>file1</replaceable>, <replaceable>file2</replaceable>,
	etc.  It gives the support of each tree sample for each predicate in
	<replaceable>predicate-file</replaceable>, and reports a confidence
	interval based on the block bootstrap.
      </para> 

      <para>Each predicate is the intersection of a set of partitions, and
	is specified as a list of partitions or (multifurcating) trees, one
	per line.  Predicates are separated by blank lines.
      </para>
    </section>

    <section><info><title>trees-to-SRQ</title></info>
      

      <para>Usage: trees-to-SRQ <replaceable>predicate-file</replaceable> [OPTIONS] <replaceable>trees-file</replaceable> </para>

      <para>This program analyzes the tree samples contained in
	<replaceable>trees-file</replaceable>.  It uses them to produce an
	SRQ plot for each predicate in
	<replaceable>predicate-file</replaceable>.  Plots are produced in
	<application>gnuplot</application> format, with one point per line
	and with plots separated by a blank line.</para>

      <para>If <userinput>--mode sum </userinput> is specified, then a "sum"
	plot is produced instead of an SRQ plot.  In this plot, the slope of
	the curve corresponds to the posterior probability of the event.  If the
	<userinput>--invert</userinput> option is used then the slope of the
	curve correspond to the probability of the inverse event.  This is
	recommended if the probability of the event is near 1.0, because the
	sum plot does not distinguish variation in probabilities near 1.0 well.
      </para>

    </section>

  </section>

  <section xml:id="FAQ"><info><title>Frequently Asked Questions (FAQ)</title></info>
    
    <section><info><title>Input files</title></info>
      <qandaset>
	<qandaentry>
	  <question><para>Does BAli-Phy accept the wildcard characters "N" or "X"?  How does it treat them?</para></question>
	  <answer>
	    <para>Yes, BAli-Phy accepts the wildcard characters "N"
	    (for DNA) and "X" (for proteins).  These characters
	    indicate that some letter is present (as opposed to a
	    gap), but that you don't know <emphasis>which</emphasis>
	    letter it is.  
	    </para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>Does BAli-Phy accept "?" characters?</para></question>
	  <answer>
	    <para>
	      No.  "?" characters are often used to indicate
	      <emphasis>either</emphasis> letter presence (e.g. "N",
	      "X") <emphasis>or</emphasis> absence (e.g. "-").
	      BAli-phy will insist that you replace each "?" with
	      either "N"/"X" or "-" to indicate which one you mean. 
	    </para>

	    <para>(Most programs ignore indels and consider only
	    substitutions, and in that case "N" and "-" have the same
	    effect on the likelihood or parsimony score.  However,
	    since BAli-Phy takes indels into account, these two
	    alternatives are quite different.)
	    </para>

	  </answer>
	</qandaentry>

      <qandaentry>
	<question><para>Does BAli-Phy accept the characters "R" and "Y", etc.?</para></question>
	  <answer>
	    <para>
	      Yes.  BAli-Phy accepts the characters "Y", "R", "W", and "S" for
	      DNA, RNA, and Codon alphabets.  However, it does not
	      accept the characters "K", "M", "B", "D", "H",  and "V".
	      BAli-Phy also accepts the characters "B", "Z", and "J" 
	      for amino acids.  These characters indicate partial
	      knowledge about a letter.  For example, "R" indicates
	      that a nucleotide is present, and is a puRine ("A" or
	      "G"). "J" indicates that an amino acid is present and is
	      either "I" or "L".  
	    </para>

	    <para>
	      (Note that sequences sometimes contain such ambiguity
	      codes because the DNA that was sequenced contains
	      <emphasis>both</emphasis> values.  This might occur when
	      sequencing a heterozygote or when sequencing pooled DNA
	      from several individuals.  However, the model in
	      BAli-Phy (and other phylogeny inference programs) is
	      that only one letter is correct, but we do not know
	      which one it is.  This is probably not problematic when
	      dealing with pooled sequences, but should be considered.)
	    </para>
	  </answer>
	</qandaentry>

      <!-- qandaentry>
	<question><para>Can I specify a stop codon?</para></question>
	  <answer>
	  <para>
	  Well, yes...  but how do the models treat it?
	  </para>
	  </answer>
      </qandaentry -->

      </qandaset>
    </section>

    <section><info><title>Running <command>bali-phy</command>.</title></info>

      <qandaset>
	<qandaentry>
	  <question><para>Can I fix the alignment and ignore indel information, like MrBayes and other MCMC programs?</para></question>
	  <answer>
	    <para>Yes.  Add <userinput>-t</userinput> or <userinput>--traditional</userinput> on the command line.  This has the same effect as <userinput>--imodel none</userinput>.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>Can I fix the tree topology, while allowing the alignment to vary?</para></question>
	  <answer>
	    <para>Yes.  Add <userinput>--disable=topology --tree=<replaceable>treefile</replaceable></userinput> on the command line.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>Can I fix the tree topology and <emphasis>relative</emphasis> branch lengths, while allowing the alignment to vary?</para></question>
	  <answer>
	    <para>Yes.  Add <userinput>--disable=tree --tree=<replaceable>treefile</replaceable></userinput> on the command line.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>Can I fix the tree topology and <emphasis>absolute</emphasis> branch lengths <emphasis>in all data partitions</emphasis>, while allowing the alignment to vary?</para></question>
	  <answer>
	    <para>Yes.  Add <userinput>--disable=tree --tree=<replaceable>treefile</replaceable> --fix=mu1 ... --fix-mu<replaceable>n</replaceable></userinput> on the command line.</para>
	  </answer>
	</qandaentry>
      </qandaset>

    </section>

    <section><info><title>Run-time error messages</title></info>
      
      
      <qandaset>
	<qandaentry>
	  <question><para>I tried to use <userinput>--smodel gamma[6]</userinput> and I got an error message "bali-phy: No match."  What gives?</para></question>
	  <answer>
	    <para>You are probably using the C-shell as your command line shell.  It is trying to interpret <userinput>gamma[6]</userinput> as an array before running the command, and it is not succeeding.  Therefore, it doesn't even run <command>bali-phy</command>.</para>
	    <para>To avoid this, put a backslash in front of the first "[" and write <userinput>--smodel gamma&#92;[6]</userinput>.  This will keep the C-shell from interfering with your command.
	    </para>
	  </answer>
	</qandaentry>
      </qandaset>
    </section>

    <section><info><title>Stopping <command>bali-phy</command>.</title></info>
      

      <qandaset>
	<qandaentry>
	  <question><para>Why is <command>bali-phy</command> still
	      running? How long will it take?</para></question>
	  <answer>
	    <para>It runs until you stop it.  Stop it when its
	      done.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>How do I stop a <command>bali-phy</command>
	  run on my personal computer?</para></question>
	  <answer>
	    <para>Simply kill the process -- there is no special
	    command to stop <command>bali-phy</command>. If you are
	    running it on your personal workstation, then you can use
	    the command <command>kill</command>.  To do that, you need
	    to find the PID (process ID) of the running program.  You
	    can find this by examining the beginning of the file
	    <filename>C1.out</filename>.  For 
	    example:
<screen><prompt>%</prompt> less 5d-1/C1.out
command: bali-phy 5d.fasta
start time: Thu Jan  6 02:26:47 2011

VERSION: 2.1.1-alpha  [master commit 94d557df+]  (Jan 05 2011 13:04:11)
BUILD: Jan  5 2011 14:13:58
ARCH: x86_64-unknown-linux-gnu
COMPILER: GCC 4.5.2
FLAGS: -isystem &#36;(top_srcdir)/boost/include -ffast-math -DNDEBUG -DNDEBUG_DP -funroll-loops -fweb  -march=native  -pipe -O3  -isystem /usr/lib/openmpi/include -isystem /usr/lib/openmpi/include/openmpi -pthread
directory: /home/bredelings/Devel/bali-phy/Runs
subdirectory: 5d-1
hostname: mutant
<emphasis>PID: 3479</emphasis>
MPI_RANK: 0
MPI_SIZE: 1

random seed = 15356341113359626675

...
</screen>
Here the PID is 3479.  Therefore you can type:
<screen><prompt>%</prompt> kill 3479</screen>
On some operating systems you can also type:
<screen><prompt>%</prompt> killall bali-phy</screen>
However, be aware that this will terminate <emphasis>all</emphasis> of
your <command>bali-phy</command> runs on that computer.
	    </para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>How do I stop a <command>bali-phy</command>
	  run on a computing cluster?</para></question>
	  <answer>
	    <para>Simply terminate the submitted job.  The specific command
	    to terminate a job will depend on the queue manager that
	    is installed on your cluster.  Examine the documentation
	    for your cluster, or ask your cluster support staff how to delete
	    running jobs on your cluster.
	    </para>

	    <para>As an example, if the SGE software is used
	    to submit jobs, then the command <command>qstat</command>
	    should list your jobs and their job ID numbers (which is
	    different than the process ID number).  You can then use
	    the command <command>qdel</command> to delete jobs by ID
	    number.  The SGE documentation describes how to use these
	    commands. 
	    </para>
	  </answer>
	</qandaentry>


	<qandaentry>
	  <question><para>So, how can I know when to stop it?</para></question>
	  <answer>
	    <para>You can stop when it has both converged and also run for long enough to give
	      you &gt;1000 effectively independent samples.  </para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>How can I tell when the chain has converged?</para></question>
	  <answer>
	    <para>See section <xref linkend="mixing_and_convergence"/>.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>How can I check how many iterations the chain
	      has finished?</para></question>
	  <answer>
	    <para>Run <command>wc -l C1.p</command> inside the output
	      directory, and subtract 2.
	    </para>
	  </answer>
	</qandaentry>
      </qandaset>
    </section>

    <section><info><title>Interpreting the results.</title></info>
      

      <qandaset>
	<qandaentry>
	  <question><para>How do I compute the clade support?</para></question>
	  <answer>
	    <para>Actually, BAli-Phy uses unrooted trees, so it only estimates bi-partition support.  A bi-partition is a division of taxa into two groups, but it does not specify which group contains the root. </para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>How do I compute the split/bi-partition support?</para></question>
	  <answer>
	    <para>After you analyze the output (<xref linkend="analysis"/>), the partition support is indicated in
	      <filename>Results/consensus</filename> and in <filename>Results/c50.PP.tree</filename>. </para> 
	  </answer>
	</qandaentry>
      </qandaset>
    </section>

    <section><info><title>How do I...</title></info>
      
      <qandaset>
	<qandaentry>
	  <question><para>How do I concatenate alignments?</para></question>
	  <answer><para>
 	    <screen><prompt>%</prompt> alignment-cat <replaceable>filename1.fasta</replaceable> <replaceable>filename2.fasta</replaceable> &gt; result.fasta</screen>
	      The alignments must have the same sequence names, but
	      the names need not be in the same order.
	    </para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>How do I select columns from an alignment?</para></question>
	  <answer><para>
	    <screen><prompt>%</prompt> alignment-cat -c1-10,50-100,600- <replaceable>filename.fasta</replaceable> &gt; result.fasta</screen>
	    The resulting alignment will contain the selected columns
	    in the order you specified.
	  </para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question xml:id="generating_constraint_files"><para>How do I create an alignment-constraint file
	      from an alignment?</para></question>
	  <answer>
	    <para>To constrain the alignment to match some alignment
	      file <replaceable>filename.fasta</replaceable> in columns
	      100, 200-250, and 300, run:
	      <screen><prompt>%</prompt> alignment-indices -c100,200-250,300 <replaceable>filename.fasta</replaceable> &gt; filename.constraint</screen>
	    </para>
	  </answer>	
	</qandaentry>

      </qandaset>
    </section>
  </section>

</article>
