<!DOCTYPE book [
<!ENTITY  version        "3.0-beta6"         >

<!ENTITY  source.file    "bali-phy-&version;.tar.gz"         >
<!ENTITY  linux64.file   "bali-phy-&version;-linux64.tar.gz"         >
<!ENTITY  win32.file     "bali-phy-&version;-win32.tar.gz"         >
<!ENTITY  win64.file     "bali-phy-&version;-win64.tar.gz"         >
<!ENTITY  mac64.file     "bali-phy-&version;-mac64.tar.gz"         >

<!ENTITY  source.url     "http://www.bali-phy.org/files/&source.file;"         >
<!ENTITY  linux64.url     "http://www.bali-phy.org/files/&linux64.file;"         >
<!ENTITY  win32.url     "http://www.bali-phy.org/files/&win32.file;"         >
<!ENTITY  win64.url     "http://www.bali-phy.org/files/&win64.file;"         >
<!ENTITY  mac64.url     "http://www.bali-phy.org/files/&mac64.file;"         >

<!ENTITY  install.prefix     "~/Applications"         >
<!ENTITY  install.path     "&install.prefix;/bali-phy-&version;"         >
<!ENTITY  exe.path     "&install.path;/bin/bali-phy"         >
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">

<!ENTITY % dbcent 
	 PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN"
	 "/usr/share/xml/docbook/schema/dtd/4.5/dbcentx.mod">
%dbcent;

<!ENTITY % ent-mmlalias
      PUBLIC "-//W3C//ENTITIES Aiases for MathML 2.0//EN"
             "/usr/share/xml/schema/w3c/mathml/dtd/mmlalias.ent" >
%ent-mmlalias;
]>
<article xmlns="http://docbook.org/ns/docbook" version="5.0" 
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
	 xml:lang="en">
  <info><title><application>BAli-Phy</application> User's Guide v&version;</title>
    
    <author><personname><firstname>Benjamin</firstname><surname>Redelings</surname></personname></author>
  </info>

  <section xml:id="intro"><info><title>Introduction</title></info>
    <para><application>BAli-Phy</application> is a Unix command line program that is developed primarily on Linux.  <application>BAli-Phy</application> also runs on Windows and Mac OS X, but it is not a GUI program and so you must run it in a terminal.  Therefore, you might want to keep a <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.ee.surrey.ac.uk/Teaching/Unix">Unix tutorial</link> or <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.rain.org/~mkummel/unix.html">Unix cheat sheet</link> handy while you work.
    </para>

    <para>In addition to the main <command>bali-phy</command> executable, <application>BAli-Phy</application> comes with a collection of small command-line utilities such as <command>alignment-cat</command>, <command>trees-consensus</command>, etc.  These utilities can be used to process alignments, assemble data sets, and summarize the results of MCMC.
    </para>
  </section>

  <section xml:id="installation"><info><title>Installation</title></info>

  <section xml:id="pre-requisites"><info><title>Hardware requirements</title></info>
    
    <para>
      We typically run <application>BAli-Phy</application> on workstations with at least 8Gb of RAM and 2 cores.  More cores will allow you to run more MCMC chains at once, and more RAM will allow you to run larger data sets.  However, it is often easier and faster to run BAli-Phy on a (Linux) computing cluster, if you have one available.
    </para>

    <para>
    </para>
  </section>

  <section><info><title>Install on MS Windows</title></info>
  <para>First check that you have a 64-bit version of the Windows operation system installed. The executables for download will only run on a 64-bit installation of Windows.  </para>
  <section><info><title>Install a Unix command line: Cygwin (recommended)</title></info>
  <para>Before you can use <application>BAli-Phy</application> on Windows, you need to install a Unix command-line environment.  We recommand installing <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.cygwin.com/install.html">Cygwin</link>.  You may then access the Unix command line environment by running the Cygwin shell (not the normal windows command line).  The Cygwin shell mounts the <filename>C:</filename> drive on <filename>/cygdrive/c/</filename>, so you can access the directory <filename>C:/Users/</filename> as <filename>/cygdrive/c/Users/</filename> from within the Cygwin shell, for example.</para>
  <para>
    While running the Cygwin installer <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.cygwin.com/setup-x86_64.exe"><filename>setup-x86_64.exe</filename></link>, you will be given an opportunity to select additional packages.
	<itemizedlist>
	  <listitem><para>From <guilabel>Science</guilabel>, select <guilabel>R</guilabel>.</para></listitem>
	  <listitem><para>From <guilabel>Math</guilabel>, select <guilabel>gnuplot</guilabel>.</para></listitem>
	  <listitem><para>From <guilabel>Interpreters</guilabel>, select <guilabel>perl</guilabel>.</para></listitem>
	  <listitem><para>From <guilabel>Web</guilabel>, select <guilabel>wget</guilabel>.</para></listitem>
	  <listitem><para>From <guilabel>Editors</guilabel>, select <guilabel>nano</guilabel>.</para></listitem>
	</itemizedlist>
    You can re-run the installer to add packages that you did not add during the initial install.
  </para>
      <note>BAli-Phy refers to windows files using the normal
      <filename>C:/</filename> method because it is compiled as a
      native windows executable.
      The combination of native windows executables (which want <filename>C:/</filename>)
      and the Cygwin shell (which wants <filename>/cygdrive/c/</filename>) can be
      confusing.  If you supply Cygwin filenames with
      <filename>/cygdrive/</filename> to native windows executables like BAli-Phy, then it
      may complain that the files cannot be found.  
      </note>
      <!-- note>
	In the Cygwin shell you can access downloaded files at
      <filename>/cygdrive/c/Documents\ and\ Settings/<replaceable>username</replaceable>/Downloads/</filename>. 
      </note -->
  </section>
  <section><info><title>Install a Unix command line: Msys2 (alternative)</title></info>
  <para>You can optionally use <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.msys2.org">MSYS2</link> instead of Cygwin. Both MSYS2 and Cygwin can be installed at the same time.  After installing MSYS2, You may access the Unix command line environment by running the MSYS2 shell (not the normal windows command line).  The MSYS2 shell mounts the <filename>C:</filename> drive on <filename>/c/</filename>, so you can access the directory <filename>C:/Users/</filename> as <filename>/c/Users/</filename> from within the MSYS2 shell, for example.</para>
  <para>After installing MSYS2 you will need to install a few packages before you proceed.  Run the MSYS2 shell, and enter the command:
  <screen><prompt>%</prompt> <userinput>pacman -S perl tar</userinput></screen>
  </para>

  </section>
  <section><info><title>Install BAli-Phy executables from website</title></info>
      <para>
	First, download and extract the executables:
      <screen><prompt>%</prompt> <userinput>mkdir -p &install.prefix;</userinput>
<prompt>%</prompt> <userinput>cd &install.prefix;</userinput>
<prompt>%</prompt> <userinput>wget &win64.url;</userinput>
<prompt>%</prompt> <userinput>tar -zxf &win64.file;</userinput></screen>
       Second, check that the <command>bali-phy</command> executable runs:
      <screen><prompt>%</prompt> <userinput>~/Applications/bali-phy-&version;/bin/bali-phy --version</userinput></screen>
      You still need to add it to your PATH as described in <xref linkend="path"/>.
    </para>
</section>
  </section>

    <section><info><title>Install on Mac OS X</title></info>
    <section><info><title>Install BAli-Phy using homebrew (recommended) </title></info>
    <para>First install the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://developer.apple.com/xcode/">XCode</link> (version 6 or higher) command line tools:
    <screen><prompt>%</prompt> <userinput>xcode-select --install</userinput></screen>

    Then install <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://brew.sh/">homebrew</link> and use homebrew to compile and install <command>bali-phy</command>:
<screen><prompt>%</prompt> <userinput>brew tap bredelings/bioinformatics</userinput>
<prompt>%</prompt> <userinput>brew install bali-phy</userinput></screen>
Check that the executable runs:
<screen><prompt>%</prompt> <userinput>bali-phy --version</userinput></screen>
If you install with homebrew, you don't need to do anything extra to put bali-phy in your PATH.
    </para>
    </section>

    <section><info><title>Install BAli-Phy using executables from website (alternative)</title></info>
    <para>
      First download and extract the executables:
      <screen><prompt>%</prompt> <userinput>mkdir -p &install.prefix;</userinput>
<prompt>%</prompt> <userinput>cd &install.prefix;</userinput>
<prompt>%</prompt> <userinput>curl -O &mac64.url;</userinput>
<prompt>%</prompt> <userinput>tar -zxf &mac64.file;</userinput></screen>
      Check that the executable runs:
      <screen><prompt>%</prompt> <userinput>~/Applications/bali-phy-&version;/bin/bali-phy --version</userinput></screen>
      You still need to add it to your PATH as described in <xref linkend="path"/>.
    </para>

    </section>

    <section><info><title>Install programs used by <command>bp-analyze</command> using homebrew</title></info>
    <para>
      You can install <application>gnuplot</application> via homebrew:
<screen><prompt>%</prompt> <userinput> brew install gnuplot</userinput></screen> 
You can install <application>R</application> via homebrew:
<screen><prompt>%</prompt> <userinput> brew tap caskroom/cask</userinput>
<prompt>%</prompt> <userinput> brew cask install xquartz</userinput>
<prompt>%</prompt> <userinput> brew install r</userinput></screen>
However, note that this might conflict with R installed from other places, such as <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://mran.microsoft.com/open/">MRAN</link>.
</para>
    </section>
    <section><info><title>Install some of the programs used for viewing the results using homebrew</title></info>
      <para>
	<!-- This might be a better formula https://github.com/tseemann/homebrew-bioinformatics-linux/blob/master/figtree.rb
	     I could copy it to bredelings/bioinformatics ...
	-->
	You can install Figtree with homebrew:
	<screen><prompt>%</prompt> <userinput>brew tap caskroom/cask</userinput>
<prompt>%</prompt> <userinput>brew cask install figtree</userinput></screen>
	However, Seaview and Tracer don't have homebrew packages at the moment.
      </para>
    </section>
    </section>

    <section><info><title>Install on Linux</title></info>
    <section><info><title>Install BAli-Phy using executables from website</title></info>

    <para>First install <command>wget</command>.  If you have Debian or Ubuntu Linux, type:
    <screen><prompt>%</prompt> <userinput>sudo apt-get install wget</userinput></screen>
    </para>
    <para>
      Then download and extract the executables:
      <screen><prompt>%</prompt> <userinput>mkdir -p &install.prefix;</userinput>
<prompt>%</prompt> <userinput>cd &install.prefix;</userinput>
<prompt>%</prompt> <userinput>wget &linux64.url;</userinput>
<prompt>%</prompt> <userinput>tar -zxf &linux64.file;</userinput></screen>
      Second, check that the executable runs:
      <screen><prompt>%</prompt> <userinput>~/Applications/bali-phy-&version;/bin/bali-phy --version</userinput></screen>
      You still need to add it to your PATH as described in <xref linkend="path"/>.
    </para>
    </section>
    <section><info><title>Install programs used by <command>bp-analyze</command></title></info>
    <para>If you have Debian or Ubuntu Linux, you can install other recommended programs by typing:
    <screen><prompt>%</prompt> <userinput>sudo apt-get install gnuplot</userinput>
<prompt>%</prompt> <userinput>sudo apt-get install r-base</userinput></screen>
    </para>
    </section>
    <section><info><title>Install programs used to view the results</title></info>
    <para>
<screen><prompt>%</prompt> <userinput>sudo apt-get install seaview</userinput>
<prompt>%</prompt> <userinput>sudo apt-get install figtree</userinput></screen>
    However, there isn't a Debian or Ubuntu package for Tracer at the moment.
</para>
    </section>
    </section>

    <section xml:id="path"><info><title>Add BAli-Phy to your <envar>PATH</envar></title></info>

    <section><title>Is bali-phy in your PATH already?</title>
<para> First check if the executable is in your PATH.
<screen><prompt>%</prompt> <userinput>bali-phy --version</userinput></screen>
If this shows version info, then <command>bali-phy</command> is already in your PATH and you can skip this section.  This should be true if you installed <command>bali-phy</command> using homebrew, or if you've already added it to your PATH.</para>
<para>If bali-phy is not in your path, then you should see:
<screen><prompt>%</prompt> <userinput>bali-phy --version</userinput>
bali-phy: command not found.</screen>
If bali-phy is not in your PATH, then continue with this section.
</para>
    </section>
    <section><title>Quick version</title>
<para>Add <command>bali-phy</command> to your PATH, so that the shell knows where to find it.  This command only affects the terminal in which it is typed, and will not affect new terminals:
<screen><prompt>%</prompt> <userinput>export PATH=~/Applications/bali-phy-&version;/bin:&#36;PATH</userinput></screen>
To set the PATH automatically for new terminals, type:
<screen><prompt>%</prompt> <userinput>test -r ~/.bash_profile &#38;&#38; echo 'export PATH=~/Applications/bali-phy-&version;/bin:&#36;PATH' &#62;&#62; ~/.bash_profile</userinput>
<prompt>%</prompt> <userinput>echo 'export PATH=~/Applications/bali-phy-&version;/bin:&#36;PATH' &#62;&#62; ~/.profile</userinput></screen>
This will affect new terminals only after you log out and log back in though.</para>
<para>
Now check that the executable runs:
<screen><prompt>%</prompt> <userinput>bali-phy --version</userinput></screen>
If it does, then your PATH is set up correctly, and you can probably skip the rest of this section. 
</para>
    
    </section>
      <section><title>I have a path?</title>
      <para>
	If you installed <application>BAli-Phy</application> to the directory
	<filename>&install.prefix;</filename>, then you can run
	bali-phy by typing <command>&exe.path;</command>.
	However, it would be much nicer to simply type
	<command>bali-phy</command> and let the computer find the
	executable for you.  This can be achieved by putting the directory
	that contains the <application>BAli-Phy</application> executables into
	your "path".  	The "path" is a colon-separated list of directories that is
	searched to find program names that you type.  It is stored in an
	environment variable called <envar>PATH</envar>.
	</para>
      <para>
	Setting your <envar>PATH</envar> is also a pre-requisite for running
	the <command>bp-analyze</command> script to summarize your
	MCMC runs.
      </para>
      </section>

      <section><title>Examining your <envar>PATH</envar></title>
      <para>
	You can examine the current value of
	this environment variable by typing:
	<screen><prompt>%</prompt> <userinput>echo &#36;PATH</userinput></screen>
	We will assume that you extracted the bali-phy archive in
	<filename>&install.prefix;</filename> and so you want to add
	<filename>&#36;HOME/Applications/bali-phy-&version;/bin</filename>
	to your <envar>PATH</envar>.  (If you installed to another directory,
	replace <filename>&#36;HOME/Applications/bali-phy-&version;/</filename> with that directory.)
      </para>
      </section>

      <section><title>Adding BAli-Phy to your <envar>PATH</envar></title>
      <para>The commands
	for doing this depend on what "shell" you are using.  Type
	<command>echo &#36;SHELL</command> to find out. If your
	shell is <command>sh</command> or 
	<command>bash</command> then the command looks like this: 
	<screen><prompt>%</prompt> <userinput>PATH=&#36;HOME/Applications/bali-phy-&version;/bin:&#36;PATH</userinput></screen>
	If your shell is <command>csh</command> or
	<command>tcsh</command>, then the command looks like this:
	<screen><prompt>%</prompt> <userinput>setenv PATH &#36;HOME/Applications/bali-phy-&version;/bin:&#36;PATH</userinput></screen>
	Note that these commands will only affect the window you are typing
	in, and will vanish when you reboot.   
      </para>
      </section>

      <section><title>Making the change stick</title>
	<para>
	  To make this change survives when you logout or reboot, open
	  your shell configuration file in a text editor, and add the
	  command on a line by itself.  This will ensure that it is
	  run every time you log in.
	</para>

	<para>To find the right configuration file, look in your &#36;HOME directory
	  for <filename>.profile</filename> (for the Bourne shell <command>sh</command>), 
	  <filename>.bash_profile</filename> (for BASH), or
	  <filename>.login</filename> (for tcsh).  You may have to
	  create the file if it is not present.  On Cygwin, you should
	  put the change in the file <filename>.bashrc</filename>.
	</para>

	<para>If you do not know which directory is your home
	directory, you can find its full name by typing:
	<screen><prompt>%</prompt> <userinput>echo &#36;HOME</userinput></screen>
	</para>
      </section>
    </section>

    <section xml:id="tests"><info><title>Test the installed software</title></info>
    <para>In order to determine that the software has been correctly installed, and the <envar>PATH</envar> has been correctly set, run the following commands:
<screen><prompt>%</prompt> <userinput>bali-phy &install.path;/share/bali-phy/examples/sequences/5S-rRNA/5d.fasta --iter=150</userinput>
<prompt>%</prompt> <userinput>bp-analyze 5d-1/</userinput></screen>
    </para>
    <para>Furthermore, the directory <filename>5d-1</filename> should contain a file called <filename>C1.log</filename>.  You should be able to load this file in Tracer, although the chain will not really have converged yet.</para>
    </section>


    <section xml:id="software_req"><info><title>Install programs used for viewing the results</title></info>

    <para>
      <itemizedlist>
	<listitem>
	  <para>
	    <link xmlns:xlink="http://www.w3.org/1999/xlink"
		  xlink:href="http://tree.bio.ed.ac.uk/software/tracer/">
	      Tracer
	    </link>
	    :  MCMC parameter/diagnostic viewer.
	  </para>
	</listitem> 

	<listitem>
	  <para>
	    <link xmlns:xlink="http://www.w3.org/1999/xlink"
		  xlink:href="http://tree.bio.ed.ac.uk/software/figtree/">
	      FigTree
	    </link>
	    : Phylogeny Viewer
	  </para>
	</listitem>
      
	<listitem>
	  <para>
	    <link xmlns:xlink="http://www.w3.org/1999/xlink"
		  xlink:href="http://pbil.univ-lyon1.fr/software/seaview.html">
	      SeaView
	    </link>
	    : Alignment viewer.
	  </para>
	</listitem>

    </itemizedlist>
    </para>

    </section>
    </section>


    <section xml:id="compilation"><info><title>Compiling <application>BAli-Phy</application></title></info>
    

    <para>Compiling <application>BAli-Phy</application> is intended to be a relatively painless process.  However, most people will want to follow the standard installation instructions at <xref linkend="installation"/> instead of compiling BAli-Phy themselves.
    </para>

    <section><info><title>Setup</title></info>
      

    <para>In order to compile BAli-Phy, you need a C++ compiler than understands the C++14 standard.  We recommend the GNU C++ Compiler (<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://gcc.gnu.org">GCC</link>) version 5.0 (or higher) or the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://clang.llvm.org">Clang</link> compiler version 3.5.0 or higher. You will also need recent versions of autoconf, automake, and libtool to generate the configure script.  The <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.cairographics.org/">Cairo</link> graphics library is optional, but if it is missing, the <command>drawtree</command> tool that is used to draw consensus trees won't be built. See also <xref linkend="software_req"/>. </para>

    <section><info><title>Linux</title></info>
    <para>On Debian and Ubuntu, you can type:
<screen><prompt>%</prompt> sudo apt-get install g++
<prompt>%</prompt> sudo apt-get install libtool
<prompt>%</prompt> sudo apt-get install autoconf
<prompt>%</prompt> sudo apt-get install automake
<prompt>%</prompt> sudo apt-get install git
<prompt>%</prompt> sudo apt-get install libcairo2-dev</screen>
    </para>
    </section>

    <section><info><title>Mac</title></info>
    <para>On Mac OS X, the simplest way to get a compiler is to install <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://developer.apple.com/xcode/">XCode</link> (version 6 or newer) command line tools, which come with <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://clang.llvm.org">clang</link>.
 <screen><prompt>%</prompt> <userinput>xcode-select --install</userinput></screen>    To get the other tools, first install <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://brew.sh/">homebrew</link>, and then type:
<screen><prompt>%</prompt> brew install libtool
<prompt>%</prompt> brew install autoconf
<prompt>%</prompt> brew install automake
<prompt>%</prompt> brew install git
<prompt>%</prompt> brew install cairo
</screen>
    </para>
    <!-- para>You can also install BAli-Phy with homebrew.  The recipe is in <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://github.com/Homebrew/homebrew-science/blob/master/README.md">homebrew/science</link>. However, this recipe may not install the latest version.</para -->

    </section>
    
    <section><info><title>Windows</title></info>
    <para>BAli-Phy can be compiled as either a <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.cygwin.com/">Cygwin</link> executable or a native Windows executable.  The Cygwin executable needs the <filename>cygwin1.dll</filename> to run, and can handle cygwin filenames like <filename>/cygdrive/C/Users/</filename>.  To compile bali-phy for Cygwin, install Cygwin and the Cygwin packages for gcc, autoconf, automake, libtool, git, and cairo.  Then you can build bali-phy within Cygwin using the build instructions below.</para>

    <para>You can also compile native windows executables using the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://mingw-w64.org/doku.php">Mingw-w64</link> version of GCC.  These native windows executables do not need <filename>cygwin1.dll</filename>, and only understand Windows filenames, like <filename>C:\Users\</filename>.  You can build these executables in the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.msys2.org">MSYS2</link> shell, which is a modified version of Cygwin for compiling native windows executables using the Mingw-w64 compiler.</para>

    <para>You can also build Mingw-w64 executables using either Linux or Cygwin as the host environment, if you install a mingw-w64 "cross-compiler".  You can obtain cross compilers for Mingw-w64 on both Linux and Cygwin.  To inform the <filename>configure.sh</filename> script that you wish to use a cross compiler, add the flag <userinput>--host=x86_64-w64-mingw32</userinput> to build for 64-bit windows, and <userinput>--host=i686-w64-mingw32</userinput> to build 32-bit executables.</para>
    </section>

	  
    </section>

    <section xml:id="quickstart"><info><title>Clone, Configure, Compile</title></info>
       
    <para>First check out the code using git, and generate the configure script:
<screen><prompt>%</prompt><userinput> git clone https://github.com/bredelings/BAli-Phy.git</userinput>
<prompt>%</prompt><userinput> (cd BAli-Phy ; ./bootstrap.sh)</userinput>
</screen>Then create a <emphasis>separate</emphasis> build directory, enter it, and run the configure command:
<screen><prompt>%</prompt><userinput> mkdir build</userinput>
<prompt>%</prompt><userinput> cd build </userinput>
<prompt>%</prompt> <userinput>../BAli-Phy/configure --prefix=&#36;HOME/Applications/bali-phy-&version;/</userinput>
</screen>Finally, build and install the software:
<screen><prompt>%</prompt><userinput> make</userinput>
<prompt>%</prompt><userinput> make install</userinput>
</screen>
The command <command>bali-phy</command> and its associated tools should then be located in <filename>&install.path;/bin/</filename>. To install to another directory <replaceable>dir</replaceable>, specify --prefix=<replaceable>dir</replaceable> to <command>configure</command>.
      </para>

    </section>
      <section><info><title>Options: compiler and linker flags</title></info>
	
      <para>You can select the C++ compiler by setting the CXX variable.  A useful example of this is to use <command>g++-5</command> on systems where <command>g++</command> invokes a compiler that is too old:
 <screen><prompt>%</prompt> <userinput>../BAli-Phy/configure --prefix=&#36;HOME/Applications/bali-phy-&version; CXX=g++-5</userinput></screen>
 You may also set compiler and linker options using the CXXFLAGS and LDFLAGS variables.  For example, you can set the CPPFLAGS and LDFLAGS variables to instruct the compiler where to look for libraries, such as cairo:
	  <screen><prompt>%</prompt> <userinput>../BAli-Phy/configure --prefix=&#36;HOME/Applications/bali-phy-&version; CPPFLAGS="-I/usr/local/include" LDFLAGS="-L/usr/local/lib"</userinput></screen>
 Another useful example of this is to produce an OS X executuable on that can run on older versions of OS X:
	  <screen><prompt>%</prompt> <userinput>../BAli-Phy/configure --prefix=&#36;HOME/Applications/bali-phy-&version; CXXFLAGS="-mmacosx-version-min=10.9" LDFLAGS="-mmacosx-version-min=10.9"</userinput></screen>	</para>
      </section>

    </section>


  <section xml:id="running"><info><title>Running the program</title></info>
    

    <para>Here are some examples and explanations of how to run <command>bali-phy</command>.  You can get an overview of command line options by running <command> bali-phy --help</command>.</para>
<para>We recommend running multiple chains in parallel for each command, because 
<orderedlist>
  <listitem>You can combine the samples, leading to faster run times.</listitem>
  <listitem>You can compare the runs to determine if the chains have converged.</listitem>
</orderedlist>
 
This can be done simply by starting several instances of the program, and does not require using MPI or special command-line options.
</para>

    <section><info><title>Quick Start</title></info>
      
      <para>The simplest way to run <command>BAli-Phy</command> is
	to type all the arguments on the command line:

	<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file</replaceable></userinput></screen>

	Here <replaceable>sequence-file</replaceable> is a FastA or PHYLIP
	file containing the sequences you wish to analyze.  The filename should end
	in <userinput>.fasta</userinput> or <userinput>.phy</userinput> to
	indicate which format it is using.</para>

      <para>In this simple example, <command>bali-phy</command> automatically detects whether <replaceable>sequence-file</replaceable> contains DNA, RNA, or Amino-Acids and uses default values for several command line options.  Thus, if <replaceable>sequence-file</replaceable> contains DNA, then this is equivalent to the more verbose command line
	<screen><prompt>%</prompt> bali-phy <replaceable>sequence-file</replaceable> --alphabet DNA --smodel TN --imodel RS07</screen>  Here the substitution model is Tamura-Nei, the insertion/deletion model is RS07.  If <replaceable>sequence-file</replaceable> contains amino acids, then the defaults will be:<screen><prompt>%</prompt> bali-phy <replaceable>sequence-file</replaceable> --alphabet Amino-Acids --smodel LG --imodel RS07</screen> 
      </para>
    </section>

    <section><info><title>Command line options</title></info>
      

      <para>You can specify a more complex substitution model as follows (See <xref linkend="subst_basic"/>):

	<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file</replaceable> --smodel LG+Rates.Gamma+INV</userinput></screen> </para>
      <para>You may specify an indel model of <userinput>none</userinput>
	to fix the alignment to its initial value, and ignore information in shared insertions or deletions.
  	<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file</replaceable> --imodel none</userinput></screen></para>
    </section>

    <section><info><title>Multiple genes/partitions, models, and linking</title></info>

    <section><info><title>Multiple genes</title></info>
      <para>You may analyze multiple genes by putting each one it its own data partition:
	<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable></userinput></screen>
	You should put the data from the first gene in <replaceable>sequence-file1</replaceable> and the second gene
	in <replaceable>sequence-file2</replaceable>.  The sequence names in both files should be the same.  In this scenario, both genes share the same tree, but their alignments vary independently.  Furthermore, the branch lengths for each gene are scaled by an independent factor.  By default, each partition will have its own default alphabet, substitution model, insertion/deletion model, and tree length.
      </para>
    </section>

    <section><info><title>Multiple partitions with unlinked models</title></info>
      <para>A substitution model or insertion-deletion model that is specified without qualification will apply to every partition.  However, each partition will recieve its own copy of each model with separate, or "unlinked", parameter values
<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable> --smodel TN --imodel RS07</userinput></screen>
You can select partition-specific values for 4 options: <userinput>--smodel</userinput>, <userinput>--imodel</userinput>, <userinput>--alphabet</userinput>, and <userinput>--scale</userinput>.  For example, to specify different substitution models but the same alphabet:
<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable> --smodel 1:TN --smodel 2:GTR --alphabet DNA</userinput></screen>
You can fix the alignment and ignore insertion/deletion information in one partition, while allowing the alignment to vary and using insertion/deletion information in another partition:
<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable> --imodel 1:RS07 --imodel 2:none</userinput></screen></para>
    </section>
    <section><info><title>Multiple partitions with linked models</title></info>
<para>You can also specify that two partitions share a single copy of a single substitution model or indel model.  This reduces the number of parameters and also pools information between the partitions:
<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable> --smodel 1,2:TN --imodel 1,2:RS07</userinput></screen>
By default each partition has a separate scale, but you can force groups of partitions to share a scale. If you leave the value of the scale blank, the default distribution on scales will be used:
<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable> --smodel 1:TN --smodel 2:GTR --scale 1,2:</userinput></screen>
Finally, you may specify <userinput>-Inone</userinput> or <userinput>--imodel none</userinput>, which affects all partitions:
<screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable> --smodel 1:TN --smodel 2:GTR -t</userinput></screen>
</para>
    </section>
    <section><info><title>Linking models via the <userinput>link</userinput> command</title></info>
    
    <para>It is also possible to link partitions by specifying <userinput>--link=<replaceable>partitions</replaceable>[:<replaceable>attributes</replaceable>]</userinput>.  The link command is provided to allw a user to specify a model for each partition separately, and then afterwards choose which partitions to link.
    <screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable> --smodel 1:TN --smodel 2:TN --link=1,2 -t</userinput>
<prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable> --smodel TN                 --link=1,2 -t</userinput>   </screen>
    If the linked partitions are specified as having the same model, BAli-Phy will give an error and refuse to run.
    <screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable> --smodel 1:TN --link=1,2 -t</userinput>
bali-phy: Error! Partitions 1 and 2 cannot be linked because they have differing values 'TN' and ''</screen></para>
    <para>You can also specify which of the 3 attributes "smodel", "imodel", and "scale" are being linked:
    <screen><prompt>%</prompt> <userinput>bali-phy <replaceable>sequence-file1</replaceable> <replaceable>sequence-file2</replaceable> --link=1,2:smodel,scale -t</userinput>    // Don't link the indel model</screen>
    </para>
    </section>
    </section>

    <section xml:id="cluster"><info><title>Running on computing clusters</title></info>
    <para>
      Running <command>bali-phy</command> on a computing cluster is
      not necessary, but can speed up the analysis dramatically.
      This is because a cluster allows you to run several
      <emphasis>independent</emphasis> MCMC chains simultaneously and
      pool the resulting samples.  You can run multiple chains
      simultaneously simply by starting several different instances of
      <command>bali-phy</command>.  Each instance of bali-phy runs
      only one chain and does not require using MPI or special
    command-line options.</para>   

      <para>This approach to parallel computation is sometimes more
      efficient than MCMCMC-based parallelism involving heated chains.
      It is equivalent to running MCMCMC with no temperature
      difference between chains, with the exception that it allows
      results from <emphasis>all</emphasis> chains to be used, instead
      of just results from the single "cold" chain.  Thus, if you run
      10 independent chains in parallel, then you may gather samples
      10 times faster that a single chain. 
      </para>
    </section>

   <section><info><title>Option files (Scripts)</title></info>
      
      <para>
	In addition to using the command line, you may also specify
	options in a file. Using an option file can be more convenient
	if you are going to run the same analysis many times, or if
	the number of options is large. Furthermore, the option file
	may contain comments and blank lines.  Option files are a good
	to record what options you used in an analysis, and why.
      </para>

	<para>
	  An option file is specified with the command line option <userinput>--config
	    <replaceable>file</replaceable></userinput> or <userinput>-c<replaceable>file</replaceable></userinput>. If values
	    for an option are given both on the command line and
	    in an option file, then the command line value overrides
	    the value in the option file. 
	</para>
      <section><info><title>Syntax</title></info>
	

	<para>Option files use the same option names as the command
	line.  However, the syntax is different:  each option is given
	  on its own line using the syntax "<userinput>option =
	    value</userinput>" instead of the syntax "<userinput>--option
	    value</userinput>".  If the option has no value then it is
	  given using the syntax  "<userinput>option =
	    option</userinput>".  
	</para>
      </section>

      <section><info><title>Example</title></info>
	
	<para>
	  For example, consider the following
	  option file:
	  <programlisting># sequence data for 3 genes/partitions
align = ITS1.fasta
align = 5.8S.fasta
align = ITS2.fasta

# linked substitution model for 1st and 3rd partition
smodel = 1,3:TN+DP[n=3]

# substitution model for 2nd partition
smodel = 2:TN

# indel model for second partition
imodel = 2:none

# linked scale for 1st and 3rd partition
scale = 1,3:</programlisting>
          The <userinput>align</userinput> option indicates sequence files, and has no name on the command line.
	  the sequence file, which has no name on the command line.
	  Lines that begin with # are comments, and blank lines are
	  ignored.  This is thus equivalent to the rather long command line:
	  <screen><prompt>%</prompt> <userinput>bali-phy ITS1.fasta 5.8S.fasta ITS2.fasta --smodel=1,3:TN+DP[n=3] --smodel=2:TN --imodel=2:none --scale=1,3:</userinput></screen>
	</para>
      </section>

      <section><info><title>The configuration file</title></info>
	
	<para>
	  The file <filename>~/.bali-phy</filename> is a special
	  option file called the <emphasis>configuration
	    file.</emphasis>  If it exists, it is always loaded.
	  Options given on the command line or an option file 
	  override values given in <filename>~/.bali-phy</filename>. 
	</para>
      </section>
    </section>

  <section xml:id="examples"><info><title>Examples</title></info>
    
    <para>Here are some examples which demonstrate how to run
      <application>BAli-Phy</application>.  In order to run these
      examples, you must find the <filename>examples/sequences/</filename>
      directory which contains the example files.  If you downloaded
      executables and extracted them in the
      <filename>&install.prefix;</filename> directory, then the
      <filename>examples/sequences/</filename> directory will be found at 
      <filename>&install.path;/share/bali-phy/examples/sequences/</filename>.
    </para>

    <para>Also note that <command>bali-phy</command>
      does <emphasis>not</emphasis> run until it
      is "finished", but continues to gather samples until the user
      determines that enough samples have been gathered, and stops it.
      Thus, it is useful to continually examine the output files while
      the program is running. 
    </para>

    <example><info><title>No frills</title></info>
      
      <para>Here we analyze the EF-Tu 5-taxon data set provided with
	the software.</para>
      <screen> <prompt>%</prompt> <userinput>bali-phy &install.path;/share/bali-phy/examples/sequences/EF-Tu/5d.fasta</userinput></screen>
    </example>

    <example><info><title>Multiple-Rate Substitution Model</title></info>
      
      <para>We now modify the previous example by changing the
	substitution model to allow log-normal-distributed rate variation and
	invariant sites.  The amount of rate variation and the fraction of
	invariant sites are estimated</para>
      
      <screen> <prompt>%</prompt> <userinput>bali-phy &install.path;/share/bali-phy/examples/sequences/EF-Tu/5d.fasta --smodel LG+Rates.logNormal+INV</userinput></screen></example>

    <example><info><title>Fixed alignment</title></info>
      
      <para>Here we use the 5S rRNA 25-taxon data set provided with
      the software. The <userinput>-Inone</userinput> option is used, fixing the alignment and making indels non-informative.
      </para> 

      <screen> <prompt>%</prompt> <userinput>bali-phy &install.path;/share/bali-phy/examples/sequences/5S-rRNA/25-muscle.fasta -Inone</userinput></screen>

    </example>
  </section>

  </section>

  <section xml:id="input"><info><title>Input</title></info>
    

    <section><info><title>Sequence formats</title></info>
      
      <para><application>BAli-Phy</application> can read in sequences
	and alignments in both FastA and PHYLIP formats.  Filenames for
	FastA files should end in <userinput>.fasta</userinput>,
	<userinput>.mpfa</userinput>, <userinput>.fna</userinput>,
	<userinput>.fas</userinput>, <userinput>.fsa</userinput>, or
	<userinput>.fa</userinput>.  Filenames for PHYLIP files should
	end in <userinput>.phy</userinput>.  If one of these extensions
	is not used, then <application>BAli-Phy</application> will
	attempt to guess which format is being used.
      </para>

    </section>

    <section><info><title>Is my data set too large?</title></info>
      

      <para>Large data sets run more slowly than small data
	sets. We recommend a conservative starting point with few taxa
	and short sequence lengths.  You can then increase the size of
	your data set until a balance between speed and size is
	reached.  The tool <application>alignment-thin</application> described
        in <xref linkend="alignment-utilities"/> can be used to construct a smaller
        data set.</para> 

      <para>The number of samples that you need depends on whether you
	are primarily interested in obtaining a point estimate or in
	obtaining detailed measures of confidence and uncertainty.  For
	detailed measures of confidence and uncertainty you should
	obtain a minimum of 10,000 samples after the Markov chain
	converges.  For an estimate, you don't need very many samples
	after convergence.  (But you may need many samples to be sure
	that you've converged!)
      </para>

      <para>See also <xref linkend="cluster"/>.</para>

      <section><info><title>Too many taxa?</title></info>
	

	<para><application>BAli-Phy</application> is quite CPU
	  intensive, and so we recommend using 150 or fewer taxa in order
	  to limit the time required to accumulate enough MCMC
	  samples.
	</para>
	<para>When designing an MCMC analysis, I recommend performing an initial analysis
	with a much smaller sample size.  This smaller analysis will run much faster, and
	allow discovering mistakes much more quickly.  Then, one you are sure that you
	are running the program correctly and have chosen the best model, you can ramp
	up the sample size towards your desired number.
	</para> 

      </section>

      <section><info><title>Sequences too long?</title></info>
	

	<para>Aligning just a pair of sequences takes $O(L^2)$ time
	  and memory, where $L$ represents the sequence length.  Therefore
	  sequences longer than (say) 1000 letters become increasingly
	  impractical.  However, you might try to see how long you can make your
	  sequences before you run out of memory, or the program
	  becomes too slow.</para>

	<para>For multi-gene analyses, two separate data partitions
	  (i.e. genes) of 500 letters will be twice as fast
	  to align as one data partition of 1000 letters. So, it may be possible
	  to analyze several genes as long as each gene individually
	  is not too long.</para> 

	<!-- para>You can speed up alignment for long genes by specifying
	  alignment constraints (See <xref linkend="alignment_constraints"/>).
	  Ideally, 10 evenly spaced constraints should reduce the cost of
	  re-aligning a sequence by a factor of 10.
	</para -->

	<para>Also, note that you can sometimes speed up the analysis
	  of protein sequences by coding them as amino acids or codons, rather 
	  than nucleotides. This is because it decreases the sequence
	  length.
	</para> 
      </section>

    </section>

  </section>

  <section xml:id="output"><info><title>Output</title></info>
    

    <section><info><title>Output directory</title></info>
      
      <para><application>BAli-Phy</application> creates a new
	directory to store its output files each time it is run.  By default, the
	directory name is the name of the sequence file, with a number
	added on the end to make it unique. <application>BAli-Phy</application>
	first checks  if there is already a directory called
	<filename><replaceable>file</replaceable>-1/</filename>, and then moves on to
	<filename><replaceable>file</replaceable>-2/</filename>, etc. until it finds an
	unused directory name.</para> 
      
      <para>You can specify a different name to use instead of the
	sequence-file name by using the <userinput>--name</userinput> option.</para>
    </section>

    <section><info><title>Output files</title></info>
      
      <para><application>BAli-Phy</application> writes the following output
	files inside the directory that it creates:</para>
      
      <variablelist>
	<varlistentry>
	  <term>C1.out</term>
	  <listitem>
	    <para>Iteration numbers, probabilities, success probabilities for transition kernels, etc..</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>C1.P<replaceable>p</replaceable>.fastas</term>
	  <listitem>
	    <para>Sampled alignments for partition <replaceable>p</replaceable> including ancestral sequences.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>C1.err</term>
	  <listitem>
	    <para>Log file for hopefully irrelevant error messages.</para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>C1.MAP</term>
	  <listitem>
	    <para>Successive estimates of the MAP alignment, tree and parameters.</para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>C1.log</term>
	  <listitem>
	    <para>Numeric parameters: indel and substitution rates, etc.</para>
	  </listitem>
	</varlistentry>
	
	<varlistentry>
	  <term>C1.trees</term>
	  <listitem>
	    <para>Tree samples: one sample per line, in Newick format.</para>
	  </listitem>
	</varlistentry>
	
      </variablelist>
      
      <para>For the last two files, each line in these files corresponds to one iteration.</para>

      <section><title>Field names in <filename>C1.log</filename></title>

      <para>This section explains the meaning of the various field names in the file <filename>C1.log</filename>.</para>


      <section><title>Computed parameter names</title>
      <variablelist>
	<varlistentry>
	  <term>prior</term>
	  <listitem>
	    <para>The log prior probability.  This includes the probability of the alignment, since the alignment is not observed.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>prior_A<replaceable>n</replaceable></term>
	  <listitem>
	    <para>The log of the probability $\Pr(A_n|\tau,T,\Lambda)$ of the alignment $A_n$ of the $n$th partition, given the topology $\tau$, the branch lengths $T$, and insertion-deletion process parameters $\Lambda$.  This log probability is the probabilistic equivalent of a gap penalty on the alignment $A_n$ given the scoring parameters $\Lambda$.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>likelihood</term>
	  <listitem>
	    <para>The log of the likelihood.  Conditional on the alignment, this is determined entirely by the substitution model, and ignores insertions and deletions.  This is the probabilistic equivalent of the mismatch penalty.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>logp</term>
	  <listitem>
	    <para>The log of the probability.  The probability is the product of the prior and the likelihood.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>|A|</term>
	  <listitem>
	    <para>The total number of alignment columns across all partitions.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>#indels<replaceable>n</replaceable></term>
	  <listitem>
	    <para>The number of indel events in partition <replaceable>n</replaceable>, if we group adjacent indels that occur on the same branch.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>#indels</term>
	  <listitem>
	    <para>The total number of indel events across all partitions, if we group adjacent indels that occur on the same branch.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>|indels<replaceable>n</replaceable>|</term>
	  <listitem>
	    <para>The length of indel events in partition <replaceable>n</replaceable>, if we group adjacent indels that occur on the same branch.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>|indels|</term>
	  <listitem>
	    <para>The total length of indel events across all partitions, if we group adjacent indels that occur on the same branch.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>#substs<replaceable>n</replaceable></term>
	  <listitem>
	    <para>The unweighted parsimony score for substitutions in partition <replaceable>n</replaceable>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>#substs</term>
	  <listitem>
	    <para>The total unweighted parsimony score for substitutions across all partitions.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>Scale<replaceable>n</replaceable>&nbsp;*&nbsp;|T|</term>
	  <listitem>
	    <para>The branch lengths for partition group <replaceable>n</replaceable>.</para>
	  </listitem>
	</varlistentry>

      </variablelist>
      </section>

      <section><title>Model parameter names</title>

      <para>The prefixes "S<replaceable>n</replaceable>::" and "I<replaceable>n</replaceable>::" will be dropped if not necessary to disambiguate parameters with the same name in different sub-models.</para>

      <variablelist>
	<varlistentry>
	  <term>Scale<replaceable>n</replaceable></term>
	  <listitem>
	    <para>The average number of substitutions per branch in partition group <replaceable>n</replaceable>.  This ordinarily applies to the <replaceable>n</replaceable>th partition, unless multiple partitions are forced to have the same branch length scale using <userinput>--scale</userinput>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>S<replaceable>n</replaceable>::<replaceable>name</replaceable></term>
	  <listitem>
	    <para>Parameter <replaceable>name</replaceable> in the <replaceable>n</replaceable>th substitution model.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>I<replaceable>n</replaceable>::<replaceable>name</replaceable></term>
	  <listitem>
	    <para>Parameter <replaceable>name</replaceable> in the <replaceable>n</replaceable>th insertion/deletion model.</para>
	  </listitem>
	</varlistentry>

      </variablelist>
      </section>
      </section>
    </section>

    <section><info><title>Summarizing the output</title></info>
      

      <para>This section is primarily oriented to extracting estimates from output files.  See <xref linkend="mixing_and_convergence"/> for methods of determine effective sample sizes, and for checking mixing and convergence.</para>

      <section><info><title>Finding the consensus tree (<filename>C1.trees</filename>)</title></info>
	
	<para>
To compute the majority consensus tree, do the following.  (The
program <link xmlns:xlink="http://www.w3.org/1999/xlink"
xlink:href="http://tree.bio.ed.ac.uk/software/figtree/">FigTree</link>
allows you to view the resulting tree file graphically.)
<screen><prompt>%</prompt> trees-consensus C1.trees &gt; <filename>c50.PP.tree</filename></screen>
You can (and should) pool results from different MCMC runs by adding
multiple tree sample files on the command line.  The different MCMC
runs should have the same input files and parameters.
<screen><prompt>%</prompt> trees-consensus <replaceable>dir-1</replaceable>/C1.trees <replaceable>dir-2</replaceable>/C1.trees &gt; <filename>c50.PP.tree</filename></screen>
By default, the first 10% of tree samples are skipped as burn-in.  You
can specify the number of samples (e.g. 1000) to skip by adding the
options <userinput>-s1000</userinput> or
<userinput>--skip=1000</userinput>.  You may also specify a percentage
of all samples:
<screen><prompt>%</prompt> trees-consensus -s20% C1.trees &gt; <filename>c50.PP.tree</filename></screen>
To discard some samples, keeping (say) every 10th sample, you may add
the options <userinput>-x10</userinput> or
<userinput>--subsample=10</userinput>.  This can make the program a
lot faster, at the possible expense of some loss in accuracy.
<screen><prompt>%</prompt> trees-consensus -s20% -x10 C1.trees &gt; <filename>c50.PP.tree</filename></screen>
By default, splits are included in the consensus tree if they have a
PP greater than 0.5.  You can specify a more stringent level
(e.g. 0.66) by adding the option
<userinput>--consensus-PP=0.66</userinput> as follows:
<screen><prompt>%</prompt> trees-consensus -s20% -x10 --consensus-PP=0.66 C1.trees &gt; <filename>c66.PP.tree</filename></screen>
You may also make the program write directly to the output file
(e.g. <filename>c66.PP.tree</filename>) by using the more general form
<userinput>--consensus-PP=0.66:c66.PP.tree</userinput>.  Leaving off 
the "<userinput>:c66.PP.tree</userinput>" part (as we did above) or specifying
"<userinput>:-</userinput>" sends the output to the standard output
(e.g. the terminal, if not redirected). 
<screen><prompt>%</prompt> trees-consensus -s20% -x10 C1.trees --consensus-PP=0.66:<filename>c66.PP.tree</filename></screen>
You can supply multiple levels and filenames separated by commas.
This is faster than running the program multiple times with different
consensus levels.
<screen><prompt>%</prompt> trees-consensus -s20% -x10 C1.trees --consensus-PP=0.5:<filename>c50.PP.tree</filename>,0.66:<filename>c66.PP.tree</filename></screen>
Finally, you may use the option <userinput>--consensus=</userinput>
instead of the option <userinput>--consensus-PP=</userinput> if you do
not wish the resulting tree to contain embedded posterior
probabilities on branches, as well as branch lengths.
<screen><prompt>%</prompt> trees-consensus -s20% -x10 C1.trees --consensus=0.5:<filename>c50.PP.tree</filename>,0.66:<filename>c66.PP.tree</filename></screen>
Both the <userinput>--consensus=</userinput> and 
<userinput>--consensus-PP=</userinput> options may be given simultaneously.
</para>

<para>
  See <userinput>trees-consensus --help</userinput> for a complete list of options.
</para>
      </section>

      <section><info><title>Finding the M.A.P. topology (<filename>C1.trees</filename>)</title></info>
	
	<para>
To compute the <emphasis>maximum a posteriori</emphasis> tree topology do:
<screen><prompt>%</prompt> trees-consensus --skip=<replaceable>burnin</replaceable> C1.trees --map-tree=<filename>MAP.tree</filename></screen>	
The MAP topology may be used instead of a consensus tree when a fully resolved (e.g. bifurcating) tree is required.  However, when the topology has many tips, each topology may be sampled only once, leading to low quality estimates of the MAP topology.
</para>
<para>The program <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://tree.bio.ed.ac.uk/software/figtree/">FigTree</link> allows you to view the consensus tree graphically.
</para>
      </section>

      <section><info><title>Checking topology convergence (<filename>C1.trees</filename>)</title></info>
	
<para>
<screen><prompt>%</prompt> trees-bootstrap <replaceable>dir-1</replaceable>/C1.trees <replaceable>dir-2</replaceable>/C1.trees</screen>	
This command computes the effective sample size for the posterior probability of each split.  It also computes the Average Standard Deviation of Split Frequencies (ASDSF) between two or more independent runs.</para>

<para>See <xref linkend="mixing_and_convergence"/> for more information.
</para>  
      </section>

      <section><info><title>Summarizing numerical parameters (<filename>C1.log</filename>)</title></info>
	
<para>
This command gives a median and confidence interval, ESS, and a stabilization time:
<screen><prompt>%</prompt> statreport C1.log &gt; Report </screen>	
This command compares multiple runs to give PSRF and joint ESS values as well:
<screen><prompt>%</prompt> statreport <replaceable>dir-1</replaceable>/C1.log <replaceable>dir-2</replaceable>/C1.log &gt; Report </screen>	
The program <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://tree.bio.ed.ac.uk/software/tracer/">Tracer</link> allows you to view the same summaries graphically.</para>

<para>See <xref linkend="mixing_and_convergence"/> for more information.
</para>
      </section>

      <section><info><title>Computing an alignment using Posterior Decoding (<filename>C1.P<replaceable>p</replaceable>.fastas</filename>)</title></info>
	
<para>
<screen><prompt>%</prompt> cut-range --skip=<replaceable>burn-in</replaceable> &lt; C1.P<replaceable>p</replaceable>.fastas | alignment-max &gt; P<replaceable>p</replaceable>-max.fasta</screen>
You can use the program <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://pbil.univ-lyon1.fr/software/seaview.html">SeaView</link> to view the alignment graphically.
</para>
      </section>      

      <section><info><title>Find the alignment from the maximum a posterior (MAP) point (<filename>C1.MAP</filename>)</title></info>
	
<screen><prompt>%</prompt> alignment-find &lt; C1.MAP &gt; P1-MAP.fasta</screen>

      </section>      

      <section><info><title>Create an Au (Alignment Uncertainty) plot (<filename>C1.P<replaceable>p</replaceable>.fastas</filename>)</title></info>
	
<para>To annotate a specific alignment <replaceable>alignment</replaceable>.fasta, choose a fully resolved tree estimate <replaceable>tree</replaceable>:
<screen><prompt>%</prompt> cut-range --skip=<replaceable>burn-in</replaceable> &lt; C1.P<replaceable>p</replaceable>.fastas | alignment-gild <replaceable>alignment</replaceable>.fasta <replaceable>tree</replaceable>  &gt; <replaceable>alignment</replaceable>-AU.prob
<prompt>%</prompt> alignment-draw <replaceable>alignment</replaceable>.fasta --AU <replaceable>alignment</replaceable>-AU.prob &gt; <replaceable>alignment</replaceable>-AU.html</screen>
The majority consensus tree is usually not fully resolved, so we recommend using the MAP topology instead.
</para>
      </section>


    </section>


  <section xml:id="analysis"><info><title>Summarizing the output - scripted</title></info>
    
    
    <para>
      Instead of manually running each of the steps to analyze the
      output files, you may instead run the PERL script
      <command>bp-analyze</command> to execute these commands.  The
      script will create an HTML page
      <filename>Results/index.html</filename> that summarizes the
      posterior distribution.
    </para>

  <para>You may run <command>bp-analyze</command> inside the output directory, like this:
<screen><prompt>%</prompt> bp-analyze --burnin=<replaceable>iterations</replaceable></screen>
      You may also run it with one or more output directories as
      arguments, like this:
<screen><prompt>%</prompt> bp-analyze --burnin=<replaceable>iterations</replaceable> <replaceable>directory</replaceable>-1/ <replaceable>directory</replaceable>-2/</screen>
      In this case, output from multiple runs will be used to assess convergence and mixing, as well as to increase the precision of the estimates.
    </para>

<para> All the commands that are executed by <command>bp-analyze</command> will be logged to
      <filename>Results/bp-analyze.log</filename>. You can also see these
      commands as they are executed by supplying the <command>--verbose</command> option:
<screen><prompt>%</prompt> bp-analyze --burnin=<replaceable>iterations</replaceable> --verbose</screen>
    </para>

    <section><info><title>Meaning of generated files</title></info>
      
    <para>The <filename>Results/</filename> directory will contain
    the following useful files:</para>

      <variablelist>

	<varlistentry><term>Report</term><listitem>
	    <para>A summary of numerical parameters: credible
	    intervals and mixing.</para>
	</listitem></varlistentry>

	<varlistentry><term>consensus</term><listitem>
	    <para>A summary of supported splits (clades). </para>
	</listitem></varlistentry>

	<varlistentry><term>c-levels.plot</term><listitem>
	    <para>The number of splits (clades) supported at each LOD level.</para>
	</listitem></varlistentry>

	<varlistentry><term>c50.tree</term><listitem>	<para>The majority consensus topology + branch lengths (Newick format)</para> 
	</listitem></varlistentry>

	<varlistentry><term>c50.PP.tree</term><listitem>
	<para>The majority consensus topology + branch lengths +
	Posterior Probabilities (Newick format)</para> 
	</listitem></varlistentry>

	<varlistentry><term>MAP.tree</term><listitem>
	    <para>An estimate of the MAP topology + branch lengths (Newick format)</para>
	</listitem></varlistentry>

      </variablelist>
      <para> 
	The following files will be generated to summarize alignment uncertainty, unless the analysis uses a fixed alignment.

      </para>

      <variablelist>
	<varlistentry><term>MAP.fasta</term><listitem>
	    <para>An estimate of the MAP alignment.
	</para></listitem></varlistentry>

	<varlistentry><term>P<replaceable>p</replaceable>-max.fasta</term><listitem>
	    <para>An estimate of the alignment for partition
	    <replaceable>p</replaceable> using maximum posterior decoding.</para>
	</listitem></varlistentry>

	<varlistentry><term>MAP-AU.html</term><listitem><para>An AU plot of the MAP alignment (AA/DNA color-cheme).
	</para></listitem></varlistentry>
	
	<varlistentry><term>P<replaceable>p</replaceable>-max-AU.html</term><listitem>
	    <para>An AU plot of the maximum posterior decoding alignment for partition
	    <replaceable>p</replaceable>  (AA/DNA color-cheme).</para>
	</listitem></varlistentry>

	<!-- varlistentry><term>consensus.fasta</term><listitem>
	    <para>A consensus alignment, representing information shared by most alignment samples.
	</para></listitem></varlistentry>

	<varlistentry><term>consensus-AU.html</term><listitem><para>An AU plot of the consensus alignment (rainbow color-scheme).
	</para></listitem></varlistentry>

	<varlistentry><term>consensus-AU2.html</term><listitem><para>An AU plot of the MAP alignment (AA/DNA color-scheme).
	</para></listitem></varlistentry>

	<varlistentry><term>consensus-AU.prob</term><listitem><para>The probabilities for each letter in the consensus alignment AU plot.
	</para></listitem></varlistentry -->
	
      </variablelist>


      <para>The following files describe convergence and mixing:</para>


      <variablelist>

	<varlistentry><term>partitions.bs</term><listitem>
	    <para>Confidence intervals on the support for partitions, generated
	      using a block bootstrap.</para>
	</listitem></varlistentry>

	<varlistentry><term>partitions.SRQ</term><listitem><para>A collection of
	      SRQ plots for the supported partitions.
	</para></listitem></varlistentry>

	<varlistentry><term>c50.SRQ</term><listitem><para>An
	      SRQ plot for the majority consensus tree.
	</para></listitem></varlistentry>


      </variablelist>

      <para>The SRQ plots can be viewed by typing "<userinput>plot
	  '<replaceable>file</replaceable>' with lines</userinput>" in
	<application>gnuplot</application>.</para>

    </section>
      <section><info><title><filename>Mixing/partitions.bs</filename>: partition mixing</title></info>
	
	<para>
	  This file reports the quality of estimates of support for each
	  partition in terms of the posterior probability (PP) and
	  log-10 odds (LOD).  It also reports the auto-correlation time (ACT),
	  the effective sample size (Ne), the number of samples
	  that support (1) or do not support (0) the partition, and
	  the number of regenerations. 

	  Only partitions with PP &gt; 0.1 are shown by default.
	</para>
      </section>


  </section>
  </section>


  <section xml:id="functions"><info><title>Models and Priors</title></info>

  <section><info><title>Models and distributions are functions</title></info>
  <para>Models and probability distributions are treated as functions in BAli-Phy because all of them have parameters or arguments. Parameters have names in BAli-Phy.  Parameter values are specified using square brackets as follows:
  <programlisting>HKY[kappa=2]              // model
log[x=2]                  // function
Normal[mean=0,sigma=1]    // probability distribution</programlisting>
It is possible to specify parameter values by position instead of by name:
  <programlisting>HKY[2]
log[2]
Normal[0,1]</programlisting>
It is even possible to mix positional and named arguments, as long as all the positional arguments come before all the named arguments:
<programlisting>Normal[0,sigma=1]   // OK
Normal[mean=0,1]    // not OK</programlisting>

  The order and type of parameters for a function can be found with the <userinput>help</userinput> command.  For example,
<screen><prompt>%</prompt> <userinput>bali-phy help HKY</userinput></screen>
A value must be given for each parameter, unless the parameter has a default value (See <xref linkend="default_values"/>).
  </para>
	<note>
	  <para>
	    If you are using the C-shell command line shell (<command>csh</command> or <command>tcsh</command>), then it will try to interpret the square brackets <userinput>[..]</userinput> as an array reference and give the rather confusing error message "bali-phy: No match."
	    <screen> <prompt>%</prompt> <userinput>bali-phy file.fasta --smodel=HKY[kappa=2]</userinput>
bali-phy: No match.</screen>
	    To avoid this, put quotes around the substitution model, like this:
<screen><prompt>%</prompt> <userinput>bali-phy file.fasta --smodel="HKY[kappa=2]"</userinput></screen>
	  </para>
	</note>

  </section>

  <section xml:id="priors"><info><title>Priors</title></info>
  <section><info><title>Specifying priors</title></info>
<para>Priors on model parameters are specified by giving a random value. Random values can be obtained from distributions using the function <userinput>Sample</userinput>.  For example, this places a log-normal prior on the parameter <userinput>kappa</userinput> of the <userinput>HKY</userinput> model:
<programlisting>HKY[kappa=Sample[logNormal[1,1]]]</programlisting>
You can write <userinput>~Dist</userinput> as a shorthand for <userinput>Sample[Dist]</userinput>:
<programlisting>HKY[kappa=~logNormal[1,1]]</programlisting>
The <userinput>=~</userinput> can be further shortened to just <userinput>~</userinput>:
<programlisting>HKY[kappa~logNormal[1,1]]</programlisting>
</para>
</section>

  <section><info><title>Random function arguments</title></info>
<para>It also is possible to use random values as inputs to other functions.  For example:
<programlisting>Add[1,~Exponential[10]]</programlisting>
In such cases the parameter value should be specified with <userinput>=</userinput>, as in the following example:
<programlisting>RS07[meanIndelLength=Add[1,~Exponential[10]]]]</programlisting>
</para>
  </section>
<section><info><title>Distributions are not random values</title></info>
<para>Random values and distributions have different types.  For example, the
following is of type <userinput>Distribution[Double]</userinput>:
<programlisting>Uniform[0,1]</programlisting>
In contrast, the following are both of type <userinput>Double</userinput>:
<programlisting>Sample[Uniform[0,1]]
~Uniform[0,1]</programlisting>
This is important when passing distributions as arguments to other
distributions and functions.  For example, the distribution <userinput>iid</userinput> is used to generate a specific number of samples from another distribution.  Thus, it needs to receive a distribution as an argument:
<programlisting>~iid[4,Normal[0,1]]      // OK    : 4 samples from the Normal[0,1] distribution
~iid[4,~Normal[0,1]]     // not OK: 4 samples from ... a random number?</programlisting>
(See <xref linkend="types"/>.)
</para>
  </section>
  </section>

  <section><info><title>Models and '<userinput>+</userinput>' notation</title></info>
  <para>BAli-Phy allows using <userinput>+</userinput> as a short-cut to combine models.  Models expressed this way are rewritten internally to a more precise form:
<programlisting>WAG+F             // rewritten to RCTMC[WAG,F]
M0+F3x4           // rewritten to RCTMC[M0,F3x4]
HKY+Rates.Gamma   // rewritten to Rates.Gamma[submodel=HKY]
HKY+INV           // rewritten to INV[submodel=HKY]</programlisting>
</para>
<para>These examples illustrate the two rules for rewriting <userinput>+</userinput>-expressions. In the first rule, an expression such as <userinput>M1[args1]+M2[args2]</userinput> is rewritten to <userinput>RCTMC[M1[args1],M2[args2]]</userinput> if <userinput>M1</userinput> has type <userinput>ExchangeModel[a]</userinput> and <userinput>M2</userinput> has type <userinput>FrequencyModel[a]</userinput>.  This allows natural syntax for creating a reversible continuous-time Markov chain (RCTMC) from an exchange model (such as WAG or M0) and a frequency model (such as +F or +F3x4).</para>
<para>In the second rule, an expression such as <userinput>model+M[args]</userinput> is rewritten to <userinput>M[args,submodel=model]</userinput> if <userinput>M</userinput> has a <userinput>submodel</userinput> argument.  When <userinput>+</userinput> occurs multiple times, the submodel is assumed to be as large as possible thus:
<programlisting>HKY+F+Rates.Gamma+INV</programlisting>
is rewritten to
<programlisting>INV[submodel=Rates.Gamma[submodel=RCTMC[HKY,F]]]</programlisting>
This allows a simple method for combining models, when one model is an argument to another model.
</para>
  </section>

  <section xml:id="default_values"><info><title>Default values and default priors</title></info>
  <para>
Some function arguments have default values.  For example, the <userinput>Rates.Gamma</userinput> parameter <userinput>n</userinput> has a default value of 4.  Thus the following are equivalent:
<programlisting>HKY+Rates.Gamma[n=4]+INV
HKY+Rates.Gamma+INV</programlisting></para>

  <para>When the default value is random, then the argument has a default prior. For example, the <userinput>kappa</userinput> parameter of <userinput>HKY</userinput> has a default value of <userinput>~logNormal[log[2],0.25]</userinput>, so the following are equivalent:
<programlisting>HKY[kappa~logNormal[log[2],0.25]]
HKY</programlisting>
The <userinput>help</userinput> command can be used to determine the default value for a parameter, if there is one.</para>
  </section>

  <section xml:id="types"><info><title>Argument and result types</title></info>
  <para>  Every function has a <emphasis>result type</emphasis>, as well as an <emphasis>argument type</emphasis> for each argument.  The argument type specifies what kind of arguments are acceptable, and the result type specifies what kind of result the function produces.  Types include <userinput>Int</userinput> for integers, <userinput>Double</userinput> for double-precision floating point numbers, and <userinput>String</userinput> for text strings.  Integer arguments are implicitly converted to <userinput>Double</userinput> when the argument type is <userinput>Double</userinput>.</para>

  <para>Some types contain parameters.  For example <userinput>List[Int]</userinput> indicates a list of integers and <userinput>List[Double]</userinput> indicates a list of real numbers.  In order to indicate a list of unknown type, we use a <emphasis>type variable</emphasis> <userinput>a</userinput> and write <userinput>List[a]</userinput>.  Type variables always begin with a lower-case letter.  They are able to match any specific type, and their value is found by pattern-matching.  For example, the function <userinput>Add[x,y]</userinput> takes two arguments of type <userinput>a</userinput> and has a result of type <userinput>a</userinput>.  Thus:
<programlisting>Add[1,2]        // arguments are a=Int, so result is of type Int
Add[1.0,2.0]    // arguments are a=Double, so result is of type Double</programlisting>
<userinput>Pair[a,b]</userinput> is a parameterized type that can be specialized to (for example) <userinput>Pair[String,Double]</userinput> and <userinput>Pair[Int,Int]</userinput>.
  </para>

  <para>Types for components of substitution models are often parameterized by type of the alphabet.  For example, HKY has a result type of <userinput>ExchangeModel[a]</userinput>, where <userinput>a</userinput> could be <userinput>DNA</userinput> or <userinput>RNA</userinput>.  The use of alphabet types in substitution models prevents combining substitution models with mismatched alphabets.
  </para>

  </section>
  </section>
    

    <section xml:id="subst_models"><info><title>Substitution models</title></info>
      
    <para>Substitution models can be specified using notation like:
    <programlisting>HKY[kappa~logNormal[0,1]]+Rates.Gamma[alpha=0.2]+INV</programlisting>
    See section <xref linkend="functions"/> for the general syntax.
    </para>
    
      <section><info><title>Default substitution models</title></info>
	
	<para>If the substitution model is not specified, then the
	  default model for the alphabet is used.  For DNA or RNA, the
	  default model is TN.  For Triplets, the default is TN+x3. For
          Codons, the default model is M0.  For Amino-Acids, the
	  default model is LG. 
	</para>
      </section>


      <section xml:id="subst_basic"><info><title>Basic CTMC models</title></info>
	
	<para>The basic substitution models in
	  <application>BAli-Phy</application> are continuous-time Markov
	  chains (CTMC). 
	  CTMC models can be characterized 
	  by transition rates $Q_{ij}$ from letter $i$ to letter $j$.
	  After a given time $t$ the probability for transition from state
	  $i$ to state $j$ is given by \[P(t)_{ij}=e^{Q_{ij} \times t}\]
	  using a matrix exponential.  Because the CTMC models used in
	  <application>BAli-Phy</application> are all reversible, the rate
	  matrix for these reversible models can be decomposed into a
	  symmetric matrix $S$ and equilibrium frequencies $\pi$ as
	  follows:  \[Q_{ij} = S_{ij}\times\pi_j\]
	  The matrix $S$ is called the exchangability matrix, and
	  represents how exchangeable letters $i$ and $j$ are,
	  independent of their frequencies.
	</para>
	
	<para>The basic CTMC models are EQU, HKY, TN, GTR, HKY+x3,
	TN+x3, GTR+x3, JTT, WAG, LG, and M0.  Each of these models is a
	way of specifying the exchangeability matrix $S_{ij}$.</para>

	<table frame="none" rowsep="1"><info><title>Substitution Models</title></info>
	  
	  <tgroup cols="3">
	    <colspec colnum="1" colname="col1" colwidth="1*"/>
	    <colspec colnum="2" colname="col2" colwidth="1*"/>
	    <colspec colnum="3" colname="col3" colwidth="1*"/>
	    <thead><row>
		<entry>Model</entry>
		<entry>Alphabet</entry>
		<entry>Parameters</entry>
	    </row></thead>

	    <tbody>
	      <row>
		<entry><userinput>EQU</userinput></entry>
		<entry>any</entry>
		<entry>none</entry>
	      </row>

	      <row>
		<entry>
		  <para><userinput>HKY</userinput></para>
		  <para>Hasegawa, Kishino, Yano (1985)</para>
		</entry>
		<entry>DNA or RNA</entry>
		<entry>kappa: the ts/tv ratio.</entry>
	      </row>

	      <row>
		<entry><para><userinput>TN</userinput></para><para>Tamura, Nei (1993)</para></entry>
		<entry>DNA or RNA</entry>
		<entry>
		  <para>kappaPur: the purine ts/tv ratio.</para>
		  <para>kappaPyr: the pyrimidine ts/tv ratio.</para>
		</entry>
	      </row>

	      <row>
		<entry><para><userinput>GTR</userinput></para><para>General Time-Reversible</para><para>Tavare (1986)</para></entry>
		<entry>DNA or RNA</entry>
		<entry>
		  <para>$S_{i \ne j}$</para>
		</entry>
	      </row>

	      <row>
		<entry>
		  <para><userinput>JTT</userinput></para>
		  <para>Jones, Taylor, Thornton (1992)</para>
		</entry>
		<entry>Amino-Acids</entry>
		<entry>
		  <para>none.</para>
		</entry>
	      </row>

	      <row>
		<entry>
		  <para><userinput>WAG</userinput></para>
		  <para>Whelan and Goldman (2001)</para>
		</entry>
		<entry>Amino-Acids</entry>
		<entry>
		  <para>none.</para>
		</entry>
	      </row>

	      <row>
		<entry>
		  <para><userinput>LG</userinput></para>
		  <para>Le and Gascuel (2008)</para>
		</entry>
		<entry>Amino-Acids</entry>
		<entry>
		  <para>none.</para>
		  </entry>
	      </row>

	      <row>
		<entry>
		  <para><userinput>Empirical[<replaceable>file</replaceable>]</userinput></para>
		</entry>
		<entry>Amino-Acids</entry>
		<entry>
		  <para>none.</para>
		</entry>
	      </row>

	      <row>
		<entry>
		  <para><userinput>HKY+x3</userinput></para>
		  <para><userinput>TN+x3</userinput></para>
		  <para><userinput>GTR+x3</userinput></para>
		</entry>
		<entry>Triplets</entry>
		<entry>
		  <para><replaceable>nuc-model</replaceable> parameters.</para>
		</entry>
	      </row>

	      <row>
		<entry>
		  <para><userinput>M0</userinput></para>
		  <para><userinput>M0[,HKY]</userinput> (default)</para>
		  <para><userinput>M0[,GTR]</userinput></para>
		  <para>Nielsen and Yang (1998)</para>
		</entry>
		<entry>Codons</entry>
		<entry>
		  <para>omega: the dN/dS ratio</para>
		</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

      </section>

    <section xml:id="subst_freq"><info><title>Substitution Frequency models</title></info>
      
      <para>The rate matrix $Q_{ij}$ can be more generally expressed as
	\[Q_{ij} = S_{ij}\times\frac{\pi_j^f}{\pi_i^{1-f}},\]
        where $f$ ranges from $0$ to $1$.
	Here the parameter $f$ specifies the relative importance of
	unequal conservation ($f=0$) and unequal replacement ($f=1$) in
	maintaining the equilibrium frequencies $\pi$.  
      </para>
      <para>
	In fact, this can be generalized even further to \[ Q_{ij} =
	S_{ij}\times R(\pi)_{ij} \] where \[ \pi_i \times R_{ij} =
	\pi_j \times R_{ji}. \]
      </para>
      <para>These models can therefore be expressed as a combination
	of an "exchange model" (for $S$) and a "frequency model" (for
	$R$).
      </para>

      <table frame="none" rowsep="1"><info><title>Frequency Models</title></info>
	
	<tgroup cols="3">
	  <colspec colnum="1" colname="col1" colwidth="1*"/>
	  <colspec colnum="2" colname="col2" colwidth="1*"/>
	  <colspec colnum="3" colname="col3" colwidth="1*"/>
	  <thead><row>
	      <entry>Model</entry>
	      <entry>Alphabet</entry>
	      <entry>Parameters</entry>
	  </row></thead>

	  <tbody>
	    <row>
	      <entry>
		<para><userinput>F</userinput></para>
		<para>Whelan and Goldman (2001)</para>
	      </entry>
	      <entry>any</entry>
	      <entry>
		<para>pi[<replaceable>l</replaceable>]: frequency of letter <replaceable>l</replaceable>.</para>
	      </entry>
	    </row>
	    <row>
	      <entry>
		<para><userinput>F61</userinput></para>
		<para>Synonym of F for codon models</para>
	      </entry>
	      <entry>any</entry>
	      <entry>
		<para>pi[<replaceable>l</replaceable>]: frequency of letter <replaceable>l</replaceable>.</para>
	      </entry>
	    </row>
	    <row>
	      <entry>
		<para><userinput>gwF</userinput></para>
		<para>Goldman and Whelan (2002)</para>
	      </entry>
	      <entry>any</entry>
	      <entry>
		<para>f: determines cause of high-frequency letters.</para>
		<para>pi[<replaceable>l</replaceable>]: frequency of letter <replaceable>l</replaceable>.</para>
	      </entry>
	    </row>
	    <row>
	      <entry>
		<para><userinput>F1x4</userinput></para>
		<para>Single nucleotide frequency model</para>
	      </entry>
	      <entry>Triplets</entry>
	      <entry>
		<para>pi[<replaceable>l</replaceable>]: frequency
		of nucleotide <replaceable>l</replaceable>.</para>
	      </entry>
	    </row>
	    <row>
	      <entry>
		<para><userinput>F3x4</userinput></para>
		<para>Independent nucleotide frequency model</para>
	      </entry>
	      <entry>Triplets</entry>
	      <entry>
		<para>pi1[<replaceable>l</replaceable>]: frequency
		of letter <replaceable>l</replaceable> in codon position 1.</para>
		<para>pi2[<replaceable>l</replaceable>]: frequency
		of letter <replaceable>l</replaceable> in codon position 2.</para>
		<para>pi3[<replaceable>l</replaceable>]: frequency
		of letter <replaceable>l</replaceable> in codon position 3.</para>
	      </entry>
	    </row>
	    <row>
	      <entry>
		<para><userinput>MG94</userinput></para>
		<para>Muse and Gaut (1994)</para>
		<para>Single nucleotide frequency model</para>
	      </entry>
	      <entry>Triplets</entry>
	      <entry>
		<para>pi[<replaceable>l</replaceable>]: frequency
		of nucleotide <replaceable>l</replaceable>.</para>
	      </entry>
	    </row>
	    <row>
	      <entry>
		<para><userinput>MG94w9</userinput></para>
		<para>Muse and Gaut (1994)</para>
		<para>Independent nucleotide frequency model</para>
	      </entry>
	      <entry>Triplets</entry>
	      <entry>
		<para>pi[<replaceable>l</replaceable>]: frequency
		of letter <replaceable>l</replaceable> in codon position 1.</para>
		<para>pi[<replaceable>l</replaceable>]: frequency
		of letter <replaceable>l</replaceable> in codon position 2.</para>
		<para>pi[<replaceable>l</replaceable>]: frequency
		of letter <replaceable>l</replaceable> in codon position 3.</para>
	      </entry>
	    </row>
	    <!-- row>
	    <entry><userinput>pi=triplets</userinput></entry>
	    <entry>Triplets</entry>
	    <entry>
	      <para>$f$ (1)</para>
	      <para>$g$ (1)</para>
	      <para>$\pi$ (4) </para>
	      <para>$\nu$ ($|\alpha|$) </para>
	    </entry>
	    <entry>$R_{\alpha\beta} = \frac{{(\pi_i \pi_j
	      \pi_l)}^f}{{(\pi_i \pi_j \pi_k)}^{1-f}} \times \frac{\nu_\beta}{\nu_\alpha}$.</entry>
	    </row>
	    <row>
	      <entry>
		<para><userinput>F=amino-acids</userinput></para>
		<para>Amino-acid based codon frequencies. (no codon bias)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<para>$f$ (1)</para>
		<para>$\pi_{AA}$ (20)</para>
	      </entry>
	      <entry>$R_{ij} = \frac{\pi_j^f}{\pi_i^{1-f}}$.</entry>
	    </row>
	    <row>
	    <entry><userinput>pi=codons</userinput></entry>
	    <entry>Codons</entry>
	    <entry>$f$</entry>
	    <entry>$R_{ij} = \frac{\pi_j^f}{\pi_i^{1-f}}$.</entry>
	    </row -->
	  </tbody>
	</tgroup>
      </table>
    </section>


    <section><info><title>Substitution Mixture Models</title></info>
    
    <para>
      Complex substitution models in <application>BAli-Phy</application>
      are constructed as mixtures of reversible CTMC models (see <xref linkend="subst_basic"/>) that run at different rates (e.g. $\Gamma_4+INV$)
      or have different parameters (e.g. an M2a codon model).
    </para>

      <table frame="none" rowsep="1" class="abc"><info><title>CTMC Mixture Models</title></info>
	
	<tgroup cols="3">
	  <thead><row>
	      <entry>Model</entry>
	      <entry>Alphabet</entry>
	      <entry>Parameters</entry>
	  </row></thead>
	  <tbody>

	    <row>
	      <entry>
		<para><userinput><replaceable>model</replaceable> + Rates.Gamma</userinput></para>
		<para><userinput><replaceable>model</replaceable> + Rates.Gamma[4]</userinput> (default)</para>
		<para>Yang (1994)</para>
	      </entry>
	      <entry><replaceable>model</replaceable> alphabet</entry>
	      <entry>
		<variablelist>
		  <varlistentry> <term>sigmaOverMu</term> <listitem> <para>noise to signal ratio for Gamma(a,b).  Also equal to 1/sqrt(a).</para> </listitem> </varlistentry>
		  <varlistentry> <term>a</term> <listitem> <para>parameter for Gamma(a,b)</para> </listitem> </varlistentry>
		  <varlistentry> <term>b</term> <listitem> <para>parameter for Gamma(a,b)</para> </listitem> </varlistentry>
		</variablelist>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput><replaceable>model</replaceable> + Rates.logNormal</userinput></para>
		<para><userinput><replaceable>model</replaceable> + Rates.logNormal[4]</userinput> (default)</para>
	      </entry>
	      <entry><replaceable>model</replaceable> alphabet</entry>
	      <entry>
		<variablelist>
		  <varlistentry> <term>sigmaOverMu</term> <listitem> <para>noise to signal ratio for $\log Normal$.</para> </listitem> </varlistentry>
		  <varlistentry> <term>pInv</term> <listitem> <para>Fraction of invariant sites.</para> </listitem> </varlistentry>
		</variablelist>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput><replaceable>model</replaceable> + INV</userinput></para>
	      </entry>
	      <entry><replaceable>model</replaceable> alphabet</entry>
	      <entry>
		<variablelist>
		  <varlistentry> <term>pInv</term> <listitem> <para>Fraction of invariant sites.</para> </listitem> </varlistentry>
		</variablelist>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>M1a</userinput></para>
		<para><userinput>M1a[HKY,F61]</userinput> (default)</para>
		<para><userinput>M1a[GTR,F3x4]</userinput></para>
		<para>Wong, et. al. (2004)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<variablelist>
		  <varlistentry> <term>w1</term> <listitem> <para>the conserved dN/dS ratio</para> </listitem> </varlistentry>
		  <varlistentry> <term>f1</term> <listitem> <para>the fraction of conserved sites among non-positively selected sites</para> </listitem> </varlistentry>
		  <varlistentry> <term>f2</term> <listitem> <para>the fraction of neutral sites among non-positively selected sites</para> </listitem> </varlistentry>
		</variablelist>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>M2a</userinput></para>
		<para><userinput>M2a[HKY,F61]</userinput> (default)</para>
		<para><userinput>M2a[GTR,F3x4]</userinput></para>
		<para>Wong, et. al. (2004)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<variablelist>
		  <varlistentry> <term>w1</term> <listitem> <para>the conserved dN/dS ratio</para> </listitem> </varlistentry>
		  <varlistentry> <term>f1</term> <listitem> <para>the fraction of conserved sites among non-positively selected sites</para> </listitem> </varlistentry>
		  <varlistentry> <term>f2</term> <listitem> <para>the fraction of neutral sites among non-positively selected sites</para> </listitem> </varlistentry>
		  <varlistentry> <term>posW</term> <listitem> <para>the positively selected dN/dS ratio</para> </listitem> </varlistentry>
		  <varlistentry> <term>posP</term> <listitem> <para>the fraction of positively selected sites</para> </listitem> </varlistentry>
		</variablelist>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>M2a_Test</userinput></para>
		<para><userinput>M2a_Test[HKY,F61]</userinput> (default)</para>
		<para><userinput>M2a_Test[GTR,F3x4]</userinput></para>
		<para>Wong, et. al. (2004)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<variablelist>
		  <varlistentry> <term>w1</term> <listitem> <para>the conserved dN/dS ratio</para> </listitem> </varlistentry>
		  <varlistentry> <term>f1</term> <listitem> <para>the fraction of conserved sites among non-positively selected sites</para> </listitem> </varlistentry>
		  <varlistentry> <term>f2</term> <listitem> <para>the fraction of neutral sites among non-positively selected sites</para> </listitem> </varlistentry>
		  <varlistentry> <term>posW</term> <listitem> <para>the positively selected dN/dS ratio</para> </listitem> </varlistentry>
		  <varlistentry> <term>posP</term> <listitem> <para>the fraction of positively selected sites.</para> </listitem> </varlistentry>
		  <varlistentry> <term>posSelection</term> <listitem> <para>model selector (1 if positive selection, 0 if not).</para> </listitem> </varlistentry>
		</variablelist>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>M3</userinput></para>
		<para><userinput>M3[HKY,F61]</userinput> (default)</para>
		<para><userinput>M3[GTR,MG94,n=4]</userinput></para>
		<para>Yang, et. al. (2000)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<variablelist>
		  <varlistentry> <term>M3.omegas[i]</term> <listitem> <para>the conserved dN/dS ratio for category i</para> </listitem> </varlistentry>
		  <varlistentry> <term>M3.ps[i]</term> <listitem> <para>the fraction of sites in category i</para> </listitem> </varlistentry>
		</variablelist>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>M3_Test</userinput></para>
		<para><userinput>M3_Test[HKY,F61]</userinput> (default)</para>
		<para><userinput>M3_Test[GTR,MG94]</userinput></para>
		<para>Yang, et. al. (2000)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<variablelist>
		  <varlistentry> <term>M3.omegas[i]</term> <listitem> <para>the conserved dN/dS ratio for category i</para> </listitem> </varlistentry>
		  <varlistentry> <term>M3.ps[i]</term> <listitem> <para>the fraction of sites in category i</para> </listitem> </varlistentry>

		  <varlistentry> <term>posW</term> <listitem> <para>the positively selected dN/dS ratio</para> </listitem> </varlistentry>
		  <varlistentry> <term>posP</term> <listitem> <para>the fraction of positively selected sites.</para> </listitem> </varlistentry>
		  <varlistentry> <term>posSelection</term> <listitem> <para>model selector (1 if positive selection, 0 if not).</para> </listitem> </varlistentry>
		</variablelist>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>M7</userinput></para>
		<para><userinput>M7[4,HKY,F61]</userinput> (default)</para>
		<para><userinput>M7[6,GTR,F3x4]</userinput></para>
		<para>Yang, et. al. (2000)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<variablelist>
		  <varlistentry> <term>mu</term> <listitem> <para>mean of the Beta(a,b) distribution.</para> </listitem> </varlistentry>
		  <varlistentry> <term>a</term> <listitem> <para>parameter of Beta(a,b) distribution</para> </listitem> </varlistentry>
		  <varlistentry> <term>b</term> <listitem> <para>parameter of Beta(a,b) distribution</para> </listitem> </varlistentry>
		</variablelist>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>M8a</userinput></para>
		<para><userinput>M8a[4,HKY,F61]</userinput> (default)</para>
		<para><userinput>M8a[6,GTR,F3x4]</userinput></para>
		<para>Yang, et. al. (2000)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<variablelist>
		  <varlistentry> <term>mu</term> <listitem> <para>mean of the Beta(a,b) distribution.</para> </listitem> </varlistentry>
		  <varlistentry> <term>a</term> <listitem> <para>parameter of Beta(a,b) distribution</para> </listitem> </varlistentry>
		  <varlistentry> <term>b</term> <listitem> <para>parameter of Beta(a,b) distribution</para> </listitem> </varlistentry>

		  <varlistentry> <term>posW</term> <listitem> <para>the positively selected dN/dS ratio</para> </listitem> </varlistentry>
		  <varlistentry> <term>posP</term> <listitem> <para>the fraction of neutral sites.</para> </listitem> </varlistentry>
		</variablelist>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>M8</userinput></para>
		<para><userinput>M8[4,HKY,F61]</userinput> (default)</para>
		<para><userinput>M8[6,GTR,F3x4]</userinput></para>
		<para>Yang, et. al. (2000)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<variablelist>
		  <varlistentry> <term>mu</term> <listitem> <para>mean of the Beta(a,b) distribution.</para> </listitem> </varlistentry>
		  <varlistentry> <term>a</term> <listitem> <para>parameter of Beta(a,b) distribution</para> </listitem> </varlistentry>
		  <varlistentry> <term>b</term> <listitem> <para>parameter of Beta(a,b) distribution</para> </listitem> </varlistentry>
		  <varlistentry> <term>posW</term> <listitem> <para>the positively selected dN/dS ratio</para> </listitem> </varlistentry>
		  <varlistentry> <term>posP</term> <listitem> <para>the fraction of positively selected sites.</para> </listitem> </varlistentry>
		</variablelist>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<para><userinput>M8a_Test</userinput></para>
		<para><userinput>M8a_Test[4,HKY,F61]</userinput> (default)</para>
		<para><userinput>M8a_Test[6,GTR,F3x4]</userinput></para>
		<para>Yang, et. al. (2000)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<variablelist>
		  <varlistentry> <term>mu</term> <listitem> <para>mean of the Beta(a,b) distribution.</para> </listitem> </varlistentry>
		  <varlistentry> <term>a</term> <listitem> <para>parameter of Beta(a,b) distribution</para> </listitem> </varlistentry>
		  <varlistentry> <term>b</term> <listitem> <para>parameter of Beta(a,b) distribution</para> </listitem> </varlistentry>
		  <varlistentry> <term>posW</term> <listitem> <para>the positively selected dN/dS ratio</para> </listitem> </varlistentry>
		  <varlistentry> <term>posP</term> <listitem> <para>the fraction of positively selected sites.</para> </listitem> </varlistentry>
		  <varlistentry> <term>posSelection</term> <listitem> <para>model selector (1 if positive selection, 0 if not).</para> </listitem> </varlistentry>
		</variablelist>
	      </entry>
	    </row>

	    <row>
	      <entry>
		<variablelist>
		  <para><userinput>branch-site</userinput></para>
		<para><userinput>branch-site[HKY,F61]</userinput> (default)</para>
		<para><userinput>branch-site[GTR,F3x4]</userinput></para>
		<para>Zhang, et. al. (2005)</para>
		</variablelist>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<variablelist>
		  <varlistentry> <term>fs[1]</term> <listitem> <para>the fraction of conserved sites on background branches.</para> </listitem> </varlistentry>
		  <varlistentry> <term>fs[2]</term> <listitem> <para>the fraction of neutral sites on background branches.</para> </listitem> </varlistentry>
		  <varlistentry> <term>omegas[1]</term> <listitem> <para>the conserved dN/dS ratio.</para> </listitem> </varlistentry>
		  <varlistentry> <term>posW</term> <listitem> <para>the positively selected dN/dS ratio.</para> </listitem> </varlistentry>
		  <varlistentry> <term>posP</term> <listitem> <para>the fraction of sites (neutral or conserved) that switch to positive selection on
		  foreground branches.</para> </listitem> </varlistentry>
		  <varlistentry> <term>posSelection</term> <listitem> <para>model selector (1 if positive selection, 0 if not).</para> </listitem> </varlistentry>
	  	</variablelist>
	      </entry>
	    </row>

	    <!-- row>
	      <entry>
		<para><userinput>M2</userinput></para>
		<para><userinput><replaceable>sm</replaceable> + M2</userinput></para>
		<para>Yang, et. al. (2000)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<varlistentry> <term>$\kappa$</term> <listitem> <para>the ts/tv ratio</para> </listitem> </varlistentry>
		<varlistentry> <term>$p_1, p_2, p_3$</term> <listitem> <para>bin frequencies.</para> </listitem> </varlistentry>
		<varlistentry> <term>$\omega_3$</term> <listitem> <para>value of $\omega$ in bin 2.</para> </listitem> </varlistentry>
	      </entry>
	      <entry>
		<para>$\Omega=\omega_i$ with probability $p_i$.</para>
		<para>$\omega_1 = 0$, $\omega_2 = 1$.</para>
		<para>The default for <replaceable>sm</replaceable> is M0.</para>
	      </entry>
	    </row -->

	    <!-- row>
	      <entry>
		<para><userinput>M3[<replaceable>n</replaceable>]</userinput></para>
		<para><userinput><replaceable>sm</replaceable> + M3[<replaceable>n</replaceable>]</userinput></para>
		<para>Yang, et. al. (2000)</para>
	      </entry>
	      <entry>Codons</entry>
	      <entry>
		<varlistentry> <term>$\kappa$</term> <listitem> <para>the ts/tv ratio</para> </listitem> </varlistentry>
		<varlistentry> <term>$p_1, \ldots, p_n$</term> <listitem> <para>bin frequencies.</para> </listitem> </varlistentry>
		<varlistentry> <term>$\omega_1, \ldots, \omega_n$</term> <listitem> <para>values of $\omega$.</para> </listitem> </varlistentry>
	      </entry>
	      <entry>
		<para>$\Omega=\omega_i$ with probability $p_i$.</para>
	      </entry>
	    </row -->

	  </tbody>

	</tgroup>
      </table>
    </section>

    <section><info><title>The branch-site substitution model</title></info>
    <para>In order to use the branch-site substitution model, the user needs to
    <itemizedlist>
      <listitem>Specify an unrooted tree topology in Newick format.</listitem>
      <listitem>Label foreground branches on the tree using NHX attributes.</listitem>
      <listitem>Disable topology changes in order to fix the tree topology (branch lengths are estimated).</listitem>
    </itemizedlist>
    Here is an example tree file:
<example><title>An initial tree file with branch lengths</title>
(((A1:0.1, B1:0.1):0.1,(C1:0.1, D1:0.1):0.1):0.1,((E1:0.1, F1:0.1):0.1,(G1:0.1, H1:0.1):0.1):0.1,(((A2:0.1, B2:0.1):0.1,(C2:0.1, D2:0.1):0.1):0.1,((E2:0.1, F2:0.1):0.1,(G2:0.1, H2:0.1):0.1):0.1):[&amp;&amp;NHX:foreground=1]0.2);
</example>
Any branch lengths provided will be used as initial values in the MCMC analysis.  However, it is not necessary to provide them:
<example><title>An initial tree file without branch lengths</title>
(((A1, B1),(C1, D1)),((E1, F1),(G1, H1)),(((A2, B2),(C2, D2)),((E2, F2),(G2, H2))):[&amp;&amp;NHX:foreground=1]);
</example>
The NHX attribute must be applied to the branch, not the node.  Therefore it must occur after a colon.  Multiple branches may be marked as foreground branches.
    </para>
    <para>An example command line is as follows:
<screen><prompt>%</prompt> bali-phy <replaceable>alignment</replaceable>.fasta --smodel branch-site[HKY,F3x4] --disable=topology --tree=<replaceable>tree</replaceable>.tree</screen>
</para>
<para>The posterior probability of positive selection is the posterior mean of the posSelection parameter.  This may be computed using the statreport program with the <userinput>--mean</userinput> option.
</para>
<para>In case this probability is extremely close to 1 or 0, you may wish to add the option <userinput>--Rao-Blackwellize S1::BranchSiteTest:posSelection</userinput>.  This will report the log-probability of positive selection each iteration.  The user may exponentiate the reported values and then average them (using R, for example) in order to compute a more accurate estimate of the posterior probability of positive selection.
    </para>
    </section>
    <section><info><title>Substitution model examples</title></info>
      
      <para>Example: --smodel WAG+F+Rates.logNormal+INV</para>
      <para>Example: --smodel WAG+Rates.logNormal+INV (same as above)</para>
      <para>Example: --smodel LG+gwF+Rates.logNormal+INV</para>
      <para>Example: --smodel EQU --alphabet Triplets</para>
      <para>Example: --smodel HKY</para>
      <para>Example: --smodel M0</para>
      <para>Example: --smodel M0+F1x4</para>
      <para>Example: --smodel M2a</para>
      <para>Example: --smodel M2a[HKY] (same as above)</para>
      <!-- para>Example: smodel M2[TN,F3x4]</para -->
    </section>
    <section xml:id="genetic-codes"><info><title>Genetic Codes</title></info>
      
      <para>When using a codon-based substitution model like <userinput>M0</userinput>, you may select the genetic code by specifying <userinput>--alphabet Codons[,<replaceable>genetic-code</replaceable>]</userinput>.  Available genetic codes are <userinput>standard</userinput>, <userinput>mt-vert</userinput>, <userinput>mt-invert</userinput>, <userinput>mt-yeast</userinput>, <userinput>mt-protozoan</userinput>.</para>
<para>If the genetic code is not specified, then the standard code is used:
<screen><prompt>%</prompt> bali-phy <replaceable>sequence-file</replaceable> --smodel M0 --alphabet Codons
<prompt>%</prompt> bali-phy <replaceable>sequence-file</replaceable> --smodel M0 --alphabet Codons[RNA]</screen>
	These examples specify the vertebrate mitochondrial code:
	<screen><prompt>%</prompt> bali-phy <replaceable>sequence-file</replaceable> --smodel M0 --alphabet Codons[DNA,mt-vert]
<prompt>%</prompt> bali-phy <replaceable>sequence-file</replaceable> --smodel M0 --alphabet Codons[,mt-vert]</screen>	
</para>
    </section>

  </section>

    <section xml:id="indel_models"><info><title>Insertion/deletion models</title></info>
      
    <para>The current models are RS05, RS07, and <userinput>none</userinput>.  Models (except for <userinput>none</userinput>) can be specified using notation like:
<programlisting>RS07[logLambda~logLaplace[-4,0.707],meanIndelLength=2]</programlisting>
See section <xref linkend="functions"/> for the general syntax.  RS07 is the  default insertion/deletion model.</para>

    <para>Each of these models is a probability distribution on pairwise alignments.  The probability distribution on multiple sequence alignments $\Pr(A|T,\tau,\Lambda)$ is constructed by factoring the multiple sequence alignment into pairwise alignments along each branch of the tree, as described in Redelings and Suchard (2005).</para>

<table frame="none" rowsep="1"><info><title>Substitution Models</title></info>
	  
	  <tgroup cols="3">
	    <colspec colnum="1" colname="col1" colwidth="1*"/>
	    <colspec colnum="2" colname="col2" colwidth="1*"/>
	    <colspec colnum="3" colname="col3" colwidth="1*"/>
	    <thead><row>
		<entry>Model</entry>
		<entry>Parameters</entry>
		<entry>Description</entry>
	    </row></thead>
	    <tbody>	    
	      <row>
		<entry>
		  <para><userinput>RS05</userinput></para>
		  <para>Redelings and Suchard (2005)</para>
		</entry>
		<entry>
		  <para>$\delta$: the gap-opening probability</para>
		  <para>$\epsilon$: the gap-extension probability</para>
		</entry>
		<entry>
		  <para>Gap lengths are geometrically distributed with extension probability $\epsilon$.</para>
		  <para>This indel model is independent of the branch length connecting the ancestor and descent sequences.</para>
		</entry>
	      </row>
	      
	      <row>
		<entry>
		  <para><userinput>RS07</userinput></para>
		  <para>Redelings and Suchard (2007)</para>
		</entry>
		<entry>
		  <para>$\lambda$: the insertion and deletion rate</para>
		  <para>$\epsilon$: the gap-extension probability</para>
		</entry>
		<entry>
		  <para>Gap lengths are geometrically distributed with extension probability $\epsilon$.</para>
		  <para>The probability of an indel event depends on the branch length in this model.</para>
		</entry>
	      </row>
	      
	      <row>
		<entry>
		  <para><userinput>none</userinput></para>
		</entry>
		<entry/>
		<entry>	Indicates the lack of a model.</entry>
	      </row>
	      
	    </tbody>
	  </tgroup>
	</table>
	    

      <para>Specifying an indel model of <userinput>none</userinput> for a given partition results in fixing the alignment for that partition to its initial value, and ignoring information in shared insertions or deletions.</para>
    </section>

  <section xml:id="mixing_and_convergence"><info><title>Convergence and Mixing: Is it done yet?</title></info>
    

    <para>
      When using Markov chain Monte Carlo (MCMC) programs like
      <application>MrBayes</application>, <application>BEAST</application> or
      <application>BAli-Phy</application>, it is hard to determine in
      advance how many iterations are required to give a good
      estimate. The number depends on the specific data set that is
      being examined. As a result, <application>BAli-Phy</application>
      relies on the user to analyze the output of a running chain
      periodically in order to determine when enough samples have been
      obtained.  This section describes a number of techniques to
      diagnose when more samples must be taken.
    </para>

    <para>Some of the better diagnostics for lack of convergence rely on running at least 4 independent copies of the Markov chain (preferably 10) from different random starting points to see if the sampled posterior distributions for each chain are the same.  Unfortunately, when the distributions all seem to be this same, this doesn't <emphasis>prove</emphasis> that they have all converged to the equilibrium distribution.  However, if the distributions are different then you can reject either convergence or good mixing.</para>

    <section><info><title>Definition of Convergence</title></info>
      

      <para>Convergence refers to the the tendency of a Markov chain to
	to "forget" its starting value and become typical of its
	equilibrium distribution. Note that convergence is a property
	of the Markov chain itself, not of individual runs of the
	Markov chain.  Ideally a number of individual runs should be
	examined in order to determine how many initial iterations to
	discard as "burnin".
      </para>
    </section>
    
    <section><info><title>Definition of Mixing</title></info>
      
      <para>
	In MCMC, each sample is not fully independent of previous
	samples.  In fact, even after a Markov chain has converged,
	it can get "stuck" in one part of the parameter space for a
	long time, before jumping to an equally important part.  When
	this happens, each new sample contributes very little new
	information, and we need to obtain many more samples to get
	good precision on our parameter estimates.  In such a case, we say 
	that the chain isn't "mixing" well. 
      </para>
    </section>

    
    <section><info><title>Diagnostics: Variation in split frequencies across runs (ASDSF/MSDSF)</title></info>
      
      <section><info><title>ASDSF and MSDSF</title></info>
	
<para>
To calculate the ASDSF and MSDSF run:
<screen><prompt>%</prompt> trees-bootstrap <replaceable>dir-1</replaceable>/C1.trees <replaceable>dir-2</replaceable>/C1.trees ... <replaceable>dir-n</replaceable>/C1.trees &gt; partitions.bs</screen>	
For each split, the SDSF value is just the standard deviation across
runs of the Posterior Probabilities for that split.  By averaging the
resulting SDSF values across splits, we may obtain the ASDSF value
(Huelsenbeck and Ronquist 2001).  This is commonly considered
acceptable if it is &lt; 0.01.
</para>

<para>However, it is also useful to consider the maximum of the SDSF
  values (MSDSF).  This represents the range of variation in PP across
  the runs for the split with the most variation.
</para>
      </section>
      <section><info><title>Split-frequency comparison plot</title></info>
	
	<para>To generate the split-frequency comparison plot, you must have R installed.  Locate the script <filename>compare-runs.R</filename>.  Then run:
<screen><prompt>%</prompt> trees-bootstrap <replaceable>dir-1</replaceable>/C1.trees <replaceable>dir-2</replaceable>/C1.trees ... <replaceable>dir-n</replaceable>/C1.trees --LOD-table=LOD-table &gt; partitions.bs 
<prompt>%</prompt> R --slave --vanilla --args LOD-table compare-SF.pdf &lt; compare-runs.R</screen>
	  Following <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://dx.doi.org/10.1080/10635150600812544">Beiko et al (2006)</link>, this displays the variation in
	  estimates of split frequencies across runs.  Splits are
	  arranged on the x-axis in increasing order of 
	  Posterior Probability (PP), which is obtained by averaging over
	  runs.  We then plot a vertical bar from the minimum PP to the
	  maximum PP.
	</para>
	</section>
    </section>


    <section><info><title>Diagnostics: Potential Scale Reduction Factors (PSRF)</title></info>
      
<para>
Potential Scale Reduction Factors check that different runs have
similar posterior distributions.  Only numerical variables may have a
PSRF. To calculate the PSRF for each
numerical parameter, you may run: 

<screen><prompt>%</prompt> statreport <replaceable>dir-1</replaceable>/C1.log <replaceable>dir-2</replaceable>/C2.p ... <replaceable>dir-n</replaceable>/C1.log &gt; Report </screen>
The PSRF is a ratio of the width of the pooled distribution to the
average width of each distribution, and should ideally be 1.  The PSRF
is customarily considered to be small enough if it is less than 1.01.
</para>

<para>
We compare the PSRF based on the length of 80% credible intervals
(Brooks and Gelman 1998) and report the result as PSRF-80%CI.  For
integer-valued parameters, we avoid excessively large PSRF values by
subtracting 1 from the width of the pooled CI.
</para>

<para>
We also report a new PSRF that is more sensitive for integer
distributions.  For each individual distribution, we find the 80%
credible interval.  We divide the probability of that interval (which
may be more than 80%) by the probability of the same interval under the
pooled distribution.  The average of this measure over all
distributions gives us a PSRF that we report as PSRF-RCF.
</para>

<para>This convergence diagnostic gives a criterion for
detecting when a parameter value has stabilized at different
values in several independent runs, indicating a lack of
convergence. This situation might occur if different runs of
the Markov chain were trapped in different modes and failed to
adequately mix between modes.</para>
    </section>

    <section><info><title>Diagnostics: Effective sample sizes (ESS)</title></info>
      
      <section><info><title>ESS for numerical values</title></info>
	
      <para>To calculate the split ESS values, run:
<screen><prompt>%</prompt> statreport <replaceable>dir-1</replaceable>/C1.log <replaceable>dir-2</replaceable>/C1.log ... <replaceable>dir-n</replaceable>/C1.log &gt; Report </screen>
      We calculate effective sample sizes based on integrated
      autocorrelation times.  This method has the nice property that
      simply duplicating every sample does not increase the ESS.
      </para>

      <para>The
      program <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://evolve.zoo.ox.ac.uk/software/tracer/">Tracer</link>
      also computes ESS values.</para>
      </section>

      <section><info><title>ESS for split frequencies</title></info>
	
      <para>To calculate the split ESS values, run:
<screen><prompt>%</prompt> trees-bootstrap <replaceable>dir-1</replaceable>/C1.trees <replaceable>dir-2</replaceable>/C1.trees ... <replaceable>dir-n</replaceable>/C1.trees &gt; partitions.bs</screen>
      To compute the ESS for a split, we consider the presence or absence
      of a split in each iteration as a series of binary values.  We
      compute the integrated autocorrelation time for this binary
      sequence, which leads to an ESS.  This approach is similar to
      dividing the iterations into blocks and computing the ESS on the
      PP estimates in the blocks.  It is also similar to estimating
      the variance reduction under a block bootstrap.
      </para>
    </section>
</section>

    <section><info><title>Diagnostics: Stabilization</title></info>
      
      <section><info><title>Stabilization of numerical values</title></info>
	
<para>To obtain estimates of the stabilization time for each
numerical  parameter, you may run:
<screen><prompt>%</prompt> statreport C1.log &gt; Report </screen>
Each series of values is counted as having stabilized after
the series crosses its upper and then lower 95% confidence bounds
twice (if the initial value is below the median) or crosses its lower
and then upper confidence bounds twice (if the initial value is above
the median). The confidence bounds are those based on its
equilibrium distribution as calculated from the last third of the
values in the sequence.</para>
      </section>

      <section><info><title>Stabilization of tree topologies and tree distances</title></info>
	
	<para>In addition to examining convergence diagnostics for continuous
	parameters, it is important to examine convergence diagnostics
	for the topology as well
	(<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://dx.doi.org/10.1080/10635150600812544">Beiko
	et al 2006</link>).  In theory, we recommend the web tool <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://ceb.csit.fsu.edu/awty/">Are We There Yet (AWTY)</link> (Wilgenbush et al, 2004).  However, AWTY gives incorrect results if you upload plain NEWICK tree samples -- which is what BAli-Phy outputs.  Therefore, if you wish to use AWTY, you must convert the tree samples files to NEXUS before you upload them to AWTY in order to get correct results.</para>

<para>It is also be possible to assess stabilization of tree topologies using tools distributed with <application>bali-phy</application> by using commands like the following.  Here, sub-sampling and burnin does not apply to the equilibrium tree files. Also, note that you need to manually construct the equilibrium samples, which we recommend to contain at least 500 trees; you might do this by sub-sampling using the <application>BAli-Phy</application> tool <command>sub-sample</command>.</para>

<orderedlist inheritnum="ignore" continuation="restarts">
<listitem><para>To report the average distances within and between two tree samples:
<screen><prompt>%</prompt> trees-distances --skip=<replaceable>burnin</replaceable> --subsample=<replaceable>factor</replaceable> compare <replaceable>dir-1</replaceable>/C1.trees <replaceable>dir-2</replaceable>/C1.trees</screen>
</para></listitem>

<listitem><para>To compute the distance from each tree in C1.trees to all trees equilibrium.trees, as a time series:
<screen><prompt>%</prompt> trees-distances --skip=<replaceable>burnin</replaceable> --subsample=<replaceable>factor</replaceable> convergence <filename>C1.trees</filename> <filename>equilibrium.trees</filename></screen>
</para></listitem>

<listitem><para>To assess when the above time series stabilizes:
<screen><prompt>%</prompt> trees-distances --skip=<replaceable>burnin</replaceable> --subsample=<replaceable>factor</replaceable> converged <filename>C1.trees</filename> <filename>equilibrium.trees</filename></screen>
The stabilization criterion is the same one described above for numerical values.
</para></listitem>
</orderedlist>

<para>Note that the running time is the product of the number of trees in the two files.  Therefore, comparing two complete tree samples without sub-sampling will take too long.</para>

   </section>
	
    </section>

    <!-- sect2>
      <title>Diagnostics: Visual Inspection</title>
      <sect3>
	<title>Numerical Parameters</title>
	<para>
	  To inspect the Markov chain generated by
	  <application>BAli-Phy</application>, we recommend the program
	  <ulink url="http://evolve.zoo.ox.ac.uk/software/tracer/">Tracer</ulink>. 
	  You can open the file <filename>C1.log</filename> in Tracer to view
	  traceplots and to estimate the effective sample size.
	</para>
      </sect3>
      <sect3>
	<title>Topologies</title>
      <para>
	<screen><prompt>%</prompt> trees-view2 C1.trees C2.trees</screen>
      </para>
    </sect3>
  </sect2 -->
  </section>


  <section xml:id="alignment-utilities"><info><title>Alignment utilities</title></info>
    

    <para>Most of these tools will describe their options if given the "<userinput>--help</userinput>" argument on the command line.</para>

    <section><info><title>alignment-info</title></info>
      
      <para>Show basic information about the alignment:</para>
<screen><prompt>%</prompt> alignment-info file.fasta
<prompt>%</prompt> alignment-info file.fasta file.tree</screen>
    </section>
    
    <section><info><title>alignment-cat</title></info>
      
      <para>To select columns from an alignment:</para>
<screen><prompt>%</prompt> alignment-cat -c1-10,50-100,600- file.fasta > result.fasta
<prompt>%</prompt> alignment-cat -c5-250/3 file.fasta > first_codon_position.fasta
<prompt>%</prompt> alignment-cat -c6-250/3 file.fasta > second_codon_position.fasta</screen>

  <para>To concatenate two or more alignments:</para>
<screen><prompt>%</prompt> alignment-cat file1.fasta file2.fasta > all.fasta</screen>
    </section>
    
    <section><info><title>alignment-thin</title></info>
      
      <para>Remove columns without a minimum number of letters:</para> 
<screen><prompt>%</prompt> alignment-thin --min-letters=5 <replaceable>file</replaceable>.fasta > <replaceable>file</replaceable>-thinned.fasta</screen>
      <para>Remove sequences:</para>
<screen><prompt>%</prompt> alignment-thin --remove=seq1,seq2 <replaceable>file</replaceable>.fasta > <replaceable>file</replaceable>2.fasta</screen>
      <para>Remove short sequences:</para>
<screen><prompt>%</prompt> alignment-thin --longer-than=250 <replaceable>file</replaceable>.fasta > <replaceable>file</replaceable>-long.fasta</screen>
      <para>Remove sequences while preserving sequence diversity:</para> 
<screen><prompt>%</prompt> alignment-thin --down-to=30 <replaceable>file</replaceable>.fasta > <replaceable>file</replaceable>-30taxa.fasta
<prompt>%</prompt> alignment-thin --down-to=30 <replaceable>file</replaceable>.fasta --keep=seq1,seq2 > <replaceable>file</replaceable>-30taxa.fasta</screen>
      <para>Remove sequences that are missing conserved columns:</para> 
<screen><prompt>%</prompt> alignment-thin --remove-crazy=10 <replaceable>file</replaceable>.fasta > <replaceable>file</replaceable>2.fasta</screen>
    </section>

    <section><info><title>alignment-draw</title></info>
      
      <para>Draw an alignment to HTML, optionally coloring residues by AU.</para>
<screen><prompt>%</prompt>  alignment-draw <replaceable>file</replaceable>.fasta --show-ruler --color-scheme=DNA+contrast > <replaceable>file</replaceable>.html
<prompt>%</prompt>  alignment-draw <replaceable>file</replaceable>.fasta --show-ruler --AU=<replaceable>file</replaceable>-AU.prob --color-scheme=DNA+contrast+fade+fade+fade+fade > <replaceable>file</replaceable>-AU.html</screen>
    </section>

    <section><info><title>alignment-find</title></info>
      
      <para>Find the last (or first) FastA alignment in a file.</para>
<screen><prompt>%</prompt> alignment-find --first &lt; <replaceable>file</replaceable>.fastas &gt; first.fasta
<prompt>%</prompt> alignment-find &lt; <replaceable>file</replaceable>.fastas &gt; last.fasta</screen>
    </section>

    <section><info><title>alignment-indices</title></info>
      
      <para>Turn columns from a template alignment into alignment constraints:</para>
<screen><prompt>%</prompt> alignment-indices template.fasta > constraints.txt
<prompt>%</prompt> alignment-indices -c100-110,200,300- template.fasta > constraints.txt</screen>

      <para>Each line in this file corresponds to one
	alignment column.</para>
    </section>

    <section><info><title>alignment-chop-internal</title></info>
      
      <para>Remove internal-node ancestral sequences from an alignment.  (This
	probably only works for alignments output by bali-phy.) </para>
<screen><prompt>%</prompt> alignment-chop-internal <replaceable>file</replaceable>.fasta > <replaceable>file</replaceable>-chopped.fasta</screen>
    </section>

  </section>
  <section xml:id="tree-utilities"><info><title>Tree utilities</title></info>
    
    <section><info><title>trees-consensus</title></info>
      
      <para>This program analyzes the tree sample contained in
	<replaceable>file</replaceable>.  It reports the MAP topology, the
	supported taxa partitions (including partial partitions), and the
	majority consensus topology.
      </para> 
    </section>

    <section><info><title>trees-bootstrap</title></info>
      
      <para>Usage: trees-bootstrap <replaceable>file1</replaceable>
	[<replaceable>file2</replaceable> ... ] --predicates
	<replaceable>predicate-file</replaceable> [OPTIONS] </para>
      <para>This program analyzes the tree samples contained in
	<replaceable>file1</replaceable>, <replaceable>file2</replaceable>,
	etc.  It gives the support of each tree sample for each predicate in
	<replaceable>predicate-file</replaceable>, and reports a confidence
	interval based on the block bootstrap.
      </para> 

      <para>Each predicate is the intersection of a set of partitions, and
	is specified as a list of partitions or (multifurcating) trees, one
	per line.  Predicates are separated by blank lines.
      </para>
    </section>

    <section><info><title>trees-to-SRQ</title></info>
      

      <para>Usage: trees-to-SRQ <replaceable>predicate-file</replaceable> [OPTIONS] <replaceable>trees-file</replaceable> </para>

      <para>This program analyzes the tree samples contained in
	<replaceable>trees-file</replaceable>.  It uses them to produce an
	SRQ plot for each predicate in
	<replaceable>predicate-file</replaceable>.  Plots are produced in
	<application>gnuplot</application> format, with one point per line
	and with plots separated by a blank line.</para>

      <para>If <userinput>--mode sum </userinput> is specified, then a "sum"
	plot is produced instead of an SRQ plot.  In this plot, the slope of
	the curve corresponds to the posterior probability of the event.  If the
	<userinput>--invert</userinput> option is used then the slope of the
	curve correspond to the probability of the inverse event.  This is
	recommended if the probability of the event is near 1.0, because the
	sum plot does not distinguish variation in probabilities near 1.0 well.
      </para>

    </section>

  </section>

  <section xml:id="FAQ"><info><title>Frequently Asked Questions (FAQ)</title></info>
    
    <section><info><title>Input files</title></info>
      <qandaset>
	<qandaentry>
	  <question><para>Does BAli-Phy accept the wildcard characters "N" or "X"?  How does it treat them?</para></question>
	  <answer>
	    <para>Yes, BAli-Phy accepts the wildcard characters "N"
	    (for DNA) and "X" (for proteins).  These characters
	    indicate that some letter is present (as opposed to a
	    gap), but that you don't know <emphasis>which</emphasis>
	    letter it is.  
	    </para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>Does BAli-Phy accept "?" characters?</para></question>
	  <answer>
	    <para>
	      No.  "?" characters are often used to indicate
	      <emphasis>either</emphasis> letter presence (e.g. "N",
	      "X") <emphasis>or</emphasis> absence (e.g. "-").
	      BAli-phy will insist that you replace each "?" with
	      either "N"/"X" or "-" to indicate which one you mean. 
	    </para>

	    <para>(Most programs ignore indels and consider only
	    substitutions, and in that case "N" and "-" have the same
	    effect on the likelihood or parsimony score.  However,
	    since BAli-Phy takes indels into account, these two
	    alternatives are quite different.)
	    </para>

	  </answer>
	</qandaentry>

      <qandaentry>
	<question><para>Does BAli-Phy accept the characters "R" and "Y", etc.?</para></question>
	  <answer>
	    <para>
	      Yes.  BAli-Phy accepts the characters Y, R, W, S, K, M,
	      B, D, H, and V for DNA, RNA, and Codon alphabets.
	      BAli-Phy also accepts the characters B, Z, and J 
	      for amino acids.  These characters indicate partial
	      knowledge about a letter.  For example, R indicates
	      that a nucleotide is present, and is a puRine (A or
	      G). J indicates that an amino acid is present and is
	      either I or L.  
	    </para>

	    <para>
	      (Note that sequences sometimes contain such ambiguity
	      codes because the DNA that was sequenced contains
	      <emphasis>both</emphasis> values.  This might occur when
	      sequencing a heterozygote or when sequencing pooled DNA
	      from several individuals.  However, the model in
	      BAli-Phy (and other phylogeny inference programs) is
	      that only one letter is correct, but we do not know
	      which one it is.  This is probably not problematic when
	      dealing with pooled sequences, but should be considered.)
	    </para>
	  </answer>
	</qandaentry>

      <!-- qandaentry>
	<question><para>Can I specify a stop codon?</para></question>
	  <answer>
	  <para>
	  Well, yes...  but how do the models treat it?
	  </para>
	  </answer>
      </qandaentry -->

      </qandaset>
    </section>

    <section><info><title>Running <command>bali-phy</command>.</title></info>

      <qandaset>
	<qandaentry>
	  <question><para>Can I fix the alignment and ignore indel information, like MrBayes, BEAST, PhyloBayes and other MCMC programs?</para></question>
	  <answer>
	    <para>Yes.  Add <userinput>-Inone</userinput> or <userinput>--imodel=none</userinput> on the command line.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>Can I fix the tree topology, while allowing the alignment to vary?</para></question>
	  <answer>
	    <para>Yes.  Add <userinput>--disable=topology --tree=<replaceable>treefile</replaceable></userinput> on the command line.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>Can I fix the tree topology and <emphasis>relative</emphasis> branch lengths, while allowing the alignment to vary?</para></question>
	  <answer>
	    <para>Yes.  Add <userinput>--disable=tree --tree=<replaceable>treefile</replaceable></userinput> on the command line.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>Can I fix the tree topology and <emphasis>absolute</emphasis> branch lengths <emphasis>in all data partitions</emphasis>, while allowing the alignment to vary?</para></question>
	  <answer>
	    <para>Yes.  Add <userinput>--disable=tree --tree=<replaceable>treefile</replaceable> --scale=1</userinput> on the command line.</para>
	  </answer>
	</qandaentry>
      </qandaset>

    </section>

    <section><info><title>Run-time error messages</title></info>
      
      
      <qandaset>
	<qandaentry>
	  <question><para>I tried to use <userinput>--smodel LG+Rates.Gamma[6]</userinput> and I got an error message "bali-phy: No match."  What gives?</para></question>
	  <answer>
	    <para>You are probably using the C-shell as your command line shell.  It is trying to interpret <userinput>LG+Rates.Gamma[6]</userinput> as an array before running the command, and it is not succeeding.  Therefore, it doesn't even run <command>bali-phy</command>.</para>
	    <para>To avoid this, put quotes around the substitution model, like this: <userinput>--smodel "LG+Rates.Gamma[6]"</userinput>.  This will keep the C-shell from interfering with your command.
	    </para>
	  </answer>
	</qandaentry>
      </qandaset>
    </section>

    <section><info><title>Stopping <command>bali-phy</command>.</title></info>
      

      <qandaset>
	<qandaentry>
	  <question><para>Why is <command>bali-phy</command> still
	      running? How long will it take?</para></question>
	  <answer>
	    <para>It runs until you stop it.  Stop it when its
	      done.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>How do I stop a <command>bali-phy</command>
	  run on my personal computer?</para></question>
	  <answer>
	    <para>Simply kill the process -- there is no special
	    command to stop <command>bali-phy</command>. If you are
	    running it on your personal workstation, then you can use
	    the command <command>kill</command>.  To do that, you need
	    to find the PID (process ID) of the running program.  You
	    can find this by examining the beginning of the file
	    <filename>C1.out</filename>.  For 
	    example:
<screen><prompt>%</prompt> less 5d-1/C1.out
command: bali-phy 5d.fasta
start time: Wed Aug  9 13:44:39 2017

VERSION: 3.0-beta2  [type-constraints commit b792c30b+]  (Aug 04 2017 13:40:40)
BUILD: Aug  7 2017 21:01:44
ARCH: x86_64-pc-linux-gnu
COMPILER: GCC 7.1.0
FLAGS: -isystem &#36;(top_srcdir)/boost/include -isystem $(top_srcdir)/include -ffast-math -DNDEBUG -DNDEBUG_DP -funroll-loops  -Wall -Wextra -Wno-sign-compare -Woverloaded-virtual -Wstrict-aliasing -pipe -O3 -pedantic -I/usr/include/cairo -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng16 -g -Wmisleading-indentation -Wlogical-op -fno-var-tracking-assignments
directory: /home/bredelings/Work
subdirectory: 5d-257
hostname: telomere
<emphasis>PID: 18838</emphasis>
...
</screen>
Here the PID is 18838.  Therefore you can type:
<screen><prompt>%</prompt> kill 18838</screen>
On some operating systems you can also type:
<screen><prompt>%</prompt> killall bali-phy</screen>
However, be aware that this will terminate <emphasis>all</emphasis> of
your <command>bali-phy</command> runs on that computer.
	    </para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>How do I stop a <command>bali-phy</command>
	  run on a computing cluster?</para></question>
	  <answer>
	    <para>Simply terminate the submitted job.  The specific command
	    to terminate a job will depend on the queue manager that
	    is installed on your cluster.  Examine the documentation
	    for your cluster, or ask your cluster support staff how to delete
	    running jobs on your cluster.
	    </para>

	    <para>As an example, if the SGE software is used
	    to submit jobs, then the command <command>qstat</command>
	    should list your jobs and their job ID numbers (which is
	    different than the process ID number).  You can then use
	    the command <command>qdel</command> to delete jobs by ID
	    number.  The SGE documentation describes how to use these
	    commands. 
	    </para>
	  </answer>
	</qandaentry>


	<qandaentry>
	  <question><para>So, how can I know when to stop it?</para></question>
	  <answer>
	    <para>You can stop when it has both converged and also run for long enough to give
	      you &gt;1000 effectively independent samples.  </para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>How can I tell when the chain has converged?</para></question>
	  <answer>
	    <para>See section <xref linkend="mixing_and_convergence"/>.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>How can I check how many iterations the chain
	      has finished?</para></question>
	  <answer>
	    <para>Run <command>wc -l C1.log</command> inside the output
	      directory, and subtract 2.
	    </para>
	  </answer>
	</qandaentry>
      </qandaset>
    </section>


    <section><info><title>Running <command>bp-analyze</command>.</title></info>
      <qandaset>

	<qandaentry>
	  <question><para>Why does <command>bp-analyze</command> say "Program 'draw-tree' not found.  Tree pictures will not be generated"?</para></question>
	  <answer>
	    <para>The program <command>draw-tree</command> was not distributed on this platform (Windows, Mac).  This is not a fatal error message, it just means that a pretty picture of the tree will not be generated automatically.  You can still view the tree with <application>FigTree</application>, for example.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>Why does <command>bp-analyze</command> say "Program 'gnuplot' not found.  Trace plots will not be generated"?</para></question>
	  <answer>
	    <para>This is because you have not installed <application>gnuplot</application>.  This is not a fatal error message, it just means that pictures of traces, partition support, and SRQ plots will not be generated automatically.  You can still view MCMC traces with <application>Tracer</application>.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>Why does <command>bp-analyze</command> say "Program 'R' not found.  Some mixing graphs will not be generated"?</para></question>
	  <answer>
	    <para>This is because you have not installed <application>R</application>.  This is not a fatal error message, it just means that a plot showing differences in clade probabilities between runs will not be generated.</para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>Why is <command>bp-analyze</command> stopping early, or failing to generate some files?</para></question>
	  <answer>
	    <para>Look in the file <filename>Results/bp-analyze.log</filename>.  This should contain the actual commands that were run, along with error message from these commands.  These error message should give you a hint as to what the problem might be.</para>
	  </answer>
	</qandaentry>
      </qandaset>
    </section>


    <section><info><title>Interpreting the results.</title></info>
      

      <qandaset>
	<qandaentry>
	  <question><para>How do I compute the clade support?</para></question>
	  <answer>
	    <para>Actually, BAli-Phy uses unrooted trees, so it only estimates bi-partition support.  A bi-partition is a division of taxa into two groups, but it does not specify which group contains the root. </para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>How do I compute the split/bi-partition support?</para></question>
	  <answer>
	    <para>After you analyze the output (<xref linkend="analysis"/>), the partition support is indicated in
	      <filename>Results/consensus</filename> and in <filename>Results/c50.PP.tree</filename>. </para> 
	  </answer>
	</qandaentry>
      </qandaset>
    </section>

    <section><info><title>How do I...</title></info>
      
      <qandaset>
	<qandaentry>
	  <question><para>How do I concatenate alignments?</para></question>
	  <answer><para>
 	    <screen><prompt>%</prompt> alignment-cat <replaceable>filename1.fasta</replaceable> <replaceable>filename2.fasta</replaceable> &gt; result.fasta</screen>
	      The alignments must have the same sequence names, but
	      the names need not be in the same order.
	    </para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question><para>How do I select columns from an alignment?</para></question>
	  <answer><para>
	    <screen><prompt>%</prompt> alignment-cat -c1-10,50-100,600- <replaceable>filename.fasta</replaceable> &gt; result.fasta</screen>
	    The resulting alignment will contain the selected columns
	    in the order you specified.
	  </para>
	  </answer>
	</qandaentry>

	<qandaentry>
	  <question xml:id="generating_constraint_files"><para>How do I create an alignment-constraint file
	      from an alignment?</para></question>
	  <answer>
	    <para>To constrain the alignment to match some alignment
	      file <replaceable>filename.fasta</replaceable> in columns
	      100, 200-250, and 300, run:
	      <screen><prompt>%</prompt> alignment-indices -c100,200-250,300 <replaceable>filename.fasta</replaceable> &gt; filename.constraint</screen>
	    </para>
	  </answer>	
	</qandaentry>

      </qandaset>
    </section>
  </section>

</article>
