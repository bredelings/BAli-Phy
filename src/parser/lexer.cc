#line 2 "lexer.cc"

#line 4 "lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 45
#define YY_END_OF_BUFFER 46
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[207] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       46,   33,   32,   44,    1,    2,   16,   36,   44,   36,
       44,   21,   22,   25,   36,   38,   38,   37,   26,   23,
       24,   32,   27,   28,   29,   13,    1,    2,   10,   13,
       13,   13,   14,    1,    2,   14,   14,   14,   12,    1,
        2,   12,   12,   12,   12,   15,    1,    2,   45,   15,
       15,   15,    8,    1,    2,    7,    8,    8,    8,   33,
       44,   44,   28,   33,   33,   33,    0,   32,   32,   32,
        1,   36,    0,    0,    0,    0,   43,    0,   36,    0,

        0,    0,    0,    0,   36,    0,   38,    0,    0,    0,
        0,   37,   32,   32,    0,    0,    9,    0,   11,   33,
       33,   33,    0,    0,   31,   30,   34,   35,   43,    0,
       20,   42,   42,    4,    5,    4,   36,   41,    0,   41,
       39,    0,   40,    0,   32,   32,   32,   32,    0,    0,
        0,    0,    0,    0,   31,   31,   31,   31,   30,   30,
       30,   34,   35,    4,    6,   41,    0,    0,   41,    0,
       39,    0,   40,    0,   32,   17,   17,   17,    0,   19,
       19,   19,    0,    0,    3,   17,   17,   17,    0,   31,
       31,   31,    0,   41,   32,   32,    0,   19,   19,   19,

       41,    0,   18,   18,   18,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    4,    8,    9,
       10,   11,   11,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   13,   14,   15,   16,   17,   18,   18,   19,   20,
       21,   18,   22,   23,   24,   25,   18,   26,   27,   27,
       27,   27,   27,   27,   27,   28,   28,   29,   30,   18,
       18,   18,   18,   18,   31,   31,   31,   31,   32,   31,
       33,   33,   33,   33,   33,   33,   33,   33,   34,   33,
       33,   33,   33,   33,   33,   33,   33,   35,   33,   33,
       36,   37,   38,   18,   39,   40,   41,   41,   42,   42,

       43,   41,   44,   44,   44,   44,   44,   44,   44,   45,
       46,   44,   44,   45,   44,   45,   44,   45,   44,   47,
       44,   44,   48,   49,   50,   18,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static const YY_CHAR yy_meta[51] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        3,    3,    3,    4,    3,    5,    5,    5,    1,    1,
        1,    5,    1,    5,    5,    6,    6,    6,    5,    1,
        6,    6,    1,    1,    1,    1,    5,    1,    6,    1,
        6,    6,    6,    1,    1,    1,    1,    1,    5,    1
    } ;

static const flex_int16_t yy_base[223] =
    {   0,
        0,    0,   46,   92,  138,  184,  230,  276,  322,  368,
      414,  460,  510,    0,  559,    0,    0,    0,    0,    0,
      263,  607,  654, 1585,   47, 1585, 1585,    0,  701,  237,
      751, 1585, 1585, 1585,  221,  777,   36,    0, 1585, 1585,
     1585,   39, 1585,  217, 1585, 1585,   64, 1585, 1585,  207,
      206, 1585, 1585,   71, 1585,  204,  203, 1585, 1585,   75,
     1585,  192,  188,    0, 1585, 1585,   77, 1585, 1585,  186,
      185, 1585, 1585,   93, 1585, 1585,  183,  182, 1585,  824,
      181,  161,  160,    0,    0,    0,  871,    0,    0,    0,
       94,    0,    0,    0,    0,    0, 1585,   74,  132,  162,

      152,  151,  138,   76,  912,   45,   86,  100,  105,  111,
      126,    0,  148,  110,  117,  953, 1585,  139, 1585,    0,
        0,    0, 1002,   95, 1049, 1096,    0,    0,    0,    0,
     1585, 1585,  120,    0, 1585,  126, 1135,  140,   82,  172,
      151,  175,   91,   84,    0,  191,   95,    0,  140, 1184,
     1231,  179,   79, 1281, 1328,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1585,  194,  220,  223,  197,  230,
      226,  233,   47,   44,  248,  283,    0,    0,    0,  292,
     1375,    0,    0, 1422,  180,  299,    0,    0,    0,    0,
        0,    0,  133,  289,  294,  310, 1469,  334,    0,    0,

      314,  324,  349,    0,    0, 1585, 1516, 1522, 1528, 1534,
     1540, 1543, 1545, 1550, 1556, 1562,   52, 1568, 1571, 1573,
     1578,   47
    } ;

static const flex_int16_t yy_def[223] =
    {   0,
      206,    1,  207,  207,  208,  208,  209,  209,  210,  210,
      211,  211,    1,   13,   13,   15,   15,   15,   15,   15,
      206,  206,  206,  206,  206,  206,  206,  212,  206,  212,
      206,  206,  206,  206,  212,  206,  206,  213,  206,  206,
      206,   23,  206,  206,  206,  206,  206,  206,  206,  206,
      214,  206,  206,  206,  206,  206,  214,  206,  206,  206,
      206,  206,  214,  215,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,   22,   22,   22,  206,   23,   23,   23,
      206,  212,   29,   29,   29,   29,  206,   29,  212,  206,

      206,  206,  206,  206,  216,  206,  206,  206,  206,  217,
      206,  213,   23,   23,  218,  216,  206,  218,  206,   80,
       80,   80,  206,  206,  206,  206,  219,  220,   29,   29,
      206,  206,  206,  221,  206,  221,  216,  206,  206,  206,
      206,  206,  222,  217,  113,   23,  113,  146,  218,  206,
      206,  218,  116,  206,  206,  125,  125,  125,  126,  126,
      126,  219,  220,  221,  206,  206,  206,  206,  206,  206,
      206,  206,  222,  222,   23,  150,  176,  176,  150,  151,
      218,  181,  151,  206,  218,  154,  186,  186,  154,  155,
      155,  155,  206,  206,   23,   23,  206,  184,  198,  198,

      206,  206,  197,  203,  203,    0,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206
    } ;

static const flex_int16_t yy_nxt[1636] =
    {   0,
       22,   23,   24,   24,   25,   24,   24,   26,   27,   25,
       24,   24,   25,   28,   29,   30,   28,   28,   31,   32,
       33,   28,   34,   35,   28,   36,   37,   37,   38,   39,
       22,   22,   22,   22,   22,   40,   28,   41,   42,   43,
       23,   23,   23,   23,   23,   23,   23,   44,   28,   45,
       47,   91,  173,   48,   49,   47,   91,  143,   47,   91,
      106,  107,  107,  107,  113,  113,  113,  108,   91,   50,
      138,  138,  138,   91,  111,   91,   91,  114,  108,   91,
       91,   91,  174,   91,   91,  174,   91,   91,  129,   91,
      101,  134,  130,   51,  133,   52,   47,   91,   91,   48,

       49,   47,   91,   91,   47,   91,   91,  140,  140,  140,
      106,  107,  107,  107,  130,   50,  101,  108,  130,  206,
      101,  139,  144,  139,  111,  140,  140,  140,  108,  174,
      141,  141,  150,  151,  165,  113,  113,  113,  132,   51,
      152,   52,   54,  142,  131,   55,   49,   54,  114,  144,
       54,  107,  107,  107,  154,  206,  132,  108,  194,  194,
      194,   56,  152,  152,  111,  166,  166,  166,  108,  132,
      132,  167,  106,  145,  145,  145,  171,  171,  168,  146,
      132,  131,  167,  118,  116,   57,  147,   58,   54,  172,
      148,   55,   49,   54,  206,  206,   54,  169,  169,  169,

      141,  141,  152,  152,  124,  118,  116,   56,  118,  116,
      170,  118,  139,  142,  139,  116,  175,  175,  175,  166,
      166,  166,  169,  169,  169,  167,  118,  116,  185,  118,
      116,   57,  168,   58,   60,  170,  167,   61,   49,   60,
      115,  193,   60,  193,  105,  194,  194,  194,  166,  166,
      166,  171,  171,   62,  167,  169,  169,  169,  171,  171,
       99,  168,  206,  206,  172,  167,  206,  206,  170,  206,
      206,  172,  206,  195,  195,  195,  206,   63,   64,   65,
       60,  206,  206,   61,   49,   60,  196,  197,   60,  206,
      206,  197,  197,  197,  206,  197,  149,  206,  206,   62,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  201,  201,  201,  206,  206,  195,
      195,  195,  206,   63,   64,   65,   67,  202,  206,   68,
       69,   67,  196,  206,   67,  195,  195,  195,  206,  201,
      201,  201,  206,  206,  206,   70,  206,  206,  196,  201,
      201,  201,  202,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  202,  206,  206,  206,  206,  206,  206,   71,
      206,   72,   67,  206,  206,   68,   69,   67,  206,  206,
       67,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,   70,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,   71,  206,   72,   74,  206,
      206,   75,   76,   74,  206,  206,   74,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,   77,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,   78,  206,   79,   74,  206,  206,   75,   76,   74,
      206,  206,   74,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,   77,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,   78,  206,   79,
       80,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,   24,   24,   81,   24,   24,   24,  206,
      206,   24,  206,   82,   24,   24,   24,   24,   24,  206,
       80,   80,   80,   80,   80,  206,   24,  206,   23,  206,
      206,  206,  206,  206,  206,  206,  206,  206,   24,   24,
       24,  206,  206,  206,  206,  206,  206,   69,  206,  206,
      206,  206,  206,  206,   24,  206,  206,  206,   24,   24,
      206,   24,  206,  206,  206,  206,  206,  206,   24,   24,
       24,   24,   24,   24,   24,  206,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   83,   84,   85,   86,
      206,  206,  206,   85,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,   85,  206,  206,  206,  206,
      206,   87,   86,   86,   86,  206,  206,   84,   84,   84,
       84,   84,  206,  206,  206,   85,  206,   85,   85,   85,
       85,   85,   85,   85,   88,   89,   90,  206,  206,  206,
       89,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,   89,  206,  206,  206,  206,  206,  206,   90,
       90,   90,  206,  206,   88,   88,   88,   88,   88,  206,
      206,  206,   89,  206,   89,   89,   89,   89,   89,   89,

       89,   93,   94,   95,  206,  206,   94,  206,  206,  206,
      206,  206,  206,   94,   96,   97,   96,   96,   96,   94,
       94,   94,   96,   94,   96,   96,   95,   95,   95,   96,
       94,   93,   93,   93,   93,   93,   94,   98,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   96,
       94,  100,  101,  102,  206,  206,  101,  206,  206,  206,
      206,  206,  206,  101,  103,  101,  103,  103,  103,  206,
      101,  101,  103,  101,  103,  103,  102,  102,  102,  103,
      101,  100,  100,  100,  100,  100,  101,  104,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  103,

      101,  106,  107,  107,  107,  206,  206,  206,  108,  206,
      109,  110,  206,  206,  206,  111,  206,  206,  206,  108,
      206,  206,  109,  110,  120,  121,  122,  206,  206,  206,
      121,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  121,  206,  206,  206,  206,  206,  123,  122,
      122,  122,  206,  206,  120,  120,  120,  120,  120,  206,
      206,  206,  121,  206,  121,  121,  121,  121,  121,  121,
      121,  125,  126,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  127,  206,  127,  127,  127,  206,
      206,  206,  127,  206,  127,  127,  206,  206,  206,  128,

      206,  125,  125,  125,  125,  125,  206,  127,  206,  126,
      206,  126,  126,  126,  126,  126,  126,  126,  206,  127,
      135,  206,  206,  206,  136,   92,  206,   92,   92,   92,
      206,  206,  206,   92,  206,  137,   92,  206,  206,  206,
       92,  206,  206,  206,  206,  206,  206,  206,   92,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
       92,  135,  206,  206,  206,  136,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  153,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  155,  126,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  155,  155,  155,  155,  155,  206,  206,  206,
      126,  206,  126,  126,  126,  126,  126,  126,  126,  156,
      157,  158,  206,  206,  206,  157,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  157,  206,  206,
      206,  206,  206,   87,  158,  158,  158,  206,  206,  156,
      156,  156,  156,  156,  206,  206,  206,  157,  206,  157,
      157,  157,  157,  157,  157,  157,  159,  160,  161,  206,

      206,  206,  160,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  160,  206,  206,  206,  206,  206,
      206,  161,  161,  161,  206,  206,  159,  159,  159,  159,
      159,  206,  206,  206,  160,  206,  160,  160,  160,  160,
      160,  160,  160,  135,  206,  206,  206,  206,   92,  206,
       92,   92,   92,  206,  206,  206,   92,  206,  137,   92,
      206,  206,  206,   92,  206,  206,  206,  206,  206,  206,
      206,   92,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,   92,  176,  177,  178,  206,  179,  206,
      206,  206,  179,  179,  179,  206,  179,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  178,
      178,  178,  206,  206,  176,  176,  176,  176,  176,  206,
      206,  206,  177,  206,  177,  177,  177,  177,  177,  177,
      177,  180,  181,  182,  149,  183,  149,  149,  149,  184,
      184,  184,  206,  184,  206,  206,  206,  149,  149,  149,
      149,  149,  149,  149,  152,  149,  182,  182,  182,  149,
      149,  180,  180,  180,  180,  180,  149,  149,  149,  181,
      149,  181,  181,  181,  181,  181,  181,  181,  149,  149,
      149,  186,  187,  188,  206,  189,  206,  206,  206,  189,
      189,  189,  206,  189,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  188,  188,  188,  206,
      206,  186,  186,  186,  186,  186,  206,  206,  206,  187,
      206,  187,  187,  187,  187,  187,  187,  187,  190,  191,
      192,  206,  206,  206,  191,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  191,  206,  206,  206,
      206,  206,  123,  192,  192,  192,  206,  206,  190,  190,
      190,  190,  190,  206,  206,  206,  191,  206,  191,  191,
      191,  191,  191,  191,  191,  180,  181,  182,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  152,  206,

      182,  182,  182,  206,  206,  180,  180,  180,  180,  180,
      206,  206,  206,  181,  206,  181,  181,  181,  181,  181,
      181,  181,  198,  199,  200,  206,  184,  206,  206,  206,
      184,  184,  184,  206,  184,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  200,  200,  200,
      206,  206,  198,  198,  198,  198,  198,  206,  206,  206,
      199,  206,  199,  199,  199,  199,  199,  199,  199,  203,
      204,  205,  206,  197,  206,  206,  206,  197,  197,  197,
      206,  197,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  205,  205,  205,  206,  206,  203,

      203,  203,  203,  203,  206,  206,  206,  204,  206,  204,
      204,  204,  204,  204,  204,  204,   46,   46,   46,   46,
       46,   46,   53,   53,   53,   53,   53,   53,   59,   59,
       59,   59,   59,   59,   66,   66,   66,   66,   66,   66,
       73,   73,   73,   73,   73,   73,   92,   92,  112,  112,
      117,  117,  117,  117,  117,  117,  119,  206,  119,  206,
      206,  119,  134,  134,  134,  134,  134,  134,  149,  206,
      206,  206,  149,  149,  162,  162,  163,  163,  164,  206,
      164,  164,  164,  164,   21,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206
    } ;

static const flex_int16_t yy_chk[1636] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,   25,  222,    3,    3,    3,   25,  217,    3,   25,
       37,   37,   37,   37,   42,   42,   42,   37,   47,    3,
      106,  106,  106,   47,   37,   54,   47,   42,   37,   60,
       54,   67,  174,   54,   60,  173,   67,   60,   98,   67,
      104,  153,   98,    3,  104,    3,    4,   74,   91,    4,

        4,    4,   74,   91,    4,   74,   91,  139,  139,  139,
      107,  107,  107,  107,   98,    4,  104,  107,   98,  147,
      104,  108,  144,  108,  107,  108,  108,  108,  107,  143,
      109,  109,  115,  115,  136,  114,  114,  114,  133,    4,
      115,    4,    5,  109,  124,    5,    5,    5,  114,  110,
        5,  111,  111,  111,  118,  149,  103,  111,  193,  193,
      193,    5,  118,  149,  111,  138,  138,  138,  111,  102,
      101,  138,  113,  113,  113,  113,  141,  141,  138,  113,
      100,   99,  138,   83,   82,    5,  113,    5,    6,  141,
      113,    6,    6,    6,  152,  185,    6,  140,  140,  140,

      142,  142,  152,  185,   81,   78,   77,    6,   71,   70,
      140,   63,  146,  142,  146,   62,  146,  146,  146,  166,
      166,  166,  169,  169,  169,  166,   57,   56,  152,   51,
       50,    6,  166,    6,    7,  169,  166,    7,    7,    7,
       44,  167,    7,  167,   35,  167,  167,  167,  168,  168,
      168,  171,  171,    7,  168,  170,  170,  170,  172,  172,
       30,  168,   21,    0,  171,  168,    0,    0,  170,    0,
        0,  172,    0,  175,  175,  175,    0,    7,    7,    7,
        8,    0,    0,    8,    8,    8,  175,  176,    8,    0,
        0,  176,  176,  176,    0,  176,  180,    0,    0,    8,

      180,  180,  180,  186,  180,    0,    0,  186,  186,  186,
        0,  186,    0,    0,  194,  194,  194,    0,    0,  195,
      195,  195,    0,    8,    8,    8,    9,  194,    0,    9,
        9,    9,  195,    0,    9,  196,  196,  196,  198,  201,
      201,  201,  198,  198,  198,    9,  198,    0,  196,  202,
      202,  202,  201,  203,    0,    0,    0,  203,  203,  203,
        0,  203,  202,    0,    0,    0,    0,    0,    0,    9,
        0,    9,   10,    0,    0,   10,   10,   10,    0,    0,
       10,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   10,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   10,    0,   10,   11,    0,
        0,   11,   11,   11,    0,    0,   11,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   11,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   11,    0,   11,   12,    0,    0,   12,   12,   12,
        0,    0,   12,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   12,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   12,    0,   12,
       13,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   13,   13,   13,   13,   13,   13,    0,
        0,   13,    0,   13,   13,   13,   13,   13,   13,    0,
       13,   13,   13,   13,   13,    0,   13,    0,   13,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   13,   15,
       15,    0,    0,    0,    0,    0,    0,   15,    0,    0,
        0,    0,    0,    0,   15,    0,    0,    0,   15,   15,
        0,   15,    0,    0,    0,    0,    0,    0,   15,   15,
       15,   15,   15,   15,   15,    0,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   22,   22,   22,
        0,    0,    0,   22,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   22,    0,    0,    0,    0,
        0,   22,   22,   22,   22,    0,    0,   22,   22,   22,
       22,   22,    0,    0,    0,   22,    0,   22,   22,   22,
       22,   22,   22,   22,   23,   23,   23,    0,    0,    0,
       23,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   23,    0,    0,    0,    0,    0,    0,   23,
       23,   23,    0,    0,   23,   23,   23,   23,   23,    0,
        0,    0,   23,    0,   23,   23,   23,   23,   23,   23,

       23,   29,   29,   29,    0,    0,   29,    0,    0,    0,
        0,    0,    0,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   31,   31,   31,    0,    0,   31,    0,    0,    0,
        0,    0,    0,   31,   31,   31,   31,   31,   31,    0,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   36,   36,   36,   36,    0,    0,    0,   36,    0,
       36,   36,    0,    0,    0,   36,    0,    0,    0,   36,
        0,    0,   36,   36,   80,   80,   80,    0,    0,    0,
       80,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   80,    0,    0,    0,    0,    0,   80,   80,
       80,   80,    0,    0,   80,   80,   80,   80,   80,    0,
        0,    0,   80,    0,   80,   80,   80,   80,   80,   80,
       80,   87,   87,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   87,    0,   87,   87,   87,    0,
        0,    0,   87,    0,   87,   87,    0,    0,    0,   87,

        0,   87,   87,   87,   87,   87,    0,   87,    0,   87,
        0,   87,   87,   87,   87,   87,   87,   87,    0,   87,
      105,    0,    0,    0,  105,  105,    0,  105,  105,  105,
        0,    0,    0,  105,    0,  105,  105,    0,    0,    0,
      105,    0,    0,    0,    0,    0,    0,    0,  105,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      105,  116,    0,    0,    0,  116,  116,    0,  116,  116,
      116,    0,    0,    0,  116,    0,  116,  116,    0,    0,
        0,  116,    0,    0,    0,    0,    0,    0,    0,  116,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  116,  123,  123,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  123,  123,  123,  123,  123,    0,    0,    0,
      123,    0,  123,  123,  123,  123,  123,  123,  123,  125,
      125,  125,    0,    0,    0,  125,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  125,    0,    0,
        0,    0,    0,  125,  125,  125,  125,    0,    0,  125,
      125,  125,  125,  125,    0,    0,    0,  125,    0,  125,
      125,  125,  125,  125,  125,  125,  126,  126,  126,    0,

        0,    0,  126,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  126,    0,    0,    0,    0,    0,
        0,  126,  126,  126,    0,    0,  126,  126,  126,  126,
      126,    0,    0,    0,  126,    0,  126,  126,  126,  126,
      126,  126,  126,  137,    0,    0,    0,    0,  137,    0,
      137,  137,  137,    0,    0,    0,  137,    0,  137,  137,
        0,    0,    0,  137,    0,    0,    0,    0,    0,    0,
        0,  137,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  137,  150,  150,  150,    0,  150,    0,
        0,    0,  150,  150,  150,    0,  150,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  150,
      150,  150,    0,    0,  150,  150,  150,  150,  150,    0,
        0,    0,  150,    0,  150,  150,  150,  150,  150,  150,
      150,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,    0,  151,    0,    0,    0,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  154,  154,  154,    0,  154,    0,    0,    0,  154,
      154,  154,    0,  154,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  154,  154,  154,    0,
        0,  154,  154,  154,  154,  154,    0,    0,    0,  154,
        0,  154,  154,  154,  154,  154,  154,  154,  155,  155,
      155,    0,    0,    0,  155,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  155,    0,    0,    0,
        0,    0,  155,  155,  155,  155,    0,    0,  155,  155,
      155,  155,  155,    0,    0,    0,  155,    0,  155,  155,
      155,  155,  155,  155,  155,  181,  181,  181,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      181,    0,    0,    0,    0,    0,    0,    0,  181,    0,

      181,  181,  181,    0,    0,  181,  181,  181,  181,  181,
        0,    0,    0,  181,    0,  181,  181,  181,  181,  181,
      181,  181,  184,  184,  184,    0,  184,    0,    0,    0,
      184,  184,  184,    0,  184,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  184,  184,  184,
        0,    0,  184,  184,  184,  184,  184,    0,    0,    0,
      184,    0,  184,  184,  184,  184,  184,  184,  184,  197,
      197,  197,    0,  197,    0,    0,    0,  197,  197,  197,
        0,  197,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  197,  197,  197,    0,    0,  197,

      197,  197,  197,  197,    0,    0,    0,  197,    0,  197,
      197,  197,  197,  197,  197,  197,  207,  207,  207,  207,
      207,  207,  208,  208,  208,  208,  208,  208,  209,  209,
      209,  209,  209,  209,  210,  210,  210,  210,  210,  210,
      211,  211,  211,  211,  211,  211,  212,  212,  213,  213,
      214,  214,  214,  214,  214,  214,  215,    0,  215,    0,
        0,  215,  216,  216,  216,  216,  216,  216,  218,    0,
        0,    0,  218,  218,  219,  219,  220,  220,  221,    0,
      221,  221,  221,  221,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int16_t yy_rule_linenum[45] =
    {   0,
      127,  128,  131,  133,  134,  135,  138,  139,  141,  142,
      144,  145,  147,  148,  152,  154,  157,  169,  171,  173,
      177,  178,  179,  180,  181,  182,  183,  186,  188,  190,
      191,  192,  193,  198,  199,  200,  201,  203,  205,  206,
      209,  211,  212,  214
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
# include <cerrno>
# include <climits>
# include <cstdlib>
# include <string>
# include "driver.hh"
# include "parser.hh"
# include "util.H"

// Work around an incompatibility in flex (at least versions
// 2.5.31 through 2.5.33): it generates code that does
// not conform to C89.  See Debian bug 333231
// <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.
# undef yywrap
# define yywrap() 1

// Pacify warnings in yy_init_buffer (observed with Flex 2.6.4)
// and GCC 7.3.0.
#if defined __GNUC__ && 7 <= __GNUC__
# pragma GCC diagnostic ignored "-Wnull-dereference"
#endif

// Forward declarations
yy::parser::symbol_type varid(const yy::parser::location_type&);
yy::parser::symbol_type varsym(const yy::parser::location_type&);
yy::parser::symbol_type consym(const yy::parser::location_type&);

yy::parser::symbol_type make_integer(int radix, bool positive, int shift,
				     const yy::parser::location_type& loc);

yy::parser::symbol_type make_rational(const yy::parser::location_type& loc);

yy::parser::symbol_type make_char(const yy::parser::location_type& loc);
yy::parser::symbol_type make_string(const yy::parser::location_type& loc);

#line 1000 "lexer.cc"
#define YY_NO_INPUT 1

#line 113 "lexer.l"
  // Code run each time a pattern is matched.
  # define YY_USER_ACTION  loc.columns (yyleng);
#line 1006 "lexer.cc"
#line 1007 "lexer.cc"

#define INITIAL 0
#define layout 1
#define layout_do 2
#define layout_if 3
#define layout_left 4
#define bol 5
#define option_prags 6
#define line_prag1a 7
#define line_prag2 8
#define line_prag2a 9

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
    static int yy_top_state ( void );
    
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 117 "lexer.l"



#line 121 "lexer.l"
  // A handy shortcut to the location held by the driver.
  yy::location& loc = drv.location;
  // Code run each time yylex is called.
  loc.step ();


#line 1315 "lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 207 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 206 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 45 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 45 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 46 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 127 "lexer.l"
loc.step ();
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 128 "lexer.l"
loc.step ();
	YY_BREAK
/* GHC calls some handwritten code to deal with nested comments */
case 3:
YY_RULE_SETUP
#line 131 "lexer.l"
loc.step();
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 133 "lexer.l"
loc.step();
	YY_BREAK
case 5:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 134 "lexer.l"
loc.step();
	YY_BREAK
case 6:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 135 "lexer.l"
loc.step();
	YY_BREAK
/* bol state */
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 138 "lexer.l"
loc.lines(1); loc.step();
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 139 "lexer.l"
if (auto tok = drv.do_bol(loc)) return *tok;
	YY_BREAK
case 9:
/* rule 9 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 141 "lexer.l"
return drv.hopefully_open_brace(loc);
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 142 "lexer.l"
loc.lines(1); loc.step();
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 144 "lexer.l"
drv.hopefully_open_brace(loc);
	YY_BREAK
case 12:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 145 "lexer.l"
yy_pop_state();
	YY_BREAK
case 13:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 147 "lexer.l"
return drv.new_layout_context(loc, true, true, yy::parser::token::TOK_VOCURLY);
	YY_BREAK
case 14:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 148 "lexer.l"
return drv.new_layout_context(loc, false, true, yy::parser::token::TOK_VOCURLY);
	YY_BREAK
/* If we've generated a VOCURLY and started a new line to the left, then
     we need to generate a VCCURLY */
case 15:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 152 "lexer.l"
return drv.do_layout_left(loc);
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 154 "lexer.l"
loc.lines(1); loc.step (); yy_push_state(bol);
	YY_BREAK
/* known pragmas */
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 157 "lexer.l"

	YY_BREAK
/* <line_prag1> single-line line pragmas: # <line> "<file>" <extra-stuff> \n */
/* <line_prag2> Haskell-style line pragms, of the form
     {-# LINE <line> "<file>" #-} */
/* <line_prag2a> */
/* <column_prag> */
/* two-word pragmas */
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 169 "lexer.l"

	YY_BREAK
/* one-word pragmas */
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 171 "lexer.l"

	YY_BREAK
/* end pragma */
case 20:
YY_RULE_SETUP
#line 173 "lexer.l"

	YY_BREAK
/* unboxed tuples: (# and #) */
case 21:
YY_RULE_SETUP
#line 177 "lexer.l"
return yy::parser::make_OPAREN (loc);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 178 "lexer.l"
return yy::parser::make_CPAREN (loc);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 179 "lexer.l"
return yy::parser::make_OBRACK (loc);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 180 "lexer.l"
return yy::parser::make_CBRACK (loc);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 181 "lexer.l"
return yy::parser::make_COMMA  (loc);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 182 "lexer.l"
return yy::parser::make_SEMI   (loc);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 183 "lexer.l"
return yy::parser::make_BACKQUOTE (loc);
	YY_BREAK
/* action: push a "NoLayout" context into the stack */
case 28:
YY_RULE_SETUP
#line 186 "lexer.l"
drv.push_context(); return yy::parser::make_OCURLY (loc);
	YY_BREAK
/* action: pop the top context from the stack */
case 29:
YY_RULE_SETUP
#line 188 "lexer.l"
drv.pop_context(); return yy::parser::make_CCURLY (loc);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 190 "lexer.l"
return yy::parser::make_QVARID (yytext, loc);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 191 "lexer.l"
return yy::parser::make_QCONID (yytext, loc);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 192 "lexer.l"
return varid(loc);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 193 "lexer.l"
return yy::parser::make_CONID  (yytext, loc);
	YY_BREAK
/* Here we look for {qvarid}#+ ... {conid}#+ if magicHashEnabled */
case 34:
YY_RULE_SETUP
#line 198 "lexer.l"
return yy::parser::make_QVARSYM  (yytext,loc);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 199 "lexer.l"
return yy::parser::make_QCONSYM  (yytext,loc);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 200 "lexer.l"
return varsym(loc);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 201 "lexer.l"
return consym(loc);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 203 "lexer.l"
return make_integer(10,true,0,loc);
	YY_BREAK
/* 0[bB]{numspc}{binary}      make_integer(2,true,2,loc); */
case 39:
YY_RULE_SETUP
#line 205 "lexer.l"
return make_integer( 8,true,2,loc);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 206 "lexer.l"
return make_integer(16,true,2,loc);
	YY_BREAK
/* negative literals depend on an extension */
case 41:
YY_RULE_SETUP
#line 209 "lexer.l"
return make_rational(loc);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 211 "lexer.l"
return make_char(loc);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 212 "lexer.l"
return make_string(loc);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 214 "lexer.l"
{
             throw yy::parser::syntax_error
               (loc, "invalid character: " + std::string(yytext));
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(layout):
case YY_STATE_EOF(layout_do):
case YY_STATE_EOF(layout_if):
case YY_STATE_EOF(layout_left):
case YY_STATE_EOF(bol):
case YY_STATE_EOF(option_prags):
case YY_STATE_EOF(line_prag1a):
case YY_STATE_EOF(line_prag2):
case YY_STATE_EOF(line_prag2a):
#line 219 "lexer.l"
return yy::parser::make_END (loc);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 220 "lexer.l"
ECHO;
	YY_BREAK
#line 1686 "lexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 4);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 207 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 4;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 207 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 206);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

/* %if-c-only */
    static void yy_push_state (int  _new_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
    static void yy_pop_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
    static int yy_top_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 220 "lexer.l"




void
driver::scan_begin (const std::string& content)
{
  yy_flex_debug = trace_scanning;
  yy_scan_string(content.c_str());
}


void
driver::scan_end ()
{
  yy_delete_buffer(YY_CURRENT_BUFFER);
}

using namespace yy;

std::map<std::string,std::pair<yy::parser::token_type,int>> reserved_words =
{
    {"_",{parser::token::TOK_UNDERSCORE,0}},
    {"as",{parser::token::TOK_AS,0}},
    {"case",{parser::token::TOK_CASE,0}},
    {"data",{parser::token::TOK_DATA,0}},
    {"default",{parser::token::TOK_DEFAULT,0}},
    {"deriving",{parser::token::TOK_DERIVING,0}},
    {"do",{parser::token::TOK_DO,0}},
    {"else",{parser::token::TOK_ELSE,0}},
    {"hiding",{parser::token::TOK_HIDING,0}},
    {"if",{parser::token::TOK_IF,0}},
    {"import",{parser::token::TOK_IMPORT,0}},
    {"in",{parser::token::TOK_IN,0}},
    {"infix",{parser::token::TOK_INFIX,0}},
    {"infixl",{parser::token::TOK_INFIXL,0}},
    {"infixr",{parser::token::TOK_INFIXR,0}},
    {"instance",{parser::token::TOK_INSTANCE,0}},
    {"let",{parser::token::TOK_LET,0}},
    {"module",{parser::token::TOK_MODULE,0}},
    {"newtype",{parser::token::TOK_NEWTYPE,0}},
    {"of",{parser::token::TOK_OF,0}},
    {"qualified",{parser::token::TOK_QUALIFIED,0}},
    {"then",{parser::token::TOK_THEN,0}},
    {"type",{parser::token::TOK_TYPE,0}},
    {"where",{parser::token::TOK_WHERE,0}},
    {"builtin",{parser::token::TOK_BUILTIN,0}}
};


yy::parser::symbol_type varid(const yy::parser::location_type& loc)
{
    auto it = reserved_words.find(yytext);
    if (it == reserved_words.end())
	return yy::parser::make_VARID  (yytext, loc);
    else
    {
	auto tok = it->second.first;
	switch(tok)
	{
	case parser::token::TOK_DO:
	case parser::token::TOK_MDO:
//	    std::cerr<<"switch to <layout_do> @ "<<loc<<"\n";
	    yy_push_state(layout_do);
	    break;
	case parser::token::TOK_OF:
	case parser::token::TOK_LCASE:
	case parser::token::TOK_LET:
	case parser::token::TOK_WHERE:
	case parser::token::TOK_REC:
//	    std::cerr<<"switch to <layout> @ "<<loc<<"\n";
	    yy_push_state(layout);
	    break;
	case parser::token::TOK_IF:
//	    std::cerr<<"switch to <layout_do> @ "<<loc<<"\n";
	    yy_push_state(layout_if);
	    break;
	default:
	    break;
	}
	return yy::parser::symbol_type(tok, loc);
    }
}

std::map<std::string,std::pair<yy::parser::token_type,int>> reserved_symbols =
{
    {"..",{parser::token::TOK_DOTDOT,0}},
    {":",{parser::token::TOK_COLON,0}},
    {"::",{parser::token::TOK_DCOLON,0}},
    {"=",{parser::token::TOK_EQUAL,0}},
    {"\\",{parser::token::TOK_LAM,0}},
    {"|",{parser::token::TOK_VBAR,0}},
    {"<-",{parser::token::TOK_LARROW,0}},
    {"->",{parser::token::TOK_RARROW,0}},
    {"@",{parser::token::TOK_AT,0}},
    {"~",{parser::token::TOK_TILDE,0}},
    {"=>",{parser::token::TOK_DARROW,0}},
    {"-",{parser::token::TOK_MINUS,0}},
    {"!",{parser::token::TOK_BANG,0}},
    {"*",{parser::token::TOK_STAR,0}}
};

/*
   map (\ (x,y,z) -> (mkFastString x,(y,z)))
      [ ("..",  ITdotdot,              always)
        -- (:) is a reserved op, meaning only list cons
       ,(":",   ITcolon,               always)
       ,("::",  ITdcolon NormalSyntax, always)
       ,("=",   ITequal,               always)
       ,("\\",  ITlam,                 always)
       ,("|",   ITvbar,                always)
       ,("<-",  ITlarrow NormalSyntax, always)
       ,("->",  ITrarrow NormalSyntax, always)
       ,("@",   ITat,                  always)
       ,("~",   ITtilde,               always)
       ,("=>",  ITdarrow NormalSyntax, always)
       ,("-",   ITminus,               always)
       ,("!",   ITbang,                always)
       ,("*", ITstar NormalSyntax, starIsTypeEnabled)
        -- For 'forall a . t'
       ,(".", ITdot,  always) -- \i -> explicitForallEnabled i || inRulePrag i)
       ,("-<",  ITlarrowtail NormalSyntax, arrowsEnabled)
       ,(">-",  ITrarrowtail NormalSyntax, arrowsEnabled)
       ,("-<<", ITLarrowtail NormalSyntax, arrowsEnabled)
       ,(">>-", ITRarrowtail NormalSyntax, arrowsEnabled)
       ,("∷",   ITdcolon UnicodeSyntax, unicodeSyntaxEnabled)
       ,("⇒",   ITdarrow UnicodeSyntax, unicodeSyntaxEnabled)
       ,("∀",   ITforall UnicodeSyntax, unicodeSyntaxEnabled)
       ,("→",   ITrarrow UnicodeSyntax, unicodeSyntaxEnabled)
       ,("←",   ITlarrow UnicodeSyntax, unicodeSyntaxEnabled)
       ,("⤙",   ITlarrowtail UnicodeSyntax,
                                \i -> unicodeSyntaxEnabled i && arrowsEnabled i)
       ,("⤚",   ITrarrowtail UnicodeSyntax,
                                \i -> unicodeSyntaxEnabled i && arrowsEnabled i)
       ,("⤛",   ITLarrowtail UnicodeSyntax,
                                \i -> unicodeSyntaxEnabled i && arrowsEnabled i)
       ,("⤜",   ITRarrowtail UnicodeSyntax,
                                \i -> unicodeSyntaxEnabled i && arrowsEnabled i)
       ,("★",   ITstar UnicodeSyntax,
                  \i -> unicodeSyntaxEnabled i && starIsTypeEnabled i)
        -- ToDo: ideally, → and ∷ should be "specials", so that they cannot
        -- form part of a large operator.  This would let us have a better
        -- syntax for kinds: ɑ∷*→* would be a legal kind signature. (maybe).
       ]

*/

yy::parser::symbol_type varsym(const yy::parser::location_type& loc)
{
    auto it = reserved_symbols.find(yytext);
    if (it == reserved_symbols.end())
	return yy::parser::make_VARSYM  (yytext, loc);
    else
    {
	auto tok = it->second.first;
	return yy::parser::symbol_type(tok, loc);
    }
}

yy::parser::symbol_type consym(const yy::parser::location_type& loc)
{
    auto it = reserved_symbols.find(yytext);
    if (it == reserved_symbols.end())
	return yy::parser::make_CONSYM  (yytext, loc);
    else
    {
	auto tok = it->second.first;
	return yy::parser::symbol_type(tok, loc);
    }
}

yy::parser::symbol_type make_integer(int radix, bool positive, int shift,
				     const yy::parser::location_type& loc)
{
    errno = 0;
    auto n = std::stoi(yytext+shift, NULL, radix);
    if ( not (INT_MIN <= n and n <= INT_MAX and errno != ERANGE))
	throw yy::parser::syntax_error(loc, "integer is out of range: " + std::string(yytext));
    if (not positive)
	n = -n;
    return yy::parser::make_INTEGER(n, loc);
}

yy::parser::symbol_type make_rational(const yy::parser::location_type& loc)
{
    std::string s(yytext);
    double d = convertTo<double>(std::string(yytext));
    return yy::parser::make_RATIONAL(d,loc);
}

char get_char(const char* s, int& i)
{
    char c = s[i];
    if (c == '\\')
    {
	i++;
	c = s[i];
	if (c == 'a')
	    c = '\a';
	else if (c == 'b')
	    c = '\b';
	else if (c == 'f')
	    c = '\f';
	else if (c == 'n')
	    c = '\n';
	else if (c == 'r')
	    c = '\r';
	else if (c == 't')
	    c = '\t';
	else if (c == 'v')
	    c = '\v';
	else if (c == '"')
	    ;
	else if (c == '\'')
	    ;
	else
	    std::abort();
    }
    return c;
}

yy::parser::symbol_type make_char(const yy::parser::location_type& loc)
{
    int i=1;
    char c = get_char(yytext, i);
    return yy::parser::make_CHAR(c,loc);
}

yy::parser::symbol_type make_string(const yy::parser::location_type& loc)
{
    std::string s;
    s.resize(yyleng);
    int j=0;
    for(int i=1;i<yyleng-1;i++)
	s[j++] = get_char(yytext,i);
    s.resize(j);
    return yy::parser::make_STRING(s,loc);
}

boost::optional<yy::parser::symbol_type> driver::do_bol(const yy::parser::location_type& loc)
{
    auto x = get_offside(loc);
    int delta_offset = x.offset;
    bool gen_semis = x.gen_semis;
//    std::cerr<<"do_bol @ "<<loc<<std::endl;
    if (delta_offset < 0)
    {
//	std::cerr<<"offset = "<<loc.end.column<<", LT, generating '}'"<<std::endl;
	pop_context();
	return yy::parser::make_VCCURLY(loc);
    }
    else if (delta_offset == 0 and gen_semis)
    {
//	std::cerr<<"offset = "<<loc.end.column<<", EQ, generating ';'"<<std::endl;
	yy_pop_state();
	return yy::parser::make_SEMI(loc);
    }
    else
    {
	yy_pop_state();
	return boost::none;
    }
}

yy::parser::symbol_type driver::new_layout_context(const yy::parser::location_type& loc, bool strict, bool gen_semis, yy::parser::token_type tok)
{
    yy_pop_state();
    int offset = loc.end.column;
//    std::cerr<<"Opening new layout context at "<<loc<<std::endl;
    if (auto layout_context = get_context())
    {
	int prev_offset = layout_context->offset;
	if ((strict and prev_offset > offset) or
	    ((not strict) and prev_offset >= offset))
	{
//	    std::cerr<<"   - Going to layout_left"<<std::endl;
	    yy_push_state(layout_left);
	    return yy::parser::symbol_type(tok,loc);
	}
    }

    push_context({offset,gen_semis});
    return yy::parser::symbol_type(tok,loc);
}

yy::parser::symbol_type driver::do_layout_left(const yy::parser::location_type& loc)
{
//    std::cerr<<"Doing layout_left at "<<loc<<std::endl;
    yy_pop_state();
    yy_push_state(bol);
    return yy::parser::make_VCCURLY(loc);
}

yy::parser::symbol_type driver::hopefully_open_brace(const yy::parser::location_type& loc)
{
    if (auto layout_context = get_context())
    {
	int offset = loc.end.column;
	if (layout_context->offset >= offset)
	    throw yy::parser::syntax_error(loc,"Missing block");

    }
    yy_pop_state();
    push_context();
    return yy::parser::make_OCURLY(loc);
}

void use_things() {
    yy_top_state();
}

