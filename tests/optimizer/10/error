size = 1   Test.#1 = 'y'
size = 1   Test.#14 = 'y'
size = 1   Test.#15 = 'o'
size = 1   Test.#16 = '!'
size = 1   Test.#17 = []
size = 1   Test.#18 = Test.#16:Test.#17
size = 1   Test.#19 = Test.#15:Test.#18
size = 1   Test.#2 = 'o'
size = 1   Test.#20 = Test.#14:Test.#19
size = 1   Test.#21 = "case: failed pattern match"
size = 1   Test.#22 = Foreign.String.unpack_cpp_string Test.#21
size = 1   Test.#23 = 10
size = 1   Test.#29 = 10
size = 1   Test.#3 = '!'
size = 1   Test.#30 = 2
size = 1   Test.#4 = []
size = 1   Test.#5 = Test.#3:Test.#4
size = 1   Test.#6 = Test.#2:Test.#5
size = 1   Test.#7 = Test.#1:Test.#6
size = 1   Test.#8 = "case: failed pattern match"
size = 1   Test.#9 = Foreign.String.unpack_cpp_string Test.#8
size = 1   Test.$v#1 = Compiler.Base.error Test.#7
size = 1   Test.$v#2 = Compiler.Base.error Test.#9
size = 1   Test.$v#3 = Compiler.Base.error Test.#20
size = 1   Test.$v#4 = Compiler.Base.error Test.#22
size = 1   Test.f = \#10 -> case #10 of {#11:#12 -> #11; [] -> Test.$v#1; _ -> Test.$v#2}
size = 2   Test.g = \#24 -> let {#25 = case #24 of {#26:#27 -> #26; [] -> Test.$v#3; _ -> Test.$v#4}} in Prelude:add Test.#23 #25
size = 1   Test.h = Prelude:add Test.#29 Test.#30
