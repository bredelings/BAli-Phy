size = 1   Test.#0 = 10
size = 1   Test.#10 = Test.#8:Test.#3
size = 1   Test.#11 = "case: failed pattern match"
size = 1   Test.#12 = Foreign.String.unpack_cpp_string Test.#11
size = 1   Test.#1256 = 2
size = 1   Test.#13 = Test.#7:Test.#10
size = 1   Test.#2 = '!'
size = 1   Test.#3 = Test.#2:[]
size = 1   Test.#4 = Compiler.Base.error Test.#12
size = 1   Test.#7 = 'y'
size = 1   Test.#8 = 'o'
size = 1   Test.#9 = Compiler.Base.error Test.#13
size = 1   Test.f = \#6 -> case #6 of {#1251:#1252 -> #1251; [] -> Test.#9; _ -> Test.#4}
size = 3   Test.g = \#1252 -> let {#0 = 10} in let {#1255 = case #1252 of {#1251:#1256 -> #1251; [] -> Test.#9; _ -> Test.#4}} in Prelude:add #0 #1255
size = 1   Test.h = Prelude:add Test.#0 Test.#1256
